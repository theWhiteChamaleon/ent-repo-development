{"version":3,"file":"static/js/294.aa27956d.chunk.js","mappings":"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","sources":["components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","components/Select/customSelect.jsx","components/Modals/ConfirmationModal.jsx","components/bootsrap-table/Table.jsx","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","hooks/Mass-Upload/useMassUpload.js","hooks/Mass-Upload/useMassUploadDocument.js","components/Pagination/Pagination.jsx","components/Modals/SuccessModal.jsx","hooks/Mass-Upload/useMEPMassupload.js","utils/removeDocumentsHelper.js","hooks/Mass-Upload/useRemoveDocConnection.js","pages/mass-upload/massUpload.jsx","utils/getUserDetails.js","utils/downloadTemplate.js","massuUploadIndex.js","services/api/PlantAssignment/fetchCsrfService.js","hooks/useToast.js","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Button/Button.jsx","components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/Loader/Loader.js"],"sourcesContent":["import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n    // const handleDragOver = (event) => {\r\n    //   if (disabled) {\r\n    //     event.preventDefault();\r\n    //     event.stopPropagation();\r\n    //     showErrorToast(\"Please choose an operation from the drop-down first\");\r\n    //   } else {\r\n    //     // Allow drag-over behavior for valid file uploads\r\n    //     event.preventDefault();\r\n    //     event.dataTransfer.dropEffect = \"copy\";\r\n    //   }\r\n    // };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled ? \"Please select an operation first\" : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\n\r\nconst processDataInChunks = (data, chunkSize = 1000) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < data.length; i += chunkSize) {\r\n    chunks.push(data.slice(i, i + chunkSize));\r\n  }\r\n  return chunks;\r\n};\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"🔍 Starting template validation...\");\r\n    console.log({\r\n      operation: selectedOperation,\r\n      fileName: file.name,\r\n    });\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n      5: \"Create/Update MEP\",\r\n      6: \"Remove Doc-Parts Relationships\",\r\n    };\r\n\r\n    const matchedOperation = operationNames[selectedOperation];\r\n    const expectedHeaders =\r\n      config.MassUpload[matchedOperation]?.fileHeaders || [];\r\n    const mandatoryAttributes =\r\n      config.MassUpload[matchedOperation]?.mandatoryAttributes || [];\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\"❌ Invalid Collaborative Space list\");\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = async (e) => {\r\n      const workbook = XLSX.read(e.target.result, {\r\n        type: \"binary\",\r\n        dense: true,\r\n        cellDates: true,\r\n        cellNF: false,\r\n        cellText: false,\r\n      });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const uploadedHeaders =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n        \r\n      // Template header validation\r\n      const headerMismatch = !expectedHeaders.every((header) =>\r\n        uploadedHeaders.includes(header)\r\n      );\r\n\r\n      if (headerMismatch) {\r\n        console.error(\" Template mismatch detected!\");\r\n        reject({\r\n          isTemplateMismatch: true,\r\n          errors: [\r\n            \"The template uploaded does not match the selected operation.\",\r\n          ],\r\n          headers: uploadedHeaders,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const headers =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      if (!headers || headers.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file has no content or is empty.\"],\r\n          headers: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const allSheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n\r\n      if (allSheetData.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file contains headers but no data rows.\"],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n      console.log(\"allSheetData\", allSheetData);\r\n      const chunks = processDataInChunks(allSheetData, 1000);\r\n      const validationErrors = [];\r\n      const invalidPrefixes = [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"];\r\n\r\n      // Error counters\r\n      let errorStats = {\r\n        mandatory: 0,\r\n        collabSpace: 0,\r\n        einPrefix: 0,\r\n        docPrefix: 0,\r\n      };\r\n\r\n      // Convert collabSpaceTitles to lowercase for case-insensitive comparison\r\n      const lowerCaseCollabSpaceTitles = collabSpaceTitles.map((title) =>\r\n        title.toLowerCase()\r\n      );\r\n\r\n      for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\r\n        const chunk = chunks[chunkIndex];\r\n        const progress = Math.round(((chunkIndex + 1) / chunks.length) * 100);\r\n\r\n        chunk.forEach((row, indexInChunk) => {\r\n          const globalRowIndex = chunkIndex * 1000 + indexInChunk;\r\n\r\n          // Mandatory fields validation\r\n          mandatoryAttributes.forEach((field) => {\r\n            // Special case for Physical Product Structure: Find Number and Quantity not mandatory for level 0 rows\r\n            if (\r\n              matchedOperation === \"Physical Product Structure\" &&\r\n              (field === \"Find Number\" || field === \"Quantity\") &&\r\n              row[\"Level\"] !== undefined &&\r\n              (row[\"Level\"] === 0 || row[\"Level\"] === \"0\")\r\n            ) {\r\n              // Skip validation for these fields on level 0 rows\r\n              return;\r\n            }\r\n\r\n            // Modified check that doesn't treat 0 as empty\r\n            if (\r\n              row[field] === undefined ||\r\n              row[field] === null ||\r\n              (row[field].toString().trim() === \"\" && row[field] !== 0)\r\n            ) {\r\n              errorStats.mandatory++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${field}\" is required but is empty`\r\n              );\r\n            }\r\n          });\r\n\r\n          // New validation: For Operation 1 - Dimension is mandatory when type is Raw Material\r\n          if (matchedOperation === \"Physical Product\") {\r\n            const physicalProductType =\r\n              row[\"Physical Product/Raw Material\"]?.toString().trim() || \"\";\r\n            if (physicalProductType.toLowerCase() === \"raw material\") {\r\n              const dimension = row[\"Dimension\"]?.toString().trim() || \"\";\r\n              if (dimension === \"\") {\r\n                validationErrors.push(\r\n                  `Row ${\r\n                    globalRowIndex + 2\r\n                  }: \"Dimension\" is required when  the column Name in the template \"Physical Product/Raw Material\" value is  \"Raw Material\"`\r\n                );\r\n              }\r\n            }\r\n          }\r\n\r\n          // Collaborative Space validation\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            const userCollabSpace =\r\n              row[\"Collaborative Space\"]?.trim().toLowerCase() || \"\";\r\n            if (\r\n              !userCollabSpace ||\r\n              !lowerCaseCollabSpaceTitles.includes(userCollabSpace)\r\n            ) {\r\n              errorStats.collabSpace++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${\r\n                  userCollabSpace\r\n                    ? `You are not allowed to create in \"Collaborative Space -\" (${userCollabSpace})`\r\n                    : 'Collaborative Space\" is Missing or Empty'\r\n                }`\r\n              );\r\n            }\r\n          }\r\n          // NEW: Validate that the first data row for Physical Product Structure has Level = 0\r\n          if (\r\n            matchedOperation === \"Physical Product Structure\" &&\r\n            globalRowIndex === 0\r\n          ) {\r\n            const firstRow = allSheetData[0];\r\n            const levelValue = firstRow[\"Level\"];\r\n            const levelStr = String(levelValue).trim();\r\n            console.log(\r\n              \"Validating Level for Physical Product Structure, first row:\",\r\n              firstRow,\r\n              \"Parsed Level:\",\r\n              levelStr\r\n            );\r\n\r\n            if (\r\n              levelStr === \"\" ||\r\n              (levelStr !== \"0\" && Number(levelStr) !== 0)\r\n            ) {\r\n              // Add validation error for Level with row number and column name\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Level\" value \"${levelValue}\"  The first entry in the file should be a level 0 object.`\r\n              );\r\n              console.log(\r\n                \"Level validation failed - first row Level is not 0:\",\r\n                levelValue\r\n              );\r\n            }\r\n          }\r\n\r\n          // EIN Number / Document Name validation\r\n          let valueToValidate = null;\r\n          let columnName = \"\";\r\n\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Physical Product Structure\"\r\n          ) {\r\n            columnName = \"EIN Number\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.einPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"EIN Number\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          } else if (\r\n            matchedOperation === \"Physical Product-Document\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            columnName = \"Document Name\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.docPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Document Name\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          }\r\n\r\n          // NEW: Validate that for Physical Product Structure, the \"Quantity\" value is positive (cannot be zero or negative)\r\n          if (matchedOperation === \"Physical Product Structure\") {\r\n            columnName = \"Quantity\";\r\n            const quantityValue = row[columnName]?.toString().trim();\r\n            if (quantityValue) {\r\n              const numQuantity = Number(quantityValue);\r\n              if (isNaN(numQuantity) || numQuantity <= 0) {\r\n                validationErrors.push(\r\n                  `Row ${\r\n                    globalRowIndex + 2\r\n                  }: \"Quantity\" value \"${quantityValue}\" Quantity should not be 0 or -ve.`\r\n                );\r\n                console.log(\r\n                  \"Quantity validation failed - Quantity is 0 or -ve:\",\r\n                  quantityValue\r\n                );\r\n              }\r\n            }\r\n          }\r\n          // NEW: Validate that for MEP, all mandatory fields are present\r\n          if (matchedOperation === \"Create/Update MEP\") {\r\n            console.log(\r\n              \"Mondatory fields validation for MEP\",\r\n              mandatoryAttributes\r\n            );\r\n            mandatoryAttributes.forEach((field) => {\r\n              if (\r\n                row[field] === undefined ||\r\n                row[field] === null ||\r\n                (row[field].toString().trim() === \"\" && row[field] !== 0)\r\n              ) {\r\n                errorStats.mandatory++;\r\n                validationErrors.push(\r\n                  `Row ${\r\n                    globalRowIndex + 2\r\n                  }: \"${field}\" is required but is empty`\r\n                );\r\n              }\r\n            });\r\n          }\r\n\r\n          // NEW: Validate that for MEP, all mandatory fields are present\r\n          if (matchedOperation === \"Remove Doc-Parts Relationships\") {\r\n            console.log(\r\n              \"Mondatory fields validation for MEP\",\r\n              mandatoryAttributes\r\n            );\r\n            mandatoryAttributes.forEach((field) => {\r\n              if (\r\n                row[field] === undefined ||\r\n                row[field] === null ||\r\n                (row[field].toString().trim() === \"\" && row[field] !== 0)\r\n              ) {\r\n                errorStats.mandatory++;\r\n                validationErrors.push(\r\n                  `Row ${\r\n                    globalRowIndex + 2\r\n                  }: \"${field}\" is required but is empty`\r\n                );\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Log only at 25% intervals\r\n        if (progress % 25 === 0) {\r\n          console.log(`Processing: ${progress}% complete`, {\r\n            processedRows: (chunkIndex + 1) * 1000,\r\n            totalRows: allSheetData.length,\r\n            currentErrors: {\r\n              mandatory: errorStats.mandatory,\r\n              collaborativeSpace: errorStats.collabSpace,\r\n              einPrefix: errorStats.einPrefix,\r\n              documentPrefix: errorStats.docPrefix,\r\n              total: validationErrors.length,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length > 0) {\r\n        console.log(\" Validation completed with errors:\", {\r\n          total: validationErrors.length,\r\n          byType: errorStats,\r\n        });\r\n        reject({\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes,\r\n        });\r\n        return;\r\n      }\r\n\r\n      console.log(\"✅ Validation completed successfully\");\r\n      resolve({\r\n        headers,\r\n        sheetData: allSheetData,\r\n        validationErrors: [],\r\n        mandatoryAttributes,\r\n      });\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.error(\" Error reading file\");\r\n      reject({\r\n        errors: [\"File reading failed.\"],\r\n        headers: [],\r\n        isTemplateMismatch: false,\r\n      });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  options,\r\n  onChange,\r\n  size,\r\n  className,\r\n}) => {\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{options.defaultLabel}</option> {/* Default option */}\r\n      {options.list.map((option, attrIndex) => (\r\n        <option key={attrIndex} value={option.value}>\r\n          {option.label}\r\n        </option>\r\n      ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","import React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport \"./ConfirmationModal.css\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirm Submission\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Submit\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <div className=\"confirmation-modal-content\">\r\n        <h4 className=\"confirmation-title\">\r\n          Are you sure you want to submit? This action cannot be undone.\r\n        </h4>\r\n\r\n        <ReusableAlert\r\n          variant=\"info\"\r\n          className=\"mb-3\"\r\n          message={\r\n            <span className=\"info-message-container\">\r\n              <span className=\"info-icon\">i</span>\r\n\r\n              <span className=\"info-text\">\r\n                Once submitted, your data will be processed by the system. You\r\n                will receive a confirmation once its complete. Large uploads may\r\n                take a few minutes.\r\n              </span>\r\n            </span>\r\n          }\r\n        />\r\n      </div>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\n// import \"./staticTable.css\"; // Ensure updated styles are applied\r\n\r\nconst StaticTable = ({\r\n  columnHeaders,\r\n  handleSelectChange,\r\n  dropdownOptions = [],\r\n}) => {\r\n  return (\r\n    <Table bordered className=\"table-light\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\">Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((column, index) => {\r\n          const { header, currentMapping, defaultLabel, disabled } = column;\r\n          // Get filtered dropdown options for this specific column\r\n          const filteredOptions = dropdownOptions(header);\r\n\r\n          return (\r\n            <tr key={index} className={disabled ? \"disabled-row\" : \"\"}>\r\n              <td className={disabled ? \"disabled-cell\" : \"\"}>{header}</td>\r\n              <td\r\n                className={`dropdown-cell ${\r\n                  disabled ? \"disabled-dropdown\" : \"\"\r\n                }`}\r\n              >\r\n                <div className=\"dropdown-wrapper\">\r\n                  <CustomSelect\r\n                    index={index}\r\n                    selectedValue={currentMapping?.uiLabel || header}\r\n                    onChange={(index, value) =>\r\n                      handleSelectChange(header, value)\r\n                    }\r\n                    size=\"lg\"\r\n                    className={`w-100 ${\r\n                      disabled ? \"custom-select-disabled\" : \"\"\r\n                    }`}\r\n                    disabled={disabled} // Fully disables interaction\r\n                    options={{\r\n                      defaultLabel: defaultLabel,\r\n                      list: filteredOptions,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import React from \"react\";\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\n\r\nconst MappedList = ({\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  selectedMappings,\r\n  setSelectedMappings,\r\n  dropdownOptions,\r\n  allNLSValues,\r\n  operationChoice,\r\n}) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n  console.log(\"MappedList - Received dropdownOptions:\", dropdownOptions);\r\n  console.log(\"MappedList - Received operationChoice:\", operationChoice);\r\n  console.log(\"MappedList - Received allNLSValues:\", allNLSValues);\r\n\r\n  // Checks if column header matches any NLS value\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    const hasMatch = allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    // console.log(\r\n    //   `Checking if header '${header}' matches any NLS value:`,\r\n    //   hasMatch\r\n    // );\r\n    return hasMatch;\r\n  };\r\n\r\n  // Gets backend name for selected UI label\r\n  const getBackendNameForUILabel = (uiLabel) => {\r\n    console.log(\"Finding backend name for UI label:\", uiLabel);\r\n    console.log(\"Current dropdown options:\", dropdownOptions);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available\");\r\n      return uiLabel;\r\n    }\r\n\r\n    const option = dropdownOptions.find((opt) => opt.uiLabel === uiLabel);\r\n    console.log(\"Found option:\", option);\r\n    return option ? option.backendName : uiLabel;\r\n  };\r\n\r\n  // Prepare dropdown options for the table - filter out already selected values\r\n  const prepareDropdownOptions = (currentColumnHeader) => {\r\n    // console.log(\"Preparing dropdown options for column:\", currentColumnHeader);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available for filtering\");\r\n      return [];\r\n    }\r\n\r\n    // Check if current header has a matching NLS value or is mandatory\r\n    const currentHeaderHasNLS = hasMatchingNLS(currentColumnHeader);\r\n    const isCurrentHeaderMandatory =\r\n      mandatoryAttributes.includes(currentColumnHeader);\r\n    const shouldExcludeOwnLabel =\r\n      currentHeaderHasNLS || isCurrentHeaderMandatory;\r\n\r\n    // For debugging\r\n    // console.log(\r\n    //   `Column '${currentColumnHeader}': has NLS match=${currentHeaderHasNLS}, is mandatory=${isCurrentHeaderMandatory}, should exclude own label=${shouldExcludeOwnLabel}`\r\n    // );\r\n\r\n    // Get currently selected values to filter them out (from other columns)\r\n    const selectedValues = Object.entries(selectedMappings)\r\n      .filter(([header]) => header !== currentColumnHeader)\r\n      .map(([_, mapping]) => mapping.uiLabel || mapping.mappedAttribute);\r\n\r\n    // For operation 2, we want to group options by their categories\r\n    if (operationChoice === \"2\") {\r\n      // Create grouped options structure\r\n      const groupedOptions = [];\r\n\r\n      // Look for EBOM attributes in the dropdown options\r\n      const ebomAttributes = dropdownOptions\r\n        .filter((attr) => {\r\n          // Basic filters first\r\n          const isEBOMAttribute = attr.group === \"EBOM Attributes\";\r\n          const isAlreadySelected = selectedValues.includes(attr.uiLabel);\r\n\r\n          // Check if this attribute matches ANY NLS value\r\n          const matchesAnyNLS = allNLSValues.some(\r\n            (nls) =>\r\n              nls.toLowerCase().trim() === attr.uiLabel.toLowerCase().trim()\r\n          );\r\n\r\n          // Check if this attribute is in the mandatory list\r\n          const isMandatory = mandatoryAttributes.includes(attr.uiLabel);\r\n\r\n          // Only exclude if it matches an NLS value AND is mandatory\r\n          const shouldExclude = matchesAnyNLS && isMandatory;\r\n\r\n          // For debugging\r\n          if (shouldExclude) {\r\n            // console.log(\r\n            //   `Excluding from dropdown: ${attr.uiLabel} (NLS match: ${matchesAnyNLS}, mandatory: ${isMandatory})`\r\n            // );\r\n          }\r\n\r\n          return isEBOMAttribute && !isAlreadySelected && !shouldExclude;\r\n        })\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      // Always add EBOM Attributes group if we have any EBOM attributes\r\n      if (ebomAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"EBOM Attributes\",\r\n          options: ebomAttributes,\r\n        });\r\n      }\r\n\r\n      // Add any Part Attributes group with the same filtering logic\r\n      const partAttributes = dropdownOptions\r\n        .filter((attr) => {\r\n          const isNotEBOMAttribute = attr.group !== \"EBOM Attributes\";\r\n          const isNotSystemAttribute = attr.group !== \"System Attributes\";\r\n          const isAlreadySelected = selectedValues.includes(attr.uiLabel);\r\n\r\n          // Check if this attribute matches ANY NLS value - same as non-operation 2 logic\r\n          const matchesAnyNLS = allNLSValues.some(\r\n            (nls) =>\r\n              nls.toLowerCase().trim() === attr.uiLabel.toLowerCase().trim()\r\n          );\r\n\r\n          // Check if this attribute is in the mandatory list\r\n          const isMandatory = mandatoryAttributes.includes(attr.uiLabel);\r\n\r\n          // Only exclude if it matches an NLS value AND is mandatory\r\n          const shouldExclude = matchesAnyNLS && isMandatory;\r\n\r\n          // For debugging\r\n          if (shouldExclude) {\r\n            // console.log(\r\n            //   `Excluding from dropdown: ${attr.uiLabel} (NLS match: ${matchesAnyNLS}, mandatory: ${isMandatory})`\r\n            // );\r\n          }\r\n\r\n          return (\r\n            isNotEBOMAttribute &&\r\n            isNotSystemAttribute &&\r\n            !isAlreadySelected &&\r\n            !shouldExclude\r\n          );\r\n        })\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      if (partAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"Item Attributes\",\r\n          options: partAttributes,\r\n        });\r\n      }\r\n\r\n      return groupedOptions;\r\n    }\r\n\r\n    // For operation 4, return only the 4 specific BOS Attributes\r\n    if (operationChoice === \"4\") {\r\n      // List of only the 4 attributes we want to show\r\n      const allowedBosAttributes = [\r\n        \"Print On Purchase Order Required\",\r\n        \"Print On Work Order Required\",\r\n        \"Work Order Document Required\",\r\n        \"Print On report Order Required\",\r\n      ];\r\n\r\n      // Return a flat array of only the 4 specific BOS Attributes\r\n      return dropdownOptions\r\n        .filter(\r\n          (attr) =>\r\n            attr.group === \"BOS Attributes\" &&\r\n            allowedBosAttributes.includes(attr.uiLabel) &&\r\n            !selectedValues.includes(attr.uiLabel)\r\n        )\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n    }\r\n\r\n    // For other operations, return flat list with the same filtering logic\r\n    const filteredOptions = dropdownOptions\r\n      .filter((attr) => {\r\n        const isAlreadySelected = selectedValues.includes(attr.uiLabel);\r\n\r\n        // Check if this attribute matches ANY NLS value\r\n        const matchesAnyNLS = allNLSValues.some(\r\n          (nls) =>\r\n            nls.toLowerCase().trim() === attr.uiLabel.toLowerCase().trim()\r\n        );\r\n\r\n        // Check if this attribute is in the mandatory list\r\n        const isMandatory = mandatoryAttributes.includes(attr.uiLabel);\r\n\r\n        // Only exclude if it matches an NLS value AND is mandatory\r\n        const shouldExclude = matchesAnyNLS && isMandatory;\r\n\r\n        // For debugging\r\n        if (shouldExclude) {\r\n          // console.log(\r\n          //   `Excluding from dropdown: ${attr.uiLabel} (NLS match: ${matchesAnyNLS}, mandatory: ${isMandatory})`\r\n          // );\r\n        }\r\n\r\n        // Return true to keep items that are either NOT already selected OR don't meet exclusion criteria\r\n        return !isAlreadySelected && !shouldExclude;\r\n      })\r\n      .map((attr) => ({\r\n        value: attr.uiLabel,\r\n        label: attr.uiLabel,\r\n      }));\r\n\r\n    // console.log(\r\n    //   \"Final filteredOptions for column:\",\r\n    //   currentColumnHeader,\r\n    //   filteredOptions\r\n    // );\r\n\r\n    return filteredOptions;\r\n  };\r\n\r\n  // Handles selection changes from Table\r\n  const handleSelectChange = (columnHeader, value) => {\r\n    console.log(\r\n      \"Selection changed for column:\",\r\n      columnHeader,\r\n      \"to value:\",\r\n      value\r\n    );\r\n\r\n    const backendName = getBackendNameForUILabel(value);\r\n    console.log(\"Mapped backend name:\", backendName);\r\n\r\n    setSelectedMappings((prev) => ({\r\n      ...prev,\r\n      [columnHeader]: {\r\n        columnName: columnHeader,\r\n        uiLabel: value,\r\n        mappedAttribute: backendName,\r\n        isMandatory: mandatoryAttributes.includes(columnHeader),\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Prepare column data with all needed information\r\n  const prepareColumnsData = () => {\r\n    return columnHeaders.map((header) => {\r\n      const hasNLS = hasMatchingNLS(header);\r\n      const isMandatory = mandatoryAttributes.includes(header);\r\n\r\n      // Special handling for operation 2 - disable system attributes even if not mandatory\r\n      let shouldBeDisabled = hasNLS && isMandatory;\r\n\r\n      if (operationChoice === \"2\" && hasNLS) {\r\n        // Check if this is a system attribute for operation 2\r\n        const isSystemAttribute = [\r\n          \"Description\",\r\n          \"EIN Number\",\r\n          \"Type\",\r\n          \"Title\",\r\n          \"Collaborative Space\",\r\n          \"Physical Product/Raw Material\",\r\n        ].some(\r\n          (attr) => header.toLowerCase().trim() === attr.toLowerCase().trim()\r\n        );\r\n\r\n        // For operation 2, disable if it's a system attribute regardless of mandatory status\r\n        if (isSystemAttribute) {\r\n          shouldBeDisabled = true;\r\n          // console.log(\r\n          //   `Operation 2: Disabling system attribute '${header}' regardless of mandatory status`\r\n          // );\r\n        }\r\n      }\r\n\r\n      return {\r\n        header,\r\n        isMandatory,\r\n        hasNLS,\r\n        currentMapping: selectedMappings[header],\r\n        defaultLabel: hasNLS ? header : \"Please select from Drop Down\",\r\n        disabled: shouldBeDisabled,\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={prepareColumnsData()}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedMappings={selectedMappings}\r\n      dropdownOptions={(header) => prepareDropdownOptions(header)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show, //controls modal visibility//\r\n  onHide, //function to hide modal//\r\n  columnHeaders, //array of column names from Excel//\r\n  mandatoryAttributes, //required fields from excel//\r\n  onColumnsMapped, //callback to receive the final mapping\r\n  existingMappings = {}, // Add this prop for existing mappings\r\n  dropdownOptions, // Receive dropdownOptions\r\n  allNLSValues, // Add this prop\r\n  operationChoice, // Add operation choice\r\n}) => {\r\n  // Initialize with existing mappings if available\r\n  const [selectedMappings, setSelectedMappings] = useState(existingMappings);\r\n\r\n  // Reset mappings when modal is opened with new existingMappings\r\n  useEffect(() => {\r\n    if (show && Object.keys(existingMappings).length > 0) {\r\n      setSelectedMappings(existingMappings);\r\n    }\r\n  }, [show, existingMappings]);\r\n\r\n  console.log(\"ColumnMappingModal NLS values:\", allNLSValues);\r\n\r\n  const handleOkClick = () => {\r\n    console.group(\"Column Mapping Results\");\r\n    console.log(\"Raw Mappings:\", selectedMappings);\r\n\r\n    // Create complete mappings including unmapped columns\r\n    const completeMappings = {};\r\n\r\n    // Start with existing mappings to ensure we don't lose any\r\n    const simplifiedMappings = { ...existingMappings };\r\n\r\n    // Helper function to check if column has matching NLS\r\n    const hasMatchingNLS = (header) => {\r\n      if (!Array.isArray(allNLSValues)) return false;\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      return allNLSValues.some(\r\n        (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n      );\r\n    };\r\n\r\n    // Helper function to get backend name for a column with NLS match\r\n    const getBackendNameForHeader = (header) => {\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      const matchingOption = dropdownOptions.find(\r\n        (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n      );\r\n      return matchingOption ? matchingOption.backendName : header;\r\n    };\r\n\r\n    // Special mapping for known attributes that might not have NLS matches\r\n    const specialMappings = {\r\n      \"EIN Number\": \"PartNumber\",\r\n    };\r\n\r\n    // Process all column headers\r\n    columnHeaders.forEach((columnName) => {\r\n      if (selectedMappings[columnName]) {\r\n        // Column was mapped by user - extract the proper backend name\r\n        const userMapping = selectedMappings[columnName];\r\n\r\n        // Handle both object and string mappings\r\n        if (typeof userMapping === \"object\" && userMapping !== null) {\r\n          // It's an object with mappedAttribute property\r\n          completeMappings[columnName] = userMapping;\r\n          simplifiedMappings[columnName] = userMapping.mappedAttribute;\r\n        } else {\r\n          // It's already a string\r\n          completeMappings[columnName] = {\r\n            columnName: columnName,\r\n            uiLabel: columnName,\r\n            mappedAttribute: userMapping,\r\n            isMandatory: mandatoryAttributes.includes(columnName),\r\n            autoMapped: false,\r\n          };\r\n          simplifiedMappings[columnName] = userMapping;\r\n        }\r\n      } else {\r\n        // Column was not manually mapped - check if it already has a mapping\r\n        if (existingMappings[columnName]) {\r\n          // Use existing mapping\r\n          const existingMapping = existingMappings[columnName];\r\n\r\n          if (typeof existingMapping === \"object\" && existingMapping !== null) {\r\n            // It's an object with mappedAttribute\r\n            completeMappings[columnName] = existingMapping;\r\n            simplifiedMappings[columnName] = existingMapping.mappedAttribute;\r\n          } else {\r\n            // It's a string backend name\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: existingMapping,\r\n              isMandatory: mandatoryAttributes.includes(columnName),\r\n              autoMapped: true,\r\n            };\r\n            // simplifiedMappings already has this from the spread above\r\n          }\r\n        } else {\r\n          // No existing mapping - try to create one\r\n          const hasNLS = hasMatchingNLS(columnName);\r\n          const isSpecialColumn = specialMappings[columnName];\r\n          const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n          if (hasNLS || isSpecialColumn || isMandatory) {\r\n            const mappedAttribute = isSpecialColumn\r\n              ? specialMappings[columnName]\r\n              : getBackendNameForHeader(columnName);\r\n\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: mappedAttribute,\r\n              isMandatory: isMandatory,\r\n              autoMapped: true,\r\n            };\r\n\r\n            simplifiedMappings[columnName] = mappedAttribute;\r\n          } else {\r\n            // For unmapped columns without NLS match, don't include them in the mappings at all\r\n            // This will effectively exclude them from the payload\r\n            console.log(\r\n              `Skipping unmapped column without NLS match: ${columnName}`\r\n            );\r\n            // Don't add anything to simplifiedMappings or completeMappings\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create final mapping object with complete mappings\r\n    const finalMapping = {\r\n      columnMappings: completeMappings,\r\n      totalColumns: Object.keys(completeMappings).length,\r\n    };\r\n\r\n    console.log(\"Final Mapping Object:\", finalMapping);\r\n    console.log(\"Simplified Mappings for Backend:\", simplifiedMappings);\r\n    console.groupEnd();\r\n\r\n    // Call the callback with the mappings if provided\r\n    if (onColumnsMapped) {\r\n      onColumnsMapped(simplifiedMappings, finalMapping);\r\n    }\r\n\r\n    onHide();\r\n  };\r\n\r\n  console.log(\r\n    \"ColumnMappingModal - received dropdownOptions:\",\r\n    dropdownOptions\r\n  );\r\n  console.log(\"ColumnMappingModal - operation choice:\", operationChoice);\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: handleOkClick,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Reset\",\r\n          variant: \"secondary\",\r\n          onClick: () => setSelectedMappings({}),\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        selectedMappings={selectedMappings}\r\n        setSelectedMappings={setSelectedMappings}\r\n        dropdownOptions={dropdownOptions}\r\n        allNLSValues={allNLSValues} // Pass this to MappedList\r\n        operationChoice={operationChoice} // Pass operation choice\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = (initialOperationChoice) => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const [operationChoice, setOperationChoice] = useState(\r\n    initialOperationChoice\r\n  );\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async (operation = null) => {\r\n    try {\r\n      // Use the passed operation or fall back to state\r\n      const effectiveOperation = operation || operationChoice;\r\n      console.log(\"Fetching column mapping for operation:\", effectiveOperation);\r\n\r\n      if (!effectiveOperation) {\r\n        console.log(\"No operation specified, skipping fetch\");\r\n        return;\r\n      }\r\n\r\n      // Update state if a new operation is passed\r\n      if (operation && operation !== operationChoice) {\r\n        setOperationChoice(operation);\r\n      }\r\n\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      const systemAttributes = [\r\n        {\r\n          name: \"description\", // Change from backendName to name\r\n          nls: \"Description\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Part Number\", // Change from backendName to name\r\n          nls: \"EIN Number\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"type\", // Change from backendName to name\r\n          nls: \"Type\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"title\", // Change from backendName to name\r\n          nls: \"Title\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\", // Change from backendName to name\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Physical Product/Raw Material\",\r\n          nls: \"Physical Product/Raw Material\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name:\"dimensionType\",\r\n          nls: \"Dimension\",\r\n          groupNLS: \"System Attributes\",\r\n        }\r\n        \r\n      ];\r\n\r\n      const controlCenterAttributes = [\r\n        {\r\n          name: \"EMR_hasMBOM\", // Change from backendName to name\r\n          nls: \"Has MBOM\",\r\n          groupNLS: \"Object Attributes\",\r\n        },\r\n        {\r\n          name: \"EMR_Phase\", // Change from backendName to name\r\n          nls: \"Phase\",\r\n          groupNLS: \"Object Attributes\",\r\n        },\r\n      ];\r\n\r\n      // Define EBOM attributes for Product Structure operation\r\n      let ebomAttributes = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomAttributes = [\r\n          {\r\n            name: \"MBOMFindNumber__e7ead0d4e78a4d7f99e9e5fd900f8fdf\",\r\n            nls: \"Find Number\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"MBOMComponentLocation__00cc2e44830642d69dd3728d8c279a75\",\r\n            nls: \"Component Location\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"Level\",\r\n            nls: \"Level\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"name\",\r\n            nls: \"Reference Designator\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"quantity\",\r\n            nls: \"Quantity\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          // {\r\n          //   name: \"PartType\",\r\n          //   nls: \"PartType\",\r\n          //   group: \"EBOM Attributes\",\r\n          //   groupNLS: \"EBOM Attributes\",\r\n          // },\r\n        ];\r\n      }\r\n\r\n      // Define BOS attributes for Physical Product-Document operation (operation 4)\r\n      let bosAttributes = [];\r\n      if (effectiveOperation === \"4\") {\r\n        bosAttributes = [\r\n          {\r\n            name: \"Print On Purchase Order Required\",\r\n            nls: \"Print On Purchase Order Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Print On Work Order Required\",\r\n            nls: \"Print On Work Order Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Work Order Document Required\",\r\n            nls: \"Work Order Document Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Print On report Order Required\",\r\n            nls: \"Print On report Order Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Part Type\",\r\n            nls: \"Part Type\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n\r\n          {\r\n            name: \"Part Revision\",\r\n            nls: \"Part Revision\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Document Type\",\r\n            nls: \"Document Type\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Document Name\",\r\n            nls: \"Document Name\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Document Revision\",\r\n            nls: \"Document Revision\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Relationship Type\",\r\n            nls: \"Relationship Type\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n        ];\r\n      }\r\n\r\n      const attributeGroups = groupData.map((item) => item.groupNLS);\r\n      console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      // Add EBOM Attributes group for operation 2\r\n      if (\r\n        effectiveOperation === \"2\" &&\r\n        !attributeGroups.includes(\"EBOM Attributes\")\r\n      ) {\r\n        attributeGroups.push(\"EBOM Attributes\");\r\n      }\r\n\r\n      // Add BOS Attributes group for operation 4\r\n      if (\r\n        effectiveOperation === \"4\" &&\r\n        !attributeGroups.includes(\"BOS Attributes\")\r\n      ) {\r\n        attributeGroups.push(\"BOS Attributes\");\r\n      }\r\n\r\n      // Get NLS values from API response\r\n      const apiNlsValues = groupData.map((item) => item.nls);\r\n      console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n      // Get NLS values from hardcoded system attributes\r\n      const systemNlsValues = systemAttributes.map((item) => item.nls);\r\n      console.log(\"System NLS Values:\", systemNlsValues);\r\n\r\n      // Get NLS values from EBOM attributes when operation is 2\r\n      let ebomNlsValues = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomNlsValues = ebomAttributes.map((item) => item.nls);\r\n        console.log(\"EBOM NLS Values:\", ebomNlsValues);\r\n      }\r\n      // / Get NLS values from BOS attributes when operation is 4\r\n      let bosNlsValues = [];\r\n      if (effectiveOperation === \"4\") {\r\n        bosNlsValues = bosAttributes.map((item) => item.nls);\r\n        console.log(\"BOS NLS Values:\", bosNlsValues);\r\n      }\r\n\r\n      // Combine all NLS values including EBOM attributes if operation is 2\r\n      const allNLSValues = [\r\n        ...new Set([\r\n          ...apiNlsValues,\r\n          ...systemNlsValues,\r\n          ...ebomNlsValues,\r\n          ...bosNlsValues,\r\n        ]),\r\n      ];\r\n      console.log(\"all nls value with Hardcode :\", allNLSValues);\r\n\r\n      // First filter out System Attributes from API response\r\n      const filteredGroupData = groupData.filter(\r\n        (attr) => attr.groupNLS !== \"System Attributes\"\r\n      );\r\n\r\n      console.log(\r\n        \"Filtered out API system attributes:\",\r\n        groupData.length - filteredGroupData.length,\r\n        \"items removed\"\r\n      );\r\n\r\n      // Then merge non-system API attributes with hardcoded ones and EBOM attributes\r\n      let mergeAttributes = [...filteredGroupData, ...systemAttributes,...controlCenterAttributes];\r\n      if (effectiveOperation === \"2\") {\r\n        mergeAttributes = [...mergeAttributes, ...ebomAttributes];\r\n        console.log(\r\n          \"Added EBOM attributes to merged attributes for operation 2\",\r\n          mergeAttributes\r\n        );\r\n      }\r\n      if (effectiveOperation === \"4\") {\r\n        mergeAttributes = [...mergeAttributes, ...bosAttributes];\r\n        console.log(\r\n          \"Added BOS attributes to merged attributes for operation 4\",\r\n          mergeAttributes\r\n        );\r\n      }\r\n\r\n      console.log(\"Final merged attributes including Control Center:\", mergeAttributes);\r\n\r\n      // Then continue with your other filtering if needed\r\n      const relevantAttributes =\r\n        mergeAttributes.filter(\r\n          (attr) =>\r\n            attr.deploymentExtension === true ||\r\n            (attr.groupNLS && attr.groupNLS.trim() !== \"\") ||\r\n            (effectiveOperation === \"2\" && attr.group === \"EBOM Attributes\")\r\n        ) || [];\r\n\r\n      console.log(\"Non-system attributes from API:\", relevantAttributes.length);\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name || attr.backendName, // Backend Name (or name)\r\n        group: attr.groupNLS || attr.group || \"General\", // Default group if not specified\r\n      }));\r\n\r\n      // Create a filtered version for dropdown that excludes System Attributes\r\n      const dropdownOptions = mappedData.filter(\r\n        (attr) => attr.group !== \"System Attributes\"\r\n      );\r\n      console.log(\"Mapped Attributes (total):\", mappedData);\r\n      console.log(\r\n        \"Dropdown Options (excluding System Attributes):\",\r\n        dropdownOptions\r\n      );\r\n\r\n      // Organize attributes by their groups\r\n      const attributesByGroup = {};\r\n\r\n      attributeGroups.forEach((group) => {\r\n        attributesByGroup[group] = mappedData.filter(\r\n          (attr) => attr.group === group\r\n        );\r\n      });\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\r\n        \"Mapped Attributes (for dropdown) excluding System Attributes:\",\r\n        dropdownOptions\r\n      );\r\n      console.log(\"Attributes By Group:\", attributesByGroup);\r\n      console.log(\r\n        \"System Attributes found:\",\r\n        relevantAttributes.filter(\r\n          (attr) => attr.groupNLS === \"System Attributes\"\r\n        ).length\r\n      );\r\n      console.log(\r\n        \"Sample System Attribute:\",\r\n        relevantAttributes.find((attr) => attr.groupNLS === \"System Attributes\")\r\n      );\r\n\r\n      // For operation 2, log EBOM attributes as well\r\n      if (effectiveOperation === \"2\") {\r\n        console.log(\r\n          \"EBOM Attributes found:\",\r\n          relevantAttributes.filter(\r\n            (attr) =>\r\n              attr.groupNLS === \"EBOM Attributes\" ||\r\n              attr.group === \"EBOM Attributes\"\r\n          ).length\r\n        );\r\n        console.log(\r\n          \"Sample EBOM Attribute:\",\r\n          relevantAttributes.find(\r\n            (attr) =>\r\n              attr.groupNLS === \"EBOM Attributes\" ||\r\n              attr.group === \"EBOM Attributes\"\r\n          )\r\n        );\r\n      }\r\n\r\n      setMappedAttributes({\r\n        allNLSValues: allNLSValues,\r\n        dropdownOptions: dropdownOptions, // Use filtered list without System Attributes\r\n        mappedData: mappedData, // Keep full list for other purposes\r\n        attributesByGroup: attributesByGroup,\r\n        groups: attributeGroups,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationChoice) {\r\n      fetchColumnMapping();\r\n    }\r\n  }, [operationChoice]);\r\n\r\n  return { mappedAttributes, refreshMapping: fetchColumnMapping };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useFetchDocumentData = (initialOperationType) => {\r\n  const { showErrorToast } = useToast();\r\n  const [documentData, setDocumentData] = useState(null);\r\n  const [mappedAttributes, setMappedAttributes] = useState({\r\n    allNLSValues: [],\r\n    dropdownOptions: [],\r\n    mappedData: [],\r\n  });\r\n  const [operationType, setOperationType] = useState(initialOperationType);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  const API_URL = `${ENOVIA_BASE_URL}/resources/v1/collabServices/authoring/createContent/typeInfo?tenant=OI000186152&xrequestedwith=xmlhttprequest`;\r\n\r\n  const fetchDocumentData = async (operation = null) => {\r\n    // Use passed operation or fall back to state\r\n    const effectiveOperation = operation || operationType;\r\n\r\n    if (effectiveOperation !== \"3\") {\r\n      console.log(\"Not document operation type, skipping fetch\");\r\n      return;\r\n    }\r\n\r\n    // Update state if new operation passed\r\n    if (operation && operation !== operationType) {\r\n      setOperationType(operation);\r\n    }\r\n\r\n    try {\r\n      console.log(\r\n        \"Fetching document data for operation type:\",\r\n        effectiveOperation\r\n      );\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        console.error(\"Failed to fetch CSRF headers.\");\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      const body = {\r\n        type: \"Document\",\r\n        preferedType: \"Document\",\r\n        typeName: \"Document\",\r\n        subTypes: true,\r\n        runUXBL: true,\r\n        metrics: {\r\n          UXName: \"New\",\r\n          client_app_domain: \"3DEXPERIENCE 3DDashboard\",\r\n          client_app_name: \"ENXWDOC_AP\",\r\n        },\r\n      };\r\n\r\n      // Fetch data from API\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        API_URL,\r\n        body,\r\n        headers\r\n      );\r\n      console.log(\"API Response for Document template:\", response);\r\n\r\n      // Validate response structure\r\n      if (response.status !== true) {\r\n        console.error(\"Invalid API response structure:\", response);\r\n        showErrorToast(\r\n          \"Failed to fetch document data. Invalid response structure.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Extract relevant data\r\n      const documentInfo = response.output.result[0];\r\n      console.log(\r\n        \"Full documentInfo structure:\",\r\n        JSON.stringify(documentInfo, null, 2)\r\n      );\r\n\r\n      // Check different possible paths for extensionAttributes\r\n      const extensionAttributes =\r\n        documentInfo?.extensionAttributes ||\r\n        documentInfo?.attributes?.extensionAttributes ||\r\n        [];\r\n\r\n      console.log(\"Found extensionAttributes:\", extensionAttributes);\r\n\r\n      // Your hardcoded document attributes\r\n      const DocumentsAttributes = [\r\n        {\r\n          name: \"description\",\r\n          nls: \"Description\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"name\",\r\n          nls: \"Document Name\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"type\",\r\n          nls: \"Document Type\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"title\",\r\n          nls: \"Title\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\",\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name:\"File\",\r\n          nls: \"File\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        }\r\n\r\n      ];\r\n\r\n      // Extract dropdown options only if extensionAttributes exists\r\n      if (extensionAttributes && extensionAttributes.length > 0) {\r\n        // Extract all NLS values from API\r\n        const apiNlsValues = extensionAttributes.map((attr) => attr.nls);\r\n        console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n        // Extract NLS values from hardcoded attributes\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n        // console.log(\"Hardcoded NLS Values:\", hardcodedNlsValues);\r\n\r\n        // Combine both NLS value sets (using Set to remove duplicates)\r\n        const allNLSValues = [\r\n          ...new Set([...apiNlsValues, ...hardcodedNlsValues]),\r\n        ];\r\n        console.log(\r\n          \"Document Operation - All Combined NLS Values:\",\r\n          allNLSValues\r\n        );\r\n\r\n        // Process API attributes (with name splitting)\r\n        const apiOptions = extensionAttributes.map((attr) => {\r\n          // Extract the attribute name after the dot\r\n          const fullName = attr.name;\r\n          const nameParts = fullName.split(\".\");\r\n          const extractedName = nameParts.length > 1 ? nameParts[1] : fullName;\r\n\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: extractedName,\r\n            fullName: attr.name,\r\n            group: \"API Attributes\",\r\n          };\r\n        });\r\n\r\n        // Process hardcoded attributes\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        // Combine both for mappedData\r\n        const combinedMappedData = [...apiOptions, ...hardcodedOptions];\r\n\r\n        // console.log(\"Document Operation - API Dropdown Options:\", apiOptions);\r\n        console.log(\r\n          \"Document Operation - Combined Mapped Data:\",\r\n          combinedMappedData\r\n        );\r\n\r\n        // Update state with specific configurations for each property\r\n        setMappedAttributes({\r\n          allNLSValues: allNLSValues, // Combined NLS values for matching\r\n          dropdownOptions: apiOptions, // Only API options for dropdown\r\n          mappedData: combinedMappedData, // Both API and hardcoded for payload\r\n        });\r\n      } else {\r\n        // If no API attributes, use hardcoded ones for everything\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n\r\n        // Create hardcoded options for mappedData when no API data exists\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        setMappedAttributes({\r\n          allNLSValues: hardcodedNlsValues, // Use hardcoded NLS for matching\r\n          dropdownOptions: [], // Empty dropdown options as requested\r\n          mappedData: hardcodedOptions, // Use hardcoded options for payload\r\n        });\r\n      }\r\n\r\n      // Set the document data in state\r\n      setDocumentData(documentInfo);\r\n    } catch (error) {\r\n      console.error(\"Error fetching document data:\", error);\r\n      showErrorToast(error.message || \"Error fetching document data.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationType === \"3\") {\r\n      fetchDocumentData();\r\n    }\r\n  }, [operationType]);\r\n\r\n  // Return structure matching useMassUpload\r\n  return {\r\n    mappedAttributes,\r\n    refreshMapping: fetchDocumentData,\r\n  };\r\n};\r\n\r\nexport default useFetchDocumentData;\r\n","import React from \"react\";\r\nimport \"./Pagination.css\";\r\n\r\nconst Pagination = ({\r\n  currentPage,\r\n  totalItems,\r\n  itemsPerPage,\r\n  onPageChange,\r\n}) => {\r\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n\r\n  if (totalPages <= 1) return null;\r\n\r\n  const start = (currentPage - 1) * itemsPerPage + 1;\r\n  const end = Math.min(currentPage * itemsPerPage, totalItems);\r\n\r\n  return (\r\n    <div className=\"pagination-footer\">\r\n      <div className=\"pagination-info\">\r\n        Showing {start}–{end} of {totalItems}\r\n      </div>\r\n      <div className=\"pagination-controls\">\r\n        <button\r\n          disabled={currentPage === 1}\r\n          onClick={() => onPageChange(currentPage - 1)}\r\n        >\r\n          Prev\r\n        </button>\r\n        {Array.from({ length: totalPages }, (_, i) => (\r\n          <button\r\n            key={i}\r\n            className={currentPage === i + 1 ? \"active\" : \"\"}\r\n            onClick={() => onPageChange(i + 1)}\r\n          >\r\n            {i + 1}\r\n          </button>\r\n        ))}\r\n        <button\r\n          disabled={currentPage === totalPages}\r\n          onClick={() => onPageChange(currentPage + 1)}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useMemo, useState, useEffect } from \"react\";\r\nimport CustomModal from \"../Modal/customModal\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"react-virtualized/styles.css\";\r\nimport \"./SuccessModal.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport Pagination from \"../Pagination/Pagination\";\r\nimport { ResizableBox } from \"react-resizable\";\r\nimport \"react-resizable/css/styles.css\";\r\n\r\nconst SuccessModal = ({\r\n  show = false,\r\n  onHide = () => {},\r\n  responseData = [],\r\n}) => {\r\n  const itemsPerPage = 15;\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [columnWidths, setColumnWidths] = useState({});\r\n  const [copiedCell, setCopiedCell] = useState(null); // Change to: {rowIndex: null, colIndex: null}\r\n\r\n  // Memoized CellMeasurer cache\r\n  const cache = useMemo(() => {\r\n    return new CellMeasurerCache({\r\n      fixedWidth: true,\r\n      defaultHeight: 50,\r\n    });\r\n  }, []);\r\n\r\n  // Preprocess response data to flatten nested arrays\r\n  const flattenedData = useMemo(() => {\r\n    // Function to flatten nested arrays\r\n    const flatten = (data) => {\r\n      if (!data || !Array.isArray(data)) return [];\r\n\r\n      // First, check if we have an array of arrays\r\n      const isNestedArray = data.some((item) => Array.isArray(item));\r\n\r\n      if (isNestedArray) {\r\n        // Flatten one level of arrays\r\n        return data.flatMap((item) => (Array.isArray(item) ? item : [item]));\r\n      }\r\n\r\n      return data;\r\n    };\r\n\r\n    return flatten(responseData);\r\n  }, [responseData]);\r\n\r\n  // Dynamically generate columns based on the flattened response data\r\n  const columns = useMemo(() => {\r\n    if (!flattenedData || flattenedData.length === 0) return [];\r\n\r\n    // Collect all unique keys from ALL items in the flattened data\r\n    const allKeys = new Set();\r\n    flattenedData.forEach((item) => {\r\n      if (typeof item === \"object\" && item !== null) {\r\n        Object.keys(item).forEach((key) => allKeys.add(key));\r\n      }\r\n    });\r\n\r\n    // Helper function to format header text\r\n\r\n    const formatHeaderText = (key) => {\r\n      // Replace underscores and hyphens with spaces\r\n      const spacedText = key.replace(/[_-]/g, \" \");\r\n\r\n      // Convert to title case (capitalize first letter of each word)\r\n      return spacedText\r\n        .split(\" \")\r\n        .map((word) =>\r\n          word === word.toUpperCase()\r\n            ? word // preserve acronyms like EIN, ID\r\n            : word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\r\n        )\r\n        .join(\" \");\r\n    };\r\n\r\n    // Convert keys to column definitions\r\n    return Array.from(allKeys).map((key) => {\r\n      let width = columnWidths[key] || 120;\r\n\r\n      // Set different widths based on the column content type\r\n      if (key.toLowerCase().includes(\"message\")) {\r\n        width = columnWidths[key] || 200; // Message columns are wider\r\n      } else if (key.toLowerCase().includes(\"status\")) {\r\n        width = columnWidths[key] || 100;\r\n      }\r\n\r\n      return {\r\n        key: key,\r\n        header: formatHeaderText(key), // Use the formatted header text\r\n        width: width,\r\n        tooltip: formatHeaderText(key), // Update tooltip too\r\n      };\r\n    });\r\n  }, [flattenedData, columnWidths]);\r\n\r\n  const handleResize = (key, newWidth) => {\r\n    setColumnWidths((prev) => ({ ...prev, [key]: newWidth }));\r\n  };\r\n\r\n  // Paginate response data\r\n  const paginatedData = useMemo(() => {\r\n    const start = (currentPage - 1) * itemsPerPage;\r\n    return flattenedData.slice(start, start + itemsPerPage);\r\n  }, [currentPage, flattenedData]);\r\n\r\n  const handleExport = () => {\r\n    handleExportExcel(flattenedData, \"upload-results.xlsx\");\r\n  };\r\n\r\n  console.log(\"SuccessModal received response data:\", responseData);\r\n  console.log(\"Generated columns:\", columns);\r\n\r\n  useEffect(() => {\r\n    cache.clearAll();\r\n  }, [paginatedData, cache]);\r\n\r\n  const handlePageChange = (newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  // Safe getter function to handle case sensitivity and missing properties\r\n  const getItemValue = (item, key) => {\r\n    if (!item || typeof item !== \"object\") return \"-\";\r\n\r\n    // Direct match\r\n    if (item[key] !== undefined) return item[key];\r\n\r\n    // Case-insensitive match\r\n    const lowerKey = key.toLowerCase();\r\n    for (const k of Object.keys(item)) {\r\n      if (k.toLowerCase() === lowerKey) {\r\n        return item[k];\r\n      }\r\n    }\r\n\r\n    return \"-\";\r\n  };\r\n\r\n  // Function to copy a single cell value\r\n  const handleCopyCellValue = (value, rowIndex, colIndex, buttonElement) => {\r\n    if (!value || value === \"-\") return;\r\n\r\n    // Convert objects or arrays to JSON string before copying\r\n    const textToCopy =\r\n      typeof value === \"object\" ? JSON.stringify(value) : String(value);\r\n\r\n    navigator.clipboard\r\n      .writeText(textToCopy)\r\n      .then(() => {\r\n        // Add the copied class to the button itself\r\n        if (buttonElement) {\r\n          buttonElement.classList.add(\"copied\");\r\n\r\n          // Remove the class after 1.5 seconds\r\n          setTimeout(() => {\r\n            buttonElement.classList.remove(\"copied\");\r\n          }, 1000);\r\n        }\r\n\r\n        // We can keep this for tracking which cell was copied if needed\r\n        setCopiedCell({ rowIndex, colIndex });\r\n        setTimeout(() => setCopiedCell(null), 1500);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Failed to copy cell value:\", err);\r\n      });\r\n  };\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const item = paginatedData[index];\r\n    if (!item) return null;\r\n\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"virtualized-row\">\r\n          {columns.map((column, colIndex) => {\r\n            const value = getItemValue(item, column.key);\r\n\r\n            // Convert any object/array values to string for display\r\n            const displayValue =\r\n              typeof value === \"object\" && value !== null\r\n                ? JSON.stringify(value)\r\n                : String(value);\r\n\r\n            // Check if this specific cell position is copied\r\n            const isCopied =\r\n              copiedCell &&\r\n              copiedCell.rowIndex === index &&\r\n              copiedCell.colIndex === colIndex;\r\n\r\n            // Special handling for status field\r\n            if (column.key.toLowerCase().includes(\"status\")) {\r\n              const statusValue = String(value).toLowerCase();\r\n              const statusClass = statusValue.includes(\"success\")\r\n                ? \"success\"\r\n                : statusValue.includes(\"fail\") || statusValue.includes(\"error\")\r\n                ? \"failed\"\r\n                : \"\";\r\n\r\n              return (\r\n                <div\r\n                  key={colIndex}\r\n                  className={`virtualized-cell status-cell ${statusClass} ${\r\n                    isCopied ? \"copied\" : \"\"\r\n                  }`}\r\n                  style={{ width: column.width, position: \"relative\" }}\r\n                  title={displayValue}\r\n                >\r\n                  {displayValue}\r\n                  <button\r\n                    className=\"cell-copy-button\"\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      // Pass the button element reference to the handler\r\n                      handleCopyCellValue(\r\n                        value,\r\n                        index,\r\n                        colIndex,\r\n                        e.currentTarget\r\n                      );\r\n                    }}\r\n                    aria-label=\"Copy cell value\"\r\n                    title=\"Copy to clipboard\"\r\n                  >\r\n                    {/* Copy icon (visible by default) */}\r\n                    <svg\r\n                      className=\"copy-icon\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"14\"\r\n                      height=\"14\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <rect\r\n                        x=\"9\"\r\n                        y=\"9\"\r\n                        width=\"13\"\r\n                        height=\"13\"\r\n                        rx=\"2\"\r\n                        ry=\"2\"\r\n                      ></rect>\r\n                      <path d=\"M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1\"></path>\r\n                    </svg>\r\n\r\n                    {/* Checkmark icon (initially hidden) */}\r\n                    <svg\r\n                      className=\"copied-icon\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"14\"\r\n                      height=\"14\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M20 6L9 17l-5-5\"></path>\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            // Default handling for other fields\r\n            return (\r\n              <div\r\n                key={colIndex}\r\n                className={`virtualized-cell ${isCopied ? \"copied\" : \"\"}`}\r\n                style={{ width: column.width, position: \"relative\" }}\r\n                title={displayValue}\r\n              >\r\n                {displayValue}\r\n                <button\r\n                  className=\"cell-copy-button\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleCopyCellValue(value, index, colIndex);\r\n                  }}\r\n                  aria-label=\"Copy cell value\"\r\n                  title=\"Copy to clipboard\"\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"14\"\r\n                    height=\"14\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    strokeWidth=\"2\"\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                  >\r\n                    <rect\r\n                      x=\"9\"\r\n                      y=\"9\"\r\n                      width=\"13\"\r\n                      height=\"13\"\r\n                      rx=\"2\"\r\n                      ry=\"2\"\r\n                    ></rect>\r\n                    <path d=\"M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1\"></path>\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Upload Results\"\r\n      size=\"lg\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <div className=\"success-modal-content\">\r\n        <div className=\"top-bar\">\r\n          <div></div>\r\n          <CustomButton\r\n            variant=\"success\"\r\n            size=\"lg\"\r\n            onClick={handleExport}\r\n            className=\"m-2 border-bottom-10px\"\r\n            text=\"Export to Excel \"\r\n          />\r\n        </div>\r\n\r\n        <ReusableAlert\r\n          variant=\"success\"\r\n          message={\r\n            <p className=\"success-message-text\">\r\n              ✅ <strong>Success:</strong> {flattenedData.length} item\r\n              {flattenedData.length > 1 ? \"s\" : \"\"} processed.\r\n            </p>\r\n          }\r\n          className=\"mb-3\"\r\n        />\r\n\r\n        {columns.length > 0 ? (\r\n          <>\r\n            <div className=\"virtualized-table-container\">\r\n              <div className=\"virtualized-header\" style={{ display: \"flex\" }}>\r\n                {columns.map((column, idx) => (\r\n                  <ResizableBox\r\n                    key={column.key}\r\n                    width={column.width}\r\n                    height={30}\r\n                    axis=\"x\"\r\n                    resizeHandles={[\"e\"]}\r\n                    handle={\r\n                      <span\r\n                        className=\"custom-resizer\"\r\n                        style={{\r\n                          cursor: \"col-resize\",\r\n                          width: 8,\r\n                          height: \"100%\",\r\n                          display: \"inline-block\",\r\n                          position: \"absolute\",\r\n                          right: 0,\r\n                          top: 0,\r\n                        }}\r\n                      />\r\n                    }\r\n                    onResizeStop={(e, data) =>\r\n                      handleResize(column.key, data.size.width)\r\n                    }\r\n                    minConstraints={[90, 30]}\r\n                    maxConstraints={[200, 30]}\r\n                  >\r\n                    <div\r\n                      className=\"virtualized-header-cell\"\r\n                      style={{\r\n                        width: column.width,\r\n                        minWidth: 90,\r\n                        maxWidth: 200,\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        position: \"relative\",\r\n                        userSelect: \"none\",\r\n                        paddingRight: 8,\r\n                        boxSizing: \"border-box\",\r\n                      }}\r\n                      title={column.header}\r\n                    >\r\n                      {column.header}\r\n                    </div>\r\n                  </ResizableBox>\r\n                ))}\r\n              </div>\r\n\r\n              <div className=\"virtualized-body\">\r\n                <AutoSizer>\r\n                  {({ height, width }) => (\r\n                    <List\r\n                      width={width}\r\n                      height={height - 10}\r\n                      rowCount={paginatedData.length}\r\n                      rowHeight={cache.rowHeight}\r\n                      deferredMeasurementCache={cache}\r\n                      rowRenderer={rowRenderer}\r\n                      overscanRowCount={5}\r\n                    />\r\n                  )}\r\n                </AutoSizer>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Pagination Controls */}\r\n            <Pagination\r\n              currentPage={currentPage}\r\n              totalItems={flattenedData.length}\r\n              itemsPerPage={itemsPerPage}\r\n              onPageChange={handlePageChange}\r\n            />\r\n          </>\r\n        ) : (\r\n          <div className=\"no-data-message\">No response data available.</div>\r\n        )}\r\n      </div>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default SuccessModal;\r\n","import { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport useToast from \"../useToast\";\r\nimport { useState } from \"react\";\r\n\r\nasync function chunkArray(array, size) {\r\n    const chunks = [];\r\n    for (let i = 0; i < array.length; i += size) {\r\n      chunks.push(array.slice(i, i + size));\r\n    }\r\n    return chunks;\r\n  }\r\nconst useMEPMassUpload = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  const ENOVIA_SOURCE_BASE_URL = process.env.REACT_APP_ENOVIA_SOURCING_BASE_URL;\r\n\r\n  console.log(\"ENOVIA_SOURCE_BASE_URL\", ENOVIA_SOURCE_BASE_URL);\r\n  \r\n  const handleMEPMassupload = async (sheetData) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"useMEPMassUpload Headers\", headers);\r\n      console.log(\"useMEPMassUpload in SheetData\", sheetData);\r\n      console.log(\"ENOVIA_BASE_URL\", ENOVIA_BASE_URL);\r\n\r\n      if (!sheetData || sheetData.length === 0) {\r\n        showErrorToast(\"No data to upload. Please check your sheet.\");\r\n        return;\r\n      }\r\n\r\n      const chunkSize = 1000;\r\n      const chunks =\r\n        sheetData?.length > chunkSize\r\n          ? chunkArray(sheetData, chunkSize)\r\n          : [sheetData];\r\n        \r\n\r\n      console.log(\"Chunks:\", chunks);\r\n      // let searchedItems = [];\r\n      let createMEPItems = [];\r\n      for (let i = 0; i < chunks.length; i++) {\r\n        const chunk = chunks[i];\r\n         console.log(`Processing chunk ${i + 1}/${chunks.length}`);\r\n        console.log(\"Chunk Data:\", chunk);\r\n        for (const row of chunk) {\r\n          try {\r\n            const searchStr= row?.Title\r\n            const response = await callEnoviaWebService(\r\n              \"GET\",\r\n              `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?$searchStr=${encodeURIComponent(searchStr)}`,\r\n              \"\",\r\n              headers\r\n            );\r\n            if (response?.status === true && response?.output?.member?.length) {\r\n              const match = response.output.member.find(\r\n                (item) => item?.title === row?.Title\r\n              );\r\n              if (match) {\r\n                console.log(\"==================\", match);\r\n                if(match?.state !== 'RELEASED' || match?.state !== 'FROZEN') {\r\n                  let checkMepResponse = await ValidateMep(\r\n                    ENOVIA_BASE_URL,\r\n                    match?.title,\r\n                    headers\r\n                  );\r\n                  console.log(\"New APi Check Validation\", checkMepResponse);\r\n                  if (\r\n                    checkMepResponse.status &&\r\n                    checkMepResponse?.output?.member?.length > 0\r\n                  ) {\r\n                    let memberData = checkMepResponse?.output?.member[0];\r\n                    console.log(\"memberData =======\", memberData);\r\n                    if (memberData?.manufacturer) {\r\n                      // Update MEI Start\r\n                      const uploadBody = {\r\n                        partSource: row[\"Part Source\"] || \"\",\r\n                        partSourceURL: row[\"Part Source URL\"] || \"\",\r\n                        manufacturerPartNumber: String(\r\n                          row[\"Manufacturer Part Number\"] || \"\"\r\n                        ),\r\n                        cestamp: memberData?.cestamp,\r\n                      };\r\n                      console.log(\"Upload Body:\", uploadBody);\r\n                      try {\r\n                        console.log(\"match details in update api loop =======\", match);\r\n                        const response = await callEnoviaWebService(\r\n                          \"PATCH\",\r\n                          `${ENOVIA_BASE_URL}/resources/v1/modeler/dssrc/dssrc:ManufacturerEquivalentItems/${match?.id}`,\r\n                          uploadBody,\r\n                          headers\r\n                        );\r\n                        if (response.status) {\r\n                          console.log(\"Update Item Response:\", response);\r\n                        } else {\r\n                          showErrorToast(response?.message || \"\");\r\n                        }\r\n                      } catch (error) {\r\n                        console.error(\r\n                          `Error creating item for row with Title ${row?.Title}:`,\r\n                          error\r\n                        );\r\n                        showErrorToast(\r\n                          `Error creating item for row with Title ${row?.Title}`\r\n                        );\r\n                      }                     \r\n                    }else{\r\n                       showErrorToast(\"It's not a Manufacturing Equalent Item\");\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            } else if (response?.output?.member?.length === 0) {\r\n              console.log(\"No match found for row\", row);\r\n              // createMEPItems.push(row);\r\n              const createBody = {\r\n                items: [\r\n                  {\r\n                    type: \"VPMReference\",\r\n                    attributes: {\r\n                      title: row?.Title || \"\",\r\n                      isManufacturable: true,\r\n                      description: row?.Description || \"\",\r\n                    },\r\n                  },\r\n                ],\r\n              };\r\n              try {\r\n                const response = await callEnoviaWebService(\r\n                  \"POST\",\r\n                  `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem`,\r\n                  createBody,\r\n                  headers\r\n                );\r\n                console.log(\"Create Item Response:\", response);\r\n                if (response.status && response.output?.member?.length) {\r\n                  const extensionBody = [\r\n                    {\r\n                      engItem: {\r\n                        source:\r\n                          \"https://oi000186152-us1-compass.3dexperience.3ds.com:443/enovia\",\r\n                        type: \"VPMReference\",\r\n                        identifier: response.output?.member[0]?.id,\r\n                        relativePath:\r\n                          \"/resource/v1/dseng/dseng:EngItem/\" +\r\n                          response.output?.member[0]?.id,\r\n                      },\r\n                      manufacturerCompany: {\r\n                        identifier: \"uuid:f635eda1-d663-4d18-a269-de034998a6e1\",\r\n                        relativePath:\r\n                          \"/3drdfpersist/resources/v1/modeler/dsvnp/dsvnp:SupplierCompany/uuid:f635eda1-d663-4d18-a269-de034998a6e1\",\r\n                        source:\r\n                          \"https://oi000186152-us1-3dnetwork.3dexperience.3ds.com:443\",\r\n                        type: \"SupplierCompany\",\r\n                      },\r\n                      manufacturerPartNumber: String(\r\n                        row[\"Manufacturer Part Number\"]\r\n                      ) || \"\",\r\n                      partSourceURL: row[\"Part Source URL\"] || \"\",\r\n                      partSource: row[\"Part Source\"] || \"\",\r\n                    },\r\n                  ];\r\n                  const extensionresponse = await callEnoviaWebService(\r\n                    \"POST\",\r\n                    `${ENOVIA_BASE_URL}/resources/v1/modeler/dssrc/dssrc:ManufacturerEquivalentItems`,\r\n                    extensionBody,\r\n                    headers\r\n                  );\r\n                  console.log(\"Extension Item Response:\", extensionresponse);\r\n                  if (\r\n                    !(\r\n                      extensionresponse.status &&\r\n                      extensionresponse.output?.member?.length\r\n                    )\r\n                  ) {\r\n                    console.error(\r\n                      `Failed to create ManufacturerEquivalentItems for row ${i} with Title ${row?.Title}.`\r\n                    );\r\n                    showErrorToast(\r\n                      extensionresponse?.message ||\r\n                        \"Failed to create ManufacturerEquivalentItems.\"\r\n                    );\r\n                  }\r\n                }\r\n              } catch (error) {\r\n                console.error(\r\n                  `Error creating item for row ${i} with Title ${row?.Title}:`,\r\n                  error\r\n                );\r\n                showErrorToast(\r\n                  `An error occurred while creating item for row ${i} with Title ${row?.Title}.`\r\n                );\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error(\r\n              `Error processing row ${i} with Title ${row?.Title}:`,\r\n              error\r\n            );\r\n          }\r\n        }\r\n      }\r\n      // console.log(\"All matched items:\", searchedItems);\r\n      console.log(`Not Matched Items:`, createMEPItems);\r\n      // setCreateItems(createMEPItems);\r\n      // setUpdateItems(searchedItems);\r\n    } catch (error) {\r\n      console.error(\"MEP MASS UPLOAD Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching MEP Mass Upload data.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // const updateMassupload = async (createItems, updateItems, reset) => {\r\n  //   try {\r\n  //     setLoading(true);\r\n  //     const headers = await fetchCsrfToken();\r\n  //     if (!headers) {\r\n  //       showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n  //       return;\r\n  //     }\r\n\r\n  //     const { SecurityContext, ENO_CSRF_TOKEN } = headers;\r\n  //     const newHeaders = {\r\n  //       SecurityContext: \"VPLMProjectLeader.Company Name.Micro Motion\",\r\n  //       ENO_CSRF_TOKEN: ENO_CSRF_TOKEN,\r\n  //     };\r\n  //     let createFailed = false;\r\n  //     let updateFailed = false;\r\n  //     if (!updateItems || updateItems.length === 0) {\r\n  //       showErrorToast(\"No data to Update.\");\r\n  //       // return;\r\n  //     }\r\n  //     if (!createItems || createItems.length === 0) {\r\n  //       showErrorToast(\"No data to Create.\");\r\n  //       // return;\r\n  //     }\r\n  //     // ============ For Create MEP Mass Upload Update =================\r\n      // if (createItems?.length > 0) {\r\n      //   for (let i = 0; i < createItems.length; i++) {\r\n      //     const row = createItems[i];\r\n      //     const createBody = {\r\n      //       items: [\r\n      //         {\r\n      //           type: \"VPMReference\",\r\n      //           attributes: {\r\n      //             title: row?.Title,\r\n      //             isManufacturable: true,\r\n      //             description: row?.Description,\r\n      //           },\r\n      //         },\r\n      //       ],\r\n      //     };\r\n      //     try {\r\n      //       const response = await callEnoviaWebService(\r\n      //         \"POST\",\r\n      //         `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem`,\r\n      //         createBody,\r\n      //         newHeaders\r\n      //       );\r\n      //       console.log(\"Create Item Response:\", response);\r\n      //       if (response.status && response.output?.member?.length) {\r\n      //         const extensionBody = [\r\n      //           {\r\n      //             engItem: {\r\n      //               source:\r\n      //                 \"https://oi000186152-us1-compass.3dexperience.3ds.com:443/enovia\",\r\n      //               type: \"VPMReference\",\r\n      //               identifier: response.output?.member[0]?.id,\r\n      //               relativePath:\r\n      //                 \"/resource/v1/dseng/dseng:EngItem/\" +\r\n      //                 response.output?.member[0]?.id,\r\n      //             },\r\n      //             manufacturerCompany: {\r\n      //               identifier: \"uuid:f635eda1-d663-4d18-a269-de034998a6e1\",\r\n      //               relativePath:\r\n      //                 \"/3drdfpersist/resources/v1/modeler/dsvnp/dsvnp:SupplierCompany/uuid:f635eda1-d663-4d18-a269-de034998a6e1\",\r\n      //               source:\r\n      //                 \"https://oi000186152-us1-3dnetwork.3dexperience.3ds.com:443\",\r\n      //               type: \"SupplierCompany\",\r\n      //             },\r\n      //             manufacturerPartNumber: String(\r\n      //               row[\"Manufacturer Part Number\"]\r\n      //             ),\r\n      //             partSourceURL: row[\"Part Source URL\"],\r\n      //             partSource: row[\"Part Source\"],\r\n      //           },\r\n      //         ];\r\n      //         const extensionresponse = await callEnoviaWebService(\r\n      //           \"POST\",\r\n      //           `${ENOVIA_BASE_URL}/resources/v1/modeler/dssrc/dssrc:ManufacturerEquivalentItems`,\r\n      //           extensionBody,\r\n      //           newHeaders\r\n      //         );\r\n      //         console.log(\"Extension Item Response:\", extensionresponse);\r\n      //         if (\r\n      //           !(\r\n      //             extensionresponse.status &&\r\n      //             extensionresponse.output?.member?.length\r\n      //           )\r\n      //         ) {\r\n      //           createFailed = true;\r\n      //           console.error(\r\n      //             `Failed to create ManufacturerEquivalentItems for row ${i} with Title ${row?.Title}.`\r\n      //           );\r\n      //           showErrorToast(\r\n      //             extensionresponse?.message ||\r\n      //               \"Failed to create ManufacturerEquivalentItems.\"\r\n      //           );\r\n      //         }\r\n      //       }\r\n      //     } catch (error) {\r\n      //       createFailed = true;\r\n      //       console.error(\r\n      //         `Error creating item for row ${i} with Title ${row?.Title}:`,\r\n      //         error\r\n      //       );\r\n      //       showErrorToast(\r\n      //         `An error occurred while creating item for row ${i} with Title ${row?.Title}.`\r\n      //       );\r\n      //     }\r\n      //   }\r\n      // }\r\n  //     if (updateItems?.length > 0) {\r\n  //       for (let i = 0; i < updateItems.length; i++) {\r\n  //         const row = updateItems[i];\r\n  //         const uploadBody = {\r\n  //           partSource: row?.row[\"Part Source\"],\r\n  //           partSourceURL: row?.row[\"Part Source URL\"],\r\n  //           manufacturerPartNumber: String(\r\n  //             row?.row[\"Manufacturer Part Number\"]\r\n  //           ),\r\n  //           cestamp: row?.cestamp,\r\n  //         };\r\n  //         console.log(\"Upload Body:\", uploadBody);\r\n  // try {\r\n  //   const response = await callEnoviaWebService(\r\n  //     \"PATCH\",\r\n  //     `${ENOVIA_BASE_URL}/resources/v1/modeler/dssrc/dssrc:ManufacturerEquivalentItems/${row?.id}`,\r\n  //     uploadBody,\r\n  //     newHeaders\r\n  //   );\r\n  //   if (response.status) {\r\n  //     console.log(\"Update Item Response:\", response);\r\n  //   } else {\r\n  //     showErrorToast(response?.message || \"\");\r\n  //     updateFailed = true;\r\n  //   }\r\n\r\n  // } catch (error) {\r\n  //   updateFailed = true;\r\n  //   console.error(\r\n  //     `Error creating item for row ${i} with Title ${row?.row?.Title}:`,\r\n  //     error\r\n  //   );\r\n  //   showErrorToast(`Error creating item for row ${i} with Title ${row?.row?.Title}`);\r\n  // }\r\n  //       }\r\n  //     }\r\n  //     if (!createFailed && !updateFailed) {\r\n  //       showSuccessToast(\"MEP Mass Upload completed successfully.\");\r\n  //     }\r\n  //     // ============ For MEP Mass Upload Update =================\r\n  //   } catch (error) {\r\n  //     console.error(\"MEP MASS UPLOAD Error:\", error);\r\n  //     showErrorToast(\"An error occurred while fetching MEP Mass Upload data.\");\r\n  //   } finally {\r\n  //     setLoading(false);\r\n  //   }\r\n  // };\r\n\r\n  // return { handleMEPMassupload };\r\n  return {\r\n    // updateItems,\r\n    // createItems,\r\n    handleMEPMassupload,\r\n    loading,\r\n    // updateMassupload,\r\n  };\r\n};\r\n\r\nexport default useMEPMassUpload;\r\n\r\nasync function ValidateMep(ENOVIA_BASE_URL, searchStr, headers) {\r\n  // https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/search?$searchStr=SS_Rev02&$mask=dssrc:ManufacturerEquivalentItems.Basic\r\n  console.log(\"Validate Mep Function headers\", headers);\r\n  console.log(\"Validate Mep Function Search\",searchStr);\r\n  const response = await callEnoviaWebService(\r\n    \"GET\",\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?$searchStr=${searchStr}&$mask=dssrc:ManufacturerEquivalentItems.Basic`,\r\n    \"\",\r\n    headers\r\n  );\r\n  return response;\r\n}\r\n","import { callEnoviaWebService } from \"./helpers\";\r\n// // Fetches document IDs based on product ID and document name\r\nexport const getAttachedDocumentIds = async (\r\n  baseUrl,\r\n  productId,\r\n  headers,\r\n  parentRelName,\r\n  docName\r\n) => {\r\n  try {\r\n    const url = `${baseUrl}/resources/v1/modeler/documents/parentId/${productId}?parentRelName=${parentRelName}&tenant=OI000186152`;\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (response?.status && response?.output?.data?.length) {\r\n      console.log(\"docName\", docName);\r\n      console.log(\"docName\", response.output.data);\r\n      if (docName) {\r\n        const filteredData = response.output.data.filter(item =>\r\n          item?.dataelements?.name.toLowerCase().includes(docName.toLowerCase())\r\n        );\r\n        console.log(\"Filtered Data:\", filteredData);\r\n        return filteredData.map(item => item.id);\r\n      } else {\r\n        return response.output.data.map(item => item.id);\r\n      }\r\n    }\r\n\r\n    return [];\r\n  } catch (error) {\r\n    console.error(\"Error fetching document IDs:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Helper function to build disconnect payload\r\nexport  const buildDisconnectPayload = (docIds, parentId, docType) => {\r\n  const data = docIds.map((id) => ({\r\n    id,\r\n    updateAction: \"NONE\",\r\n    relateddata: {\r\n      parents: [{ id: parentId, updateAction: \"DISCONNECT\" }],\r\n    },\r\n  }));\r\n  return { data, documentType: docType };\r\n};\r\n\r\n// Helper function to disconnect documents API\r\nexport const disconnectDocuments = async (docs, headers, baseUrl, showErrorToast) => {\r\n  console.log(\"Disconnecting documents:\", docs);\r\n  const results = [];\r\n  for (const item of docs) {\r\n    const url = `${baseUrl}/resources/v1/modeler/documents?parentRelName=${item.documentType}&parentDirection=from&tenant=OI000186152`;\r\n    try {\r\n      const res = await callEnoviaWebService(\"POST\", url, item, headers);\r\n      console.log(`Disconnected ${item.documentType}`, res);\r\n    } catch (err) {\r\n      console.error(\"Error disconnecting documents:\", err)\r\n      results.push(item);\r\n    }\r\n    return results;\r\n  }\r\n};","import { useState } from \"react\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport useToast from \"../useToast\";\r\nimport {\r\n  getAttachedDocumentIds, buildDisconnectPayload,disconnectDocuments} from '../../utils/removeDocumentsHelper'\r\n// --------------------- Helper Functions -----------------------\r\n\r\n\r\n// --------------------- Custom Hook -----------------------\r\n\r\nconst useRemoveDocConnection = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const { showErrorToast, showSuccessToast, showWarningToast } = useToast();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  const handleDocDisconnectingMassupload = async (sheetData) => {\r\n    setLoading(true);\r\n    const specDocs = [];\r\n    const refDocs = [];\r\n    const nonExistingProducts = [];\r\n    const revisionNotMatch = [];\r\n    const notInWorkProducts = [];\r\n    const obsoleteProdcuts = [];\r\n    let disconnectPayload = [];\r\n\r\n    try {\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) return showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n\r\n      if (!sheetData?.length) {\r\n        showErrorToast(\"No data to upload. Please check your sheet.\");\r\n        return;\r\n      }\r\n      console.log(\"Sheet data\", sheetData);\r\n      // ================= sheetData Loop =================\r\n      for (const [index, row] of sheetData.entries()) {\r\n        try {\r\n          const searchStr = row[\"Item EIN\"];\r\n          const searchUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?$searchStr=%5Bds6wg%3AEnterpriseExtension.V_PartNumber%5D%3A%2A${encodeURIComponent(searchStr)}%2A`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            searchUrl,\r\n            \"\",\r\n            headers\r\n          );\r\n\r\n          const match = response?.output?.member?.find(\r\n            (item) => item?.revision === String(row[\"Item Revision\"])\r\n          );\r\n\r\n          if (!match) {\r\n            nonExistingProducts.push(row);\r\n            continue;\r\n          }\r\n\r\n          if (match.state !== \"IN_WORK\") {\r\n            notInWorkProducts.push({ ...match, row });\r\n            continue;\r\n          }\r\n\r\n          const docName = (row[\"Document Name\"] || \"\").trim();\r\n          let specIds = [];\r\n          let refIds = [];\r\n\r\n          if (match?.state === \"OBSOLETE\") {\r\n            // Push the match object into an array for obsolete matches\r\n            obsoleteProdcuts.push({ ...match, row });\r\n            continue;\r\n          } else {\r\n            specIds = await getAttachedDocumentIds(\r\n              ENOVIA_BASE_URL,\r\n              match?.id,\r\n              headers,\r\n              \"SpecificationDocument\",\r\n              docName\r\n            );\r\n            refIds = await getAttachedDocumentIds(\r\n              ENOVIA_BASE_URL,\r\n              match?.id,\r\n              headers,\r\n              \"Reference%20Document\",\r\n              docName\r\n            );\r\n          }\r\n\r\n          if (!specIds.length && !refIds.length) {\r\n            showWarningToast(\r\n              `No documents found for row ${index} with title ${row[\"Item EIN\"]}`\r\n            );\r\n            continue;\r\n          }\r\n\r\n          if (specIds.length) {\r\n            // If there are Specification documents, build the payload helper function\r\n            const payload = buildDisconnectPayload(\r\n              specIds,\r\n              match?.id,\r\n              \"SpecificationDocument\"\r\n            );\r\n            specDocs.push(payload);\r\n            // Call disconnectDocuments for SpecificationDocument API\r\n            const disconnectResults = await disconnectDocuments(\r\n              [payload],\r\n              headers,\r\n              ENOVIA_BASE_URL,\r\n              showErrorToast\r\n            );\r\n            disconnectPayload.push(...disconnectResults);\r\n          }\r\n\r\n          if (refIds.length) {\r\n            // If there are reference documents, build the payload helper function\r\n            const payload = buildDisconnectPayload(\r\n              refIds,\r\n              match?.id,\r\n              \"Reference%20Document\"\r\n            );\r\n            refDocs.push(payload);\r\n            // Call disconnectDocuments for reference documents API\r\n            const disconnectResults = await disconnectDocuments(\r\n              [payload],\r\n              headers,\r\n              ENOVIA_BASE_URL,\r\n              showErrorToast\r\n            );\r\n            disconnectPayload.push(...disconnectResults);\r\n          }\r\n        } catch (rowError) {\r\n          console.error(`Error processing row ${index}:`, rowError);\r\n        }\r\n      }\r\n\r\n      // ================= End of sheetData Loop =================\r\n      console.log(\"Specification Docs:\", specDocs);\r\n      console.log(\"Reference Docs:\", refDocs);\r\n      console.log(\"revisionNotMatch\", revisionNotMatch);\r\n      console.log(\"notInWorkProducts\", notInWorkProducts);\r\n      console.log(\"obsoleteProdcuts\", obsoleteProdcuts);\r\n      console.log(\"disconnectPayload \", disconnectPayload);\r\n      showSuccessToast(\"Disconnected Documents completed successfully.\");\r\n    } catch (mainError) {\r\n      console.error(\"Mass upload error:\", mainError);\r\n      showErrorToast(\"An error occurred while processing the mass upload.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  return {\r\n    handleDocDisconnectingMassupload,\r\n    loading,\r\n  };\r\n};\r\n\r\nexport default useRemoveDocConnection;\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport \"./massupload.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport {\r\n  globalCollabSpaceTitles,\r\n  globalCollabSpaceNames,\r\n} from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\nimport api from \"../../utils/api\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\nimport useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\nimport getUserDetails from \"../../utils/getUserDetails\";\r\n// import ReusableTable from \"../../components/Table/Table\";\r\nimport SuccessModal from \"../../components/Modals/SuccessModal\";\r\nimport {\r\n  MSG_TEMPLATE_OPERATION_MISMATCH,\r\n  MSG_NO_DATA_TO_SUBMIT,\r\n  MSG_INVALID_OPERATION_TYPE,\r\n  MSG_UPLOAD_FAILED_CONTACT_ADMIN,\r\n  MSG_NO_SHEET_DATA,\r\n  MSG_UPLOAD_FAILED,\r\n  MSG_FILE_VALIDATED_SUCCESS,\r\n  MSG_WIDGET_RESET_SUCCESS,\r\n  MSG_UPLOAD_SUCCESS,\r\n  MSG_OPERATION_CHNAGED,\r\n} from \"../../utils/toastMessages\";\r\nimport { use } from \"react\";\r\nimport useMEPMassUpload from \"../../hooks/Mass-Upload/useMEPMassupload\";\r\nimport useRemoveDocConnection from \"../../hooks/Mass-Upload/useRemoveDocConnection\";\r\n\r\nconst API_ENDPOINTS = {\r\n  1: \"/massUpload/uploadItems\",\r\n  2: \"/massUpload/uploadItemStructure\",\r\n  3: \"/massUpload/documents\",\r\n  4: \"/massUpload/connectItemDocuments\",\r\n};\r\n\r\nconst transformSheetDataWithMappings = (\r\n  sheetData,\r\n  columnMappings,\r\n  operationType,\r\n  mappedAttributesData,\r\n  collabMapping // Add this parameter\r\n) => {\r\n  const excludedColumns = [\"Physical Product/Raw Material\"];\r\n\r\n  if (sheetData.length > 0) {\r\n    console.log(\r\n      \"Actual column names in sheet data:\",\r\n      Object.keys(sheetData[0])\r\n    );\r\n    console.log(\"Sample row values:\", sheetData[0]);\r\n    console.log(\"Column mappings applied:\", columnMappings);\r\n  }\r\n\r\n  if (!sheetData || !columnMappings) {\r\n    console.error(\"Missing data or mappings for transformation\");\r\n    return null;\r\n  }\r\n\r\n  console.log(\"Transforming sheet data with mappings:\", columnMappings);\r\n  const mappedData = mappedAttributesData?.mappedData || [];\r\n\r\n  console.log(\"Mapped data in Massupload:\", mappedData);\r\n\r\n  // For Document operation type (3), use different processing logic\r\n  if (operationType === \"3\") {\r\n    console.log(\"Processing document data with operation type 3\");\r\n\r\n    // Transform each row into document format\r\n    // Transform each row into document format\r\n    const documentItems = sheetData.map((row) => {\r\n      // Create separate objects for root-level data and nested dataelements\r\n      const rootData = {};\r\n      const dataelements = {};\r\n      const apiAttributes = {}; // For storing API attributes\r\n\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (excludedColumns.includes(columnName)) {\r\n          // console.log(`Skipping excluded column \"${columnName}\" in payload`);\r\n          return;\r\n        }\r\n        if (\r\n          !columnMappings[columnName] ||\r\n          value === undefined ||\r\n          value === null\r\n        )\r\n          return;\r\n\r\n        const backendFieldName = columnMappings[columnName];\r\n\r\n        // Find attribute in mappedData to check if it's an API attribute\r\n        const attribute = mappedData.find(\r\n          (attr) =>\r\n            attr.uiLabel === backendFieldName ||\r\n            attr.backendName === backendFieldName\r\n        );\r\n\r\n        console.log(\r\n          `Processing column ${columnName} -> ${backendFieldName}`,\r\n          attribute\r\n        );\r\n\r\n        // Special case handling for known fields\r\n        if (backendFieldName === \"Document Type\") {\r\n          rootData[\"classificationType\"] = value;\r\n        } else if (backendFieldName === \"Collaborative Space\") {\r\n          const collabspaceTitle = value;\r\n          rootData[\"collabSpaceTitle\"] = collabspaceTitle;\r\n\r\n          // Use the mapping to get the corresponding name\r\n          if (collabMapping[collabspaceTitle]) {\r\n            rootData[\"collabSpace\"] = collabMapping[collabspaceTitle];\r\n            console.log(\r\n              `Mapped collabspace title \"${collabspaceTitle}\" to name \"${collabMapping[collabspaceTitle]}\"`\r\n            );\r\n          } else {\r\n            console.warn(\r\n              `No mapping found for collabspace title: ${collabspaceTitle}`\r\n            );\r\n          }\r\n        } else if (\r\n          backendFieldName.toLowerCase().includes(\"collaborative\") ||\r\n          backendFieldName.toLowerCase().includes(\"collab\")\r\n        ) {\r\n          // Try to catch variations of Collaborative Space\r\n          const collabspaceTitle = value;\r\n          rootData[\"collabSpaceTitle\"] = collabspaceTitle;\r\n\r\n          // Use the mapping to get the corresponding name\r\n          if (collabMapping[collabspaceTitle]) {\r\n            rootData[\"collabSpace\"] = collabMapping[collabspaceTitle];\r\n            console.log(\r\n              `Mapped collabspace title \"${collabspaceTitle}\" to name \"${collabMapping[collabspaceTitle]}\"`\r\n            );\r\n          } else {\r\n            console.warn(\r\n              `No mapping found for collabspace title: ${collabspaceTitle}`\r\n            );\r\n          }\r\n        } else if (backendFieldName === \"File\") {\r\n          // Place File at root level\r\n          rootData[\"File\"] = value;\r\n        } else if (backendFieldName === \"Document Name\") {\r\n          dataelements[\"name\"] = value;\r\n        }\r\n        // For API attributes with group \"API Attributes\", include them with their fullName\r\n        else if (\r\n          attribute &&\r\n          attribute.group === \"API Attributes\" &&\r\n          attribute.fullName\r\n        ) {\r\n          // Store API attributes using their full name\r\n          dataelements[attribute.backendName] = value;\r\n\r\n          // console.log(\r\n          //   `Added API attribute: ${attribute.backendName} = ${value}`\r\n          // );\r\n        }\r\n        // For regular mapped fields that aren't API attributes\r\n        else if (attribute || backendFieldName) {\r\n          // Only include mapped fields (either through attribute lookup or direct mapping)\r\n          dataelements[backendFieldName] = value;\r\n        }\r\n        // Fields without mappings or API attribute status are excluded\r\n      });\r\n\r\n      // Combine root data, dataelements, and API attributes\r\n      return {\r\n        ...rootData,\r\n        dataelements,\r\n        // ...apiAttributes, // Include API attributes at root level\r\n      };\r\n    });\r\n\r\n    // Log sample document for verification\r\n    if (documentItems.length > 0) {\r\n      console.log(\r\n        \"Sample document structure:\",\r\n        JSON.stringify(documentItems[0], null, 2)\r\n      );\r\n    }\r\n\r\n    // Create chunks for batched processing\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < documentItems.length; i += CHUNK_SIZE) {\r\n      chunks.push(documentItems.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: documentItems.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      // Special field to indicate this is document data\r\n      isDocumentPayload: true,\r\n      documents: documentItems,\r\n    };\r\n  }\r\n  // Add this as a new condition in transformSheetDataWithMappings after operation 3 but before the else branch\r\n  else if (operationType === \"4\") {\r\n    console.log(\"Processing Physical Product-Document data for operation 4\");\r\n\r\n    // Transform each row into the required format for connectItemDocuments\r\n    const connectItemDocuments = sheetData.map((row) => {\r\n      // Create base item structure\r\n      const item = {\r\n        PartType: \"\",\r\n        PartNumber: \"\",\r\n        PartRevision: \"\",\r\n        DocumentType: \"\",\r\n        DocumentName: \"\",\r\n        DocumentRevision: \"\",\r\n        RelationshipType: \"\",\r\n        BOSAttributes: {},\r\n      };\r\n      // Helper function to normalize field names for comparison\r\n      const normalizeFieldName = (name) => {\r\n        if (!name) return \"\";\r\n        return name.toLowerCase().replace(/\\s+/g, \"\");\r\n      };\r\n\r\n      // Root-level field mapping\r\n      const rootFieldMapping = {\r\n        parttype: \"PartType\",\r\n        part_type: \"PartType\",\r\n        einnumber: \"PartNumber\",\r\n        ein_number: \"PartNumber\",\r\n        partnumber: \"PartNumber\",\r\n        part_number: \"PartNumber\",\r\n        partrevision: \"PartRevision\",\r\n        part_revision: \"PartRevision\",\r\n        documenttype: \"DocumentType\",\r\n        document_type: \"DocumentType\",\r\n        documentname: \"DocumentName\",\r\n        document_name: \"DocumentName\",\r\n        documentrevision: \"DocumentRevision\",\r\n        document_revision: \"DocumentRevision\",\r\n        relationshiptype: \"RelationshipType\",\r\n        relationship_type: \"RelationshipType\",\r\n      };\r\n\r\n      // Map row data to item properties\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (excludedColumns.includes(columnName)) return;\r\n        if (!columnMappings[columnName]) return;\r\n        if (value === undefined || value === null || value === \"\") return;\r\n\r\n        const uiLabelBackendName = columnMappings[columnName];\r\n        const attribute = mappedData.find(\r\n          (attr) =>\r\n            attr.uiLabel === uiLabelBackendName ||\r\n            attr.backendName === uiLabelBackendName\r\n        );\r\n\r\n        const backendName = attribute?.backendName || uiLabelBackendName;\r\n        const group = attribute?.group;\r\n\r\n        console.log(\r\n          `Processing column ${columnName} -> ${backendName} (${group})`\r\n        );\r\n\r\n        // First check if it maps to a root-level field\r\n        const normalizedName = normalizeFieldName(backendName);\r\n        if (rootFieldMapping[normalizedName]) {\r\n          const fieldName = rootFieldMapping[normalizedName];\r\n          item[fieldName] = value;\r\n          console.log(`Mapped to root field: ${fieldName} = \"${value}\"`);\r\n          return;\r\n        }\r\n\r\n        // Handle BOS attributes\r\n        const bosSpecialAttrs = [\r\n          \"Print On Purchase Order Required\",\r\n          \"Print On Work Order Required\",\r\n          \"Work Order Document Required\",\r\n          \"Print On report Order Required\",\r\n        ];\r\n\r\n        // Check if it's a BOS attribute by name\r\n        if (\r\n          bosSpecialAttrs.some(\r\n            (attr) => normalizeFieldName(attr) === normalizedName\r\n          )\r\n        ) {\r\n          // Find the original name format\r\n          const originalAttr =\r\n            bosSpecialAttrs.find(\r\n              (attr) => normalizeFieldName(attr) === normalizedName\r\n            ) || backendName;\r\n\r\n          item.BOSAttributes[originalAttr] = value;\r\n          console.log(`Added BOS attribute: ${originalAttr} = \"${value}\"`);\r\n          return;\r\n        }\r\n\r\n        // If it has BOS Attributes group, add it to BOSAttributes\r\n        if (group === \"BOS Attributes\") {\r\n          item.BOSAttributes[backendName] = value;\r\n          console.log(\r\n            `Added group-based BOS attribute: ${backendName} = \"${value}\"`\r\n          );\r\n          return;\r\n        }\r\n\r\n        // For anything else, try to find a match in root fields\r\n        for (const [rootKey, fieldName] of Object.entries(rootFieldMapping)) {\r\n          if (normalizedName.includes(rootKey.toLowerCase())) {\r\n            item[fieldName] = value;\r\n            console.log(\r\n              `Partial match to root field: ${fieldName} = \"${value}\"`\r\n            );\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Last resort - add to root level\r\n        console.log(\r\n          `Unmatched field added at root level: ${backendName} = \"${value}\"`\r\n        );\r\n        item[backendName] = value;\r\n      });\r\n\r\n      // Log the final item for debugging\r\n      console.log(\"Final processed item:\", JSON.stringify(item, null, 2));\r\n      return item;\r\n    });\r\n\r\n    // Create chunks for batched processing\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < connectItemDocuments.length; i += CHUNK_SIZE) {\r\n      chunks.push(connectItemDocuments.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    // Log a sample item for verification\r\n    if (connectItemDocuments.length > 0) {\r\n      console.log(\r\n        \"Sample connectItemDocument structure:\",\r\n        JSON.stringify(connectItemDocuments[0], null, 2)\r\n      );\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: connectItemDocuments.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      isConnectItemDocumentsPayload: true,\r\n      connectItemDocuments: connectItemDocuments,\r\n    };\r\n  } else {\r\n    // KEEP EXISTING CODE FOR PHYSICAL PRODUCTS (operations 1, 2, 4)\r\n    console.log(\r\n      \"Processing physical product data with operation type:\",\r\n      operationType\r\n    );\r\n\r\n    const attributeGroupMap = {};\r\n    if (Array.isArray(mappedData)) {\r\n      mappedData.forEach((option) => {\r\n        attributeGroupMap[option.backendName] = option.group || \"System\";\r\n        if (option.fullName) {\r\n          attributeGroupMap[`fullName:${option.backendName}`] = option.fullName;\r\n        }\r\n        console.log(\r\n          `Mapping ${option.backendName} to group ${option.group || \"System\"}`\r\n        );\r\n      });\r\n    }\r\n\r\n    // Modify getPathForAttribute to handle EBOM Attributes for operation type 2\r\n    const getPathForAttribute = (backendName, columnName) => {\r\n      // Special handling for collabSpace in operation 2 - ADD THIS FIRST\r\n      if (operationType === \"2\" && backendName === \"collabSpace\") {\r\n        console.log(\"Operation 2: collabSpace explicitly placed at root level\");\r\n        return \"collabSpace\"; // Keep at root level\r\n      }\r\n\r\n      // Special case for level - always place at root level for operation type 2\r\n      if (operationType === \"2\" && backendName === \"Level\") {\r\n        console.log(\r\n          \"'Level' identified as EBOM Attribute but placing at root level\"\r\n        );\r\n        return \"Level\";\r\n      }\r\n\r\n      // Check for other EBOM Attributes for operation type 2\r\n      if (\r\n        operationType === \"2\" &&\r\n        attributeGroupMap[backendName] === \"EBOM Attributes\" &&\r\n        backendName !== \"Level\" // Make sure level doesn't go into instanceAttributes\r\n      ) {\r\n        console.log(\r\n          `${backendName} identified as EBOM Attribute, placing in instanceAttributes`\r\n        );\r\n        return `instanceAttributes.${backendName}`;\r\n      }\r\n\r\n      // Rest of existing code remains the same...\r\n      if (operationType === \"1\" && backendName === \"title\") {\r\n        console.log(\"Operation type 1: title placed inside attributes\");\r\n        return \"attributes.title\";\r\n      }\r\n      // Add this special case for dimensionType\r\n      if (\r\n        operationType === \"1\" &&\r\n        (backendName === \"dimensionType\" || backendName === \"Dimension\")\r\n      ) {\r\n        console.log(\"Operation type 1: dimensionType placed inside attributes\");\r\n        return \"attributes.dimensionType\";\r\n      }\r\n\r\n      if (\r\n        backendName === \"type\" ||\r\n        backendName === \"classificationType\" ||\r\n        backendName === \"collabSpaceTitle\"\r\n      ) {\r\n        if (backendName === \"collabSpaceTitle\") {\r\n          console.log(\"collabSpaceTitle mapped to root collabspace\");\r\n          return \"collabSpaceTitle\";\r\n        }\r\n\r\n        console.log(`${backendName} placed at root level`);\r\n        return backendName;\r\n      }\r\n\r\n      // For the physical product operation (in getPathForAttribute)\r\n      if (backendName === \"collabSpaceTitle\") {\r\n        console.log(\"collabSpaceTitle mapped to root collabspace\");\r\n        return \"collabSpaceTitle\";\r\n      }\r\n\r\n      // Add a special case for collabspaceName if we need it in the payload\r\n      if (backendName === \"collabspaceName\") {\r\n        console.log(\"collabspaceName mapped to root\");\r\n        return \"collabSpace\";\r\n      }\r\n\r\n      if (\r\n        columnName === \"EIN Number\" ||\r\n        backendName === \"PartNumber\" ||\r\n        backendName === \"Part Number\"\r\n      ) {\r\n        console.log(\r\n          \"EIN Number mapped to attributes.dseng:EnterpriseReference.partNumber\"\r\n        );\r\n        return \"attributes.dseng:EnterpriseReference.partNumber\";\r\n      }\r\n\r\n      if (backendName === \"description\") {\r\n        console.log(\"Description mapped to attributes.description\");\r\n        return \"attributes.description\";\r\n      }\r\n\r\n      const group = attributeGroupMap[backendName];\r\n      console.log(`Attribute: ${backendName}, Group: ${group || \"unknown\"}`);\r\n\r\n      if (!group) {\r\n        console.log(`Skipping attribute with unknown group: ${backendName}`);\r\n        return null;\r\n      }\r\n\r\n      if (group === \"System Attributes\") {\r\n        return `attributes.${backendName}`;\r\n      } else {\r\n        return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n      }\r\n    };\r\n\r\n    // Define the constant for MBOM attributes group key\r\n    const MBOM_GROUP_KEY = \"MBOMAttributes__b0e36f7ffa8f4e42b8be46904dad3047\";\r\n\r\n    // Modify the existing transformation logic for operation type 2\r\n    if (operationType === \"2\") {\r\n      const transformedItems = sheetData.map((row) => {\r\n        const transformedRow = {\r\n          instanceAttributes: {\r\n            customerAttributes: {\r\n              [MBOM_GROUP_KEY]: {},\r\n            },\r\n          },\r\n        };\r\n\r\n        // Handle type first based on Physical Product/Raw Material column\r\n        const productTypeColumn = Object.keys(row).find(\r\n          (key) =>\r\n            key.toLowerCase().includes(\"physical product\") ||\r\n            key.toLowerCase().includes(\"raw material\")\r\n        );\r\n\r\n        if (productTypeColumn && row[productTypeColumn]) {\r\n          const productType = row[productTypeColumn].toLowerCase().trim();\r\n          transformedRow.type = productType.includes(\"physical product\")\r\n            ? \"VPMReference\"\r\n            : productType.includes(\"raw material\")\r\n            ? \"Raw_Material\"\r\n            : \"VPMReference\"; // Default to VPMReference\r\n        }\r\n\r\n        Object.entries(row).forEach(([columnName, value]) => {\r\n          if (excludedColumns.includes(columnName)) return;\r\n          if (!columnMappings[columnName]) return;\r\n\r\n          const uiLabelBackendName = columnMappings[columnName];\r\n          const attribute = mappedData.find(\r\n            (attr) =>\r\n              attr.uiLabel === uiLabelBackendName ||\r\n              attr.backendName === uiLabelBackendName\r\n          );\r\n          const backendName = attribute?.backendName || uiLabelBackendName;\r\n          const group = attribute?.group;\r\n\r\n          // Handle different types of attributes\r\n          if (backendName === \"Level\") {\r\n            // Level goes to root\r\n            transformedRow[\"level\"] = value;\r\n          } else if (backendName === \"collabSpaceTitle\") {\r\n            // Handle collabspace mapping\r\n            transformedRow[\"collabSpaceTitle\"] = value;\r\n            if (collabMapping && collabMapping[value]) {\r\n              transformedRow[\"collabSpace\"] = collabMapping[value];\r\n            }\r\n          } else if (backendName === \"classificationType\") {\r\n            transformedRow[\"classificationType\"] = value;\r\n          } else if (group === \"EBOM Attributes\") {\r\n            // Special handling for EBOM attributes\r\n            if (backendName === \"name\" || backendName === \"quantity\") {\r\n              // These go directly in instanceAttributes\r\n              transformedRow.instanceAttributes[backendName] = value;\r\n            } else {\r\n              // Other EBOM attributes go into the customerAttributes.MBOMAttributes group\r\n              transformedRow.instanceAttributes.customerAttributes[\r\n                MBOM_GROUP_KEY\r\n              ][backendName] = value;\r\n            }\r\n          } else if (backendName === \"title\" || backendName === \"description\") {\r\n            // Initialize attributes object if not exists\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            transformedRow.attributes[backendName] = value;\r\n          }\r\n\r\n          // Add this new condition for dimensionType\r\n          else if (\r\n            backendName === \"dimensionType\" ||\r\n            backendName === \"Dimension\"\r\n          ) {\r\n            // Initialize attributes object if not exists\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            transformedRow.attributes[\"dimensionType\"] = value;\r\n            console.log(\r\n              `Placed dimensionType directly in attributes: ${value}`\r\n            );\r\n          } else if (\r\n            columnName === \"EIN Number\" ||\r\n            backendName === \"Part Number\"\r\n          ) {\r\n            // Handle EIN Number/Part Number\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            if (!transformedRow.attributes[\"dseng:EnterpriseReference\"]) {\r\n              transformedRow.attributes[\"dseng:EnterpriseReference\"] = {};\r\n            }\r\n            transformedRow.attributes[\"dseng:EnterpriseReference\"].partNumber =\r\n              value;\r\n          } else {\r\n            // Handle other enterprise attributes\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            if (!transformedRow.attributes[\"dseno:EnterpriseAttributes\"]) {\r\n              transformedRow.attributes[\"dseno:EnterpriseAttributes\"] = {};\r\n            }\r\n            transformedRow.attributes[\"dseno:EnterpriseAttributes\"][\r\n              backendName\r\n            ] = value;\r\n          }\r\n        });\r\n\r\n        return transformedRow;\r\n      });\r\n\r\n      // Rest of your existing chunking logic...\r\n      if (transformedItems.length > 0) {\r\n        console.log(\r\n          \"Sample transformed item structure:\",\r\n          JSON.stringify(transformedItems[0], null, 2)\r\n        );\r\n      }\r\n\r\n      const CHUNK_SIZE = 1000;\r\n      const chunks = [];\r\n\r\n      for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n        chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n      }\r\n\r\n      return {\r\n        chunks,\r\n        totalChunks: chunks.length,\r\n        totalItems: transformedItems.length,\r\n        originalData: sheetData,\r\n        mappings: columnMappings,\r\n        isDocumentPayload: false,\r\n      };\r\n    } else {\r\n      const transformedItems = sheetData.map((row) => {\r\n        const transformedRow = {};\r\n\r\n        // Add instanceAttributes object for operation 2\r\n        if (operationType === \"2\") {\r\n          transformedRow.instanceAttributes = {};\r\n        }\r\n\r\n        // The rest of your existing transformation code...\r\n        Object.entries(row).forEach(([columnName, value]) => {\r\n          if (excludedColumns.includes(columnName)) {\r\n            // console.log(`Skipping excluded column \"${columnName}\" in payload`);\r\n            return;\r\n          }\r\n          if (!columnMappings[columnName]) return;\r\n\r\n          const uiLabelBackendName = columnMappings[columnName];\r\n\r\n          const systemAttributeMappings = {\r\n            Title: \"title\",\r\n            Description: \"description\",\r\n            \"Collaborative Space\": \"collabSpaceTitle\",\r\n            \"Collab Space\": \"collabSpaceTitle\",\r\n            Type: \"type\",\r\n          };\r\n\r\n          const backendName =\r\n            systemAttributeMappings[uiLabelBackendName] ||\r\n            mappedData.find((attr) => attr.uiLabel === uiLabelBackendName)\r\n              ?.backendName ||\r\n            uiLabelBackendName;\r\n\r\n          // **MOVE THIS CODE BLOCK UP HERE**\r\n          // Handle collabspace title and name mapping immediately\r\n          if (\r\n            (operationType === \"1\" || operationType === \"2\") &&\r\n            backendName === \"collabSpaceTitle\"\r\n          ) {\r\n            // Set the title as usual\r\n            transformedRow[\"collabSpaceTitle\"] = value;\r\n\r\n            // Also set the collabspace name using the mapping\r\n            if (collabMapping && collabMapping[value]) {\r\n              transformedRow[\"collabSpace\"] = collabMapping[value];\r\n              console.log(\r\n                `Mapped collabspace title \"${value}\" to name \"${collabMapping[value]}\"`\r\n              );\r\n            } else {\r\n              console.warn(`No mapping found for collabspace title: ${value}`);\r\n            }\r\n            // Continue to the next attribute\r\n            return;\r\n          }\r\n\r\n          const path = getPathForAttribute(backendName, columnName);\r\n\r\n          if (\r\n            backendName === \"title\" ||\r\n            backendName === \"description\" ||\r\n            backendName.toLowerCase() === \"collabspace\"\r\n          ) {\r\n            console.log(`Placing ${backendName} at path: ${path}`);\r\n          }\r\n\r\n          if (!path) return;\r\n\r\n          const pathParts = path.split(\".\");\r\n          let current = transformedRow;\r\n\r\n          for (let i = 0; i < pathParts.length - 1; i++) {\r\n            const part = pathParts[i];\r\n            if (!current[part]) {\r\n              current[part] = {};\r\n            }\r\n            current = current[part];\r\n          }\r\n\r\n          current[pathParts[pathParts.length - 1]] = value;\r\n\r\n          // Special handling for collabspace in operation 2\r\n        });\r\n\r\n        if (operationType === \"1\") {\r\n          const productTypeColumn = Object.keys(row).find(\r\n            (key) =>\r\n              key.toLowerCase().includes(\"physical product\") ||\r\n              key.toLowerCase().includes(\"raw material\")\r\n          );\r\n\r\n          if (productTypeColumn && row[productTypeColumn]) {\r\n            const productType = row[productTypeColumn].toLowerCase().trim();\r\n            transformedRow[\"type\"] = productType.includes(\"physical product\")\r\n              ? \"VPMReference\"\r\n              : productType.includes(\"raw material\")\r\n              ? \"Raw_Material\"\r\n              : \"\";\r\n\r\n            console.log(\r\n              `Product type determined: ${transformedRow[\"type\"]} from value: ${row[productTypeColumn]}`\r\n            );\r\n          }\r\n        }\r\n\r\n        // Special handling for operation 2 default values\r\n        if (operationType === \"2\") {\r\n          // Set default type for Product Structure if not specified\r\n          const productTypeColumn = Object.keys(row).find(\r\n            (key) =>\r\n              key.toLowerCase().includes(\"physical product\") ||\r\n              key.toLowerCase().includes(\"raw material\")\r\n          );\r\n\r\n          if (productTypeColumn && row[productTypeColumn]) {\r\n            const productType = row[productTypeColumn].toLowerCase().trim();\r\n            transformedRow[\"type\"] = productType.includes(\"physical product\")\r\n              ? \"VPMReference\"\r\n              : productType.includes(\"raw material\")\r\n              ? \"Raw_Material\"\r\n              : \"\";\r\n\r\n            console.log(\r\n              `Product type determined: ${transformedRow[\"type\"]} from value: ${row[productTypeColumn]}`\r\n            );\r\n          }\r\n\r\n          // Make sure instanceAttributes exists even if no EBOM attributes were found\r\n          if (!transformedRow.instanceAttributes) {\r\n            transformedRow.instanceAttributes = {};\r\n          }\r\n        }\r\n\r\n        return transformedRow;\r\n      });\r\n\r\n      if (transformedItems.length > 0) {\r\n        console.log(\r\n          \"Sample transformed item structure:\",\r\n          JSON.stringify(transformedItems[0], null, 2)\r\n        );\r\n      }\r\n\r\n      const CHUNK_SIZE = 1000;\r\n      const chunks = [];\r\n\r\n      for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n        chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n      }\r\n\r\n      return {\r\n        chunks,\r\n        totalChunks: chunks.length,\r\n        totalItems: transformedItems.length,\r\n        originalData: sheetData,\r\n        mappings: columnMappings,\r\n        isDocumentPayload: false,\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nconst generateColumnMappings = (\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  mappedAttributes\r\n) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n  const completeMappings = {};\r\n  const simplifiedMappings = {};\r\n\r\n  const excludedColumns = [\"Physical Product/Raw Material\"];\r\n\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) return false;\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    return allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n  };\r\n\r\n  const systemAttributeMappings = {\r\n    Title: \"title\",\r\n    Description: \"description\",\r\n    \"Collaborative Space\": \"collabSpaceTitle\",\r\n    \"Collab Space\": \"collabSpaceTitle\",\r\n    Type: \"classificationType\",\r\n    \"EIN Number\": \"Part Number\",\r\n  };\r\n\r\n  const getBackendNameForHeader = (header) => {\r\n    if (systemAttributeMappings[header]) {\r\n      return systemAttributeMappings[header];\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n\r\n    const systemAttrKey = Object.keys(systemAttributeMappings).find(\r\n      (key) => key.toLowerCase() === normalizedHeader\r\n    );\r\n\r\n    if (systemAttrKey) {\r\n      return systemAttributeMappings[systemAttrKey];\r\n    }\r\n\r\n    const matchingOption = dropdownOptions.find(\r\n      (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    return matchingOption ? matchingOption.backendName : header;\r\n  };\r\n\r\n  const specialMappings = {\r\n    \"EIN Number\": \"PartNumber\",\r\n  };\r\n\r\n  columnHeaders.forEach((columnName) => {\r\n    // Skip excluded columns\r\n    if (excludedColumns.includes(columnName)) {\r\n      console.log(`Column \"${columnName}\" is excluded from mapping`);\r\n      return;\r\n    }\r\n    const hasNLS = hasMatchingNLS(columnName);\r\n    const isSpecialColumn = specialMappings[columnName];\r\n    const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n    if (isSpecialColumn) {\r\n      const mappedAttribute = specialMappings[columnName];\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory || false,\r\n        autoMapped: true,\r\n        isSpecial: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    } else if (hasNLS || isMandatory) {\r\n      const mappedAttribute = getBackendNameForHeader(columnName);\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory,\r\n        autoMapped: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n  });\r\n\r\n  return {\r\n    completeMappings,\r\n    simplifiedMappings,\r\n    totalColumns: Object.keys(completeMappings).length,\r\n  };\r\n};\r\n\r\n// Add this function near the top of your file, outside the MassUpload component\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false);\r\n  const { showErrorToast, showSuccessToast, showInfoToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef();\r\n  const [formattedData, setFormattedData] = useState(null);\r\n  const [userDetails, setUserDetails] = useState(null);\r\n  const [securityContext, setSecurityContext] = useState(null); // New state for security context\r\n  const [collabNames, setCollabNames] = useState([]); // Add new state for names\r\n  const [collabMapping, setCollabMapping] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [apiResponse, setApiResponse] = useState(null);\r\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\r\n\r\n  const {\r\n    mappedAttributes: productMappedAttributes,\r\n    refreshMapping: refreshProductMapping,\r\n  } = useMassUpload();\r\n  const {\r\n    mappedAttributes: documentMappedAttributes,\r\n    refreshMapping: refreshDocumentMapping,\r\n  } = useFetchDocumentData(operationChoice);\r\n\r\n  const getActiveData = () => {\r\n    console.log(\"Getting active data for operation:\", operationChoice);\r\n\r\n    switch (operationChoice) {\r\n      case \"1\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"2\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"3\":\r\n        return {\r\n          mappedAttributes: documentMappedAttributes,\r\n          refreshMapping: refreshDocumentMapping,\r\n        };\r\n      case \"4\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      default:\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n    }\r\n  };\r\n\r\n  const { mappedAttributes, refreshMapping } = getActiveData();\r\n\r\n  console.log(\"Active operation:\", operationChoice);\r\n  console.log(\"Active mappedAttributes:\", mappedAttributes);\r\n\r\n  const handleRefreshForCurrentOperation = async (operation) => {\r\n    try {\r\n      console.log(\"Refreshing data for operation:\", operation);\r\n      const { refreshMapping } = getActiveData();\r\n      await refreshMapping(operation);\r\n    } catch (error) {\r\n      console.error(\"Error refreshing data:\", error);\r\n    }\r\n  };\r\n\r\n  // const handleOperationChange = (value) => {\r\n  //   console.log(\"Operation selected:\", value);\r\n  //   setOperationChoice(value);\r\n  //   handleRefreshForCurrentOperation(value);\r\n  // };\r\n\r\n  const handleOperationChange = (value) => {\r\n    console.log(\"Operation selected:\", value);\r\n\r\n    // If we already had a previous operation selected and files uploaded\r\n    if (operationChoice && formattedData) {\r\n      console.log(\"Operation changed - resetting uploaded file\");\r\n\r\n      // Reset file-related states\r\n      setErrors([]);\r\n      setColumnHeaders([]);\r\n      setMandatoryAttributes([]);\r\n      setFormattedData(null);\r\n\r\n      // Clear the file uploader\r\n      if (fileUploaderRef.current) {\r\n        fileUploaderRef.current.handleClearFiles(true); // Pass true to skip success toast\r\n      }\r\n\r\n      // Optional: Show toast informing the user\r\n      showInfoToast(MSG_OPERATION_CHNAGED);\r\n    }\r\n\r\n    // Update operation choice and refresh mapping\r\n    setOperationChoice(value);\r\n    handleRefreshForCurrentOperation(value);\r\n  };\r\n\r\n  // Update the existing useEffect to handle collabspace names\r\n\r\n  // Update the existing useEffect to create the title-to-name mapping\r\n  useEffect(() => {\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceNames:\",\r\n      globalCollabSpaceNames\r\n    );\r\n\r\n    // Set titles and names arrays\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n\r\n    if (Array.isArray(globalCollabSpaceNames)) {\r\n      setCollabNames([...globalCollabSpaceNames]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx]  globalCollabSpaceNames is not an array!\",\r\n        globalCollabSpaceNames\r\n      );\r\n    }\r\n\r\n    console.log(\r\n      \"globalCollabSpaceTitles in UseEffect Block\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    console.log(\r\n      \"globalCollabSpaceNames in UseEffect Block.\",\r\n      globalCollabSpaceNames\r\n    );\r\n    console.log(\"collabmapping in UseEffect Block\", collabMapping);\r\n\r\n    // Create a mapping object from titles to names\r\n    if (\r\n      Array.isArray(globalCollabSpaceTitles) &&\r\n      Array.isArray(globalCollabSpaceNames)\r\n    ) {\r\n      const mapping = {};\r\n\r\n      console.log(\r\n        \"globalCollabSpaceTitles in UseEffect Block\",\r\n        globalCollabSpaceTitles\r\n      );\r\n      console.log(\r\n        \"globalCollabSpaceNames in UseEffect Block.\",\r\n        globalCollabSpaceNames\r\n      );\r\n      console.log(\"collabmapping in UseEffect Block\", collabMapping);\r\n\r\n      for (let i = 0; i < globalCollabSpaceTitles.length; i++) {\r\n        mapping[globalCollabSpaceTitles[i]] = globalCollabSpaceNames[i];\r\n      }\r\n\r\n      setCollabMapping(mapping);\r\n      console.log(\r\n        \"[MassUpload.jsx] Collabspace title-to-name mapping:\",\r\n        mapping\r\n      );\r\n    }\r\n\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceNames:\", collabNames);\r\n  }, []);\r\n\r\n  // Add this after the existing console.log\r\n  // console.log(\"getUserDetails function\", getUserDetails);\r\n\r\n  // Add this code to actually call the function and show its response\r\n  useEffect(() => {\r\n    async function fetchUserDetails() {\r\n      try {\r\n        console.log(\"Calling getUserDetails...\");\r\n        const userData = await getUserDetails();\r\n        console.log(\" User Details Response:\", userData);\r\n        // Add this line to store the user data\r\n        setUserDetails(userData);\r\n      } catch (error) {\r\n        console.error(\"Error fetching user details:\", error);\r\n      }\r\n    }\r\n\r\n    fetchUserDetails();\r\n  }, []);\r\n  // console.log(\"widget window\", window.widget);\r\n  // Add an effect to get and set the security context\r\n  useEffect(() => {\r\n    try {\r\n      // Get security context from widget\r\n      if (window.widget && typeof window.widget.getValue === \"function\") {\r\n        const securityContextValue = window.widget.getValue(\"Credentials\");\r\n        console.log(\"Security Context:\", securityContextValue);\r\n        setSecurityContext(securityContextValue);\r\n      } else {\r\n        console.warn(\"window.widget or getValue function not available\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error getting security context:\", error);\r\n    }\r\n  }, []);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n      console.log(\"Selected Operation:\", operationChoice);\r\n      console.log(\"File:\", files[0].name);\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n        sheetData = [],\r\n      } = validationResult;\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      if (sheetData.length > 0) {\r\n        console.log(\"Sheet Data \", sheetData);\r\n        setFormattedData({ originalData: sheetData });\r\n        if (operationChoice !== \"5\" && operationChoice !== \"6\") {\r\n          await handleRefreshForCurrentOperation(operationChoice);\r\n          setTimeout(async () => {\r\n            console.log(\r\n              \"Applying automatic column mapping with:\",\r\n              mappedAttributes\r\n            );\r\n            console.log(\"operationChoice in  :\", operationChoice);\r\n            if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n              const { simplifiedMappings } = generateColumnMappings(\r\n                headers,\r\n                mandatoryAttributes,\r\n                mappedAttributes\r\n              );\r\n\r\n              console.log(\"Auto-generated mappings:\", simplifiedMappings);\r\n\r\n              if (Object.keys(simplifiedMappings).length > 0) {\r\n                const transformedData = transformSheetDataWithMappings(\r\n                  sheetData,\r\n                  simplifiedMappings,\r\n                  operationChoice,\r\n                  mappedAttributes,\r\n                  collabMapping // Add this parameter\r\n                );\r\n\r\n                setFormattedData(transformedData);\r\n                showSuccessToast(\r\n                  `Data automatically mapped with ${\r\n                    Object.keys(simplifiedMappings).length\r\n                  } columns`\r\n                );\r\n              }\r\n            }\r\n          }, 500);\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(MSG_FILE_VALIDATED_SUCCESS);\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(MSG_TEMPLATE_OPERATION_MISMATCH);\r\n        handleReset(true);\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n    setFormattedData(null);\r\n\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n    }\r\n  };\r\n\r\n  // ================ disconnecting Docs from Physical prodcut\r\n  const { handleDocDisconnectingMassupload, loading: isDisconnectUploading } =\r\n    useRemoveDocConnection();\r\n  // ================ disconnecting Docs from Physical prodcut\r\n  // =============== MEP MAss Upload Related ===============\r\n  console.log(\"Formateed Dtaa\", formattedData);\r\n  const { handleMEPMassupload, loading: isUploading } = useMEPMassUpload();\r\n  const handleClick = useCallback(() => {\r\n    if (operationChoice === \"5\") {\r\n      console.log(\"formattedData\", formattedData);\r\n      if (formattedData) handleMEPMassupload(formattedData?.originalData);\r\n    } else if (operationChoice === \"6\") {\r\n      if (formattedData)\r\n        handleDocDisconnectingMassupload(formattedData?.originalData);\r\n      // handleDocumentsDisconnect(specificationDocument,referenceDocument)\r\n    } else {\r\n      setModalShow(true);\r\n    }\r\n  }, [\r\n    operationChoice,\r\n    // createItems,\r\n    // updateItems,\r\n    // updateMassupload,\r\n    handleReset,\r\n  ]);\r\n  // =============== MEP MAss Upload Related ===============\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(true);\r\n  };\r\n\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled =\r\n    columnHeaders.length === 0 || errors.length > 0;\r\n\r\n  const handleConfirmSubmit = async () => {\r\n    try {\r\n      // Close the confirmation modal immediately\r\n      setModalShow(false);\r\n      setIsSubmitting(true);\r\n\r\n      if (!formattedData) {\r\n        showErrorToast(MSG_NO_DATA_TO_SUBMIT);\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const endpoint = API_ENDPOINTS[operationChoice];\r\n      if (!endpoint) {\r\n        showErrorToast(MSG_INVALID_OPERATION_TYPE);\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const { chunks, totalChunks, isDocumentPayload, documents } =\r\n        formattedData;\r\n      let successCount = 0;\r\n      let failureCount = 0;\r\n      let allResponses = [];\r\n      let hasErrors = false;\r\n\r\n      // For document payload (operation 3)\r\n      if (operationChoice === \"3\" && isDocumentPayload) {\r\n        try {\r\n          // Create document-specific chunks if needed\r\n          const docChunks = [];\r\n          for (let i = 0; i < documents.length; i += 1000) {\r\n            docChunks.push(documents.slice(i, i + 1000));\r\n          }\r\n\r\n          console.log(`Processing ${docChunks.length} document chunks`);\r\n\r\n          // Add user info if available (similar to other operations)\r\n          const userInfo = {\r\n            ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n            ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n            ...(securityContext ? { securityContext: securityContext } : {}),\r\n          };\r\n\r\n          for (let i = 0; i < docChunks.length; i++) {\r\n            console.log(\r\n              `Sending document chunk ${i + 1} of ${docChunks.length}`\r\n            );\r\n\r\n            const response = await api.post(endpoint, {\r\n              ...userInfo,\r\n              documents: docChunks[i],\r\n            });\r\n\r\n            console.log(`Document chunk ${i + 1} response:`, response);\r\n\r\n            if (response.data) {\r\n              if (response.data.success === true) {\r\n                successCount++;\r\n                if (Array.isArray(response.data.responses)) {\r\n                  allResponses = [...allResponses, ...response.data.responses];\r\n                }\r\n              } else {\r\n                hasErrors = true;\r\n                failureCount++;\r\n                console.error(\r\n                  `Document API returned success: false`,\r\n                  response.data\r\n                );\r\n              }\r\n            }\r\n\r\n            if (i % 5 === 0 || i === docChunks.length - 1) {\r\n              showSuccessToast(\r\n                `Processed ${i + 1} of ${docChunks.length} document chunks...`\r\n              );\r\n            }\r\n          }\r\n        } catch (error) {\r\n          hasErrors = true;\r\n          failureCount++;\r\n          console.error(\"Document upload failed:\", error);\r\n        }\r\n      } else {\r\n        // For operations 1, 2, and 4\r\n        // Create appropriate user info object based on operation type\r\n        const userInfo = {\r\n          // Include user information for operations 1 and 2\r\n          ...([\"1\", \"2\"].includes(operationChoice) && userDetails?.email\r\n            ? { email: userDetails.email }\r\n            : {}),\r\n          ...([\"1\", \"2\"].includes(operationChoice) && userDetails?.login\r\n            ? { userId: userDetails.login }\r\n            : {}),\r\n          ...([\"1\", \"2\"].includes(operationChoice) && securityContext\r\n            ? { securityContext: securityContext }\r\n            : {}),\r\n          // Add emailNotification flag only for operation 1\r\n          ...([\"1\", \"2\"].includes(operationChoice)\r\n            ? { emailNotification: false }\r\n            : {}),\r\n        };\r\n\r\n        // Check if this is a connectItemDocuments payload (operation 4)\r\n        const { isConnectItemDocumentsPayload, connectItemDocuments } =\r\n          formattedData;\r\n\r\n        if (operationChoice === \"4\" && isConnectItemDocumentsPayload) {\r\n          // User info for operation 4\r\n          const userInfo = {\r\n            ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n            ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n            ...(securityContext ? { securityContext: securityContext } : {}),\r\n          };\r\n\r\n          for (let i = 0; i < chunks.length; i++) {\r\n            try {\r\n              const chunk = chunks[i];\r\n\r\n              // Use connectItemDocuments as the key for the API payload\r\n              const response = await api.post(endpoint, {\r\n                ...userInfo,\r\n                connectItemDocuments: chunk,\r\n              });\r\n\r\n              console.log(`Chunk ${i + 1} response for operation 4:`, response);\r\n\r\n              // Process response data (same as other operations)\r\n              if (response.data) {\r\n                if (response.data.success === true) {\r\n                  successCount++;\r\n                  if (Array.isArray(response.data.responses)) {\r\n                    allResponses = [\r\n                      ...allResponses,\r\n                      ...response.data.responses,\r\n                    ];\r\n                  }\r\n                } else {\r\n                  hasErrors = true;\r\n                  failureCount++;\r\n                  console.error(\r\n                    `Operation 4 API returned success: false`,\r\n                    response.data\r\n                  );\r\n                }\r\n              }\r\n            } catch (error) {\r\n              hasErrors = true;\r\n              failureCount++;\r\n              console.error(`Chunk ${i + 1} failed for operation 4:`, error);\r\n            }\r\n          }\r\n        } else {\r\n          for (let i = 0; i < chunks.length; i++) {\r\n            try {\r\n              const chunk = chunks[i];\r\n\r\n              // For operation 2, validate that instanceAttributes exist in each item\r\n              if (operationChoice === \"2\") {\r\n                chunk.forEach((item, idx) => {\r\n                  if (!item.instanceAttributes) {\r\n                    item.instanceAttributes = {};\r\n                  }\r\n                });\r\n              }\r\n\r\n              const response = await api.post(endpoint, {\r\n                ...userInfo,\r\n                items: chunk,\r\n              });\r\n\r\n              console.log(`Chunk ${i + 1} response:`, response);\r\n\r\n              // Process response data\r\n              if (response.data) {\r\n                if (response.data.success === true) {\r\n                  successCount++;\r\n                  if (Array.isArray(response.data.responses)) {\r\n                    allResponses = [\r\n                      ...allResponses,\r\n                      ...response.data.responses,\r\n                    ];\r\n                  }\r\n                } else {\r\n                  hasErrors = true;\r\n                  failureCount++;\r\n                  console.error(\r\n                    `Operation ${operationChoice} API returned success: false`,\r\n                    response.data\r\n                  );\r\n                }\r\n              } else {\r\n                hasErrors = true;\r\n                failureCount++;\r\n                console.error(\"Empty response data received\");\r\n              }\r\n            } catch (error) {\r\n              hasErrors = true;\r\n              failureCount++;\r\n              console.error(\r\n                `Chunk ${i + 1} failed for operation ${operationChoice}:`,\r\n                error\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Show results\r\n      setApiResponse(allResponses);\r\n      console.log(\r\n        `Operation ${operationChoice} completed. All responses:`,\r\n        allResponses\r\n      );\r\n\r\n      if (!hasErrors && allResponses.length > 0) {\r\n        showSuccessToast(MSG_UPLOAD_SUCCESS);\r\n        setShowSuccessModal(true);\r\n      } else {\r\n        showErrorToast(MSG_UPLOAD_FAILED_CONTACT_ADMIN);\r\n        setShowSuccessModal(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      showErrorToast(`${MSG_UPLOAD_FAILED}${error.message || \"Unknown error\"}`);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // console.log(\"Errors in Massupload.jsx:\", errors);\r\n\r\n  const isFileUploadDisabled = !operationChoice;\r\n  console.log(\"operationChoice in Massupload\", operationChoice);\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container-fluid d-flex justify-content-center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <div\r\n          className=\"w-100\"\r\n          style={{\r\n            maxWidth: \"1200px\",\r\n            maxHeight: \"500px\",\r\n            minHeight: \"300px\",\r\n            minWidth: \"300px\",\r\n          }}\r\n        >\r\n          <Stack className=\"mt-3\" gap={4}>\r\n            <Stack direction=\"horizontal\" gap={5}>\r\n              <CustomSelect\r\n                selectedValue={operationChoice}\r\n                onChange={handleOperationChange}\r\n                size=\"lg\"\r\n                className=\"w-50\"\r\n                options={{\r\n                  defaultLabel: \"Choose Operations\",\r\n                  list: [\r\n                    { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                    { value: \"2\", label: \"Physical Product Structure\" },\r\n                    { value: \"3\", label: \"Document\" },\r\n                    { value: \"4\", label: \"Physical Product-Document\" },\r\n                    { value: \"5\", label: \"Create/Update MEP\" },\r\n                    { value: \"6\", label: \"Remove Doc-Parts Relationships\" },\r\n                  ],\r\n                }}\r\n              />\r\n              {operationChoice === \"3\" && (\r\n                <Form.Group controlId=\"formFileMultiple\">\r\n                  <Form.Control\r\n                    type=\"file\"\r\n                    multiple\r\n                    // Attach the ref to the file input\r\n                  />\r\n                </Form.Group>\r\n              )}\r\n              <div className=\"ms-auto\">\r\n                <CustomButton\r\n                  variant=\"link\"\r\n                  size=\"lg\"\r\n                  onClick={handleDownloadTemplate}\r\n                  text=\"Download Template\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n\r\n            <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n              <FileUpload\r\n                ref={fileUploaderRef}\r\n                fileTypes={[\"XLSX\"]}\r\n                multiple={false}\r\n                onUpload={handleFileUpload}\r\n                onReset={handleReset}\r\n                disabled={isFileUploadDisabled}\r\n                message={\r\n                  isFileUploadDisabled\r\n                    ? \"Please select an operation first\"\r\n                    : \"Drag & Drop your files here or Click to browse\"\r\n                }\r\n              />\r\n            </div>\r\n\r\n            {isValidating && <Loader />}\r\n\r\n            {/* Add this where you want the loader to appear */}\r\n            {/* {isSubmitting && <Loader />} */}\r\n\r\n            {/* Loader for MEP handlings */}\r\n            {/* {isUploading && <Loader />}  */}\r\n            {/* Loading for Disconnecting Docs */}\r\n            {/* {isDisconnectUploading && <Loader />} */}\r\n            {/* Loader for submitting, uploading, or disconnecting */}\r\n\r\n            {(isSubmitting || isUploading || isDisconnectUploading) && (\r\n              <Loader />\r\n            )}\r\n\r\n            <Stack direction=\"horizontal\" gap={2}>\r\n              {/* <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Background\"\r\n            className=\"size-increase\"\r\n          /> */}\r\n              <div className=\"ms-auto d-flex gap-5\">\r\n                {errors.length > 0 && (\r\n                  <CustomButton\r\n                    variant=\"danger\"\r\n                    onClick={() => setShowContentErrors(true)}\r\n                    text={`Content Errors (${errors.length})`}\r\n                  />\r\n                )}\r\n                {operationChoice === \"5\" || operationChoice === \"6\" ? null : (\r\n                  <CustomButton\r\n                    variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n                    onClick={handleOpenSpreadsheetModal}\r\n                    text=\"Manage Spreadsheet Columns\"\r\n                    disabled={manageSpreadsheetDisabled}\r\n                  />\r\n                )}\r\n\r\n                <CustomButton\r\n                  variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n                  disabled={submitDisabled}\r\n                  size=\"lg\"\r\n                  onClick={handleClick}\r\n                  text=\"Submit\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n      {operationChoice === \"5\" || operationChoice === \"6\" ? null : (\r\n        <ColumnMappingModal\r\n          show={showSpreadsheetModal}\r\n          onHide={() => setShowSpreadsheetModal(false)}\r\n          columnHeaders={columnHeaders}\r\n          mandatoryAttributes={mandatoryAttributes}\r\n          existingMappings={\r\n            formattedData?.mappings ? formattedData.mappings : {}\r\n          }\r\n          dropdownOptions={mappedAttributes?.dropdownOptions}\r\n          allNLSValues={mappedAttributes?.allNLSValues}\r\n          operationChoice={operationChoice}\r\n          onColumnsMapped={(mappings, finalMapping) => {\r\n            console.log(\"Column mappings received:\", mappings);\r\n\r\n            const columnMappings = mappings;\r\n\r\n            if (formattedData && formattedData.originalData) {\r\n              const transformedData = transformSheetDataWithMappings(\r\n                formattedData.originalData,\r\n                columnMappings,\r\n                operationChoice,\r\n                mappedAttributes,\r\n                collabMapping\r\n              );\r\n\r\n              setFormattedData(transformedData);\r\n              showSuccessToast(\r\n                `Data mapped successfully with ${\r\n                  Object.keys(mappings).length\r\n                } columns`\r\n              );\r\n            } else {\r\n              showErrorToast(MSG_NO_SHEET_DATA);\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n\r\n      <SuccessModal\r\n        show={showSuccessModal}\r\n        onHide={() => setShowSuccessModal(false)}\r\n        responseData={apiResponse || []}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { loadPlatformAPI } from \"./helpers\";\r\n\r\nexport default async function getUserDetails() {\r\n  try {\r\n    const PlatformAPI = await loadPlatformAPI();\r\n    const user = await PlatformAPI.getUser();\r\n    // console.log(\" User details retrieved successfully:\", user);\r\n    // console.log(\"User ID:\", user?.id);\r\n    // console.log(\"User name:\", user?.name);\r\n    // console.log(\"User email:\", user?.email);\r\n    // console.log(\"User roles:\", user?.roles);\r\n    // console.log(\"User preferences:\", user?.preferences);\r\n\r\n    return user;\r\n  } catch (error) {\r\n    console.error(\" Error getting user details:\", error);\r\n    return null; // Or throw the error, depending on how you want to handle it\r\n  }\r\n}\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    progress = undefined,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      progress,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n// New function that wraps useToast and adds progress\r\nconst useToastWithProgress = () => {\r\n  const { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast } = useToast();\r\n\r\n  const showToastWithProgress = (message, options = {}) => {\r\n    showToast({ message, progress: 1, ...options }); // Add progress property\r\n  };\r\n\r\n  const showSuccessToastWithProgress = (message, options = {}) => {\r\n    showSuccessToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showErrorToastWithProgress = (message, options = {}) => {\r\n    showErrorToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showInfoToastWithProgress = (message, options = {}) => {\r\n    showInfoToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showWarningToastWithProgress = (message, options = {}) => {\r\n    showWarningToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  return {\r\n    showToastWithProgress,\r\n    showSuccessToastWithProgress,\r\n    showErrorToastWithProgress,\r\n    showInfoToastWithProgress,\r\n    showWarningToastWithProgress,\r\n  };\r\n};\r\n\r\n// export { useToast, useToastWithProgress };\r\nexport default useToast;\r\nexport { useToastWithProgress };","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n"],"names":["forwardRef","_ref","ref","fileTypes","multiple","onUpload","onReset","disabled","message","files","setFiles","useState","showErrorToast","useToast","useImperativeHandle","handleClearFiles","skipSuccessToast","arguments","length","undefined","handleClearFile","current","_jsxs","className","concat","children","_jsx","FileUploader","handleChange","selectedFiles","fileArray","name","types","hoverTitle","map","file","index","style","display","alignItems","onClick","background","border","cursor","color","opacity","validateFile","collabSpaceTitles","selectedOperation","Promise","resolve","reject","_config$MassUpload$ma","_config$MassUpload$ma2","console","log","operation","fileName","matchedOperation","expectedHeaders","config","fileHeaders","mandatoryAttributes","errors","headers","Array","isArray","error","reader","FileReader","readAsBinaryString","onload","async","workbook","XLSX","e","target","result","type","dense","cellDates","cellNF","cellText","sheetName","SheetNames","worksheet","Sheets","uploadedHeaders","sheet_to_json","header","every","includes","isTemplateMismatch","allSheetData","defval","chunks","data","chunkSize","i","push","slice","processDataInChunks","validationErrors","invalidPrefixes","errorStats","mandatory","collabSpace","einPrefix","docPrefix","lowerCaseCollabSpaceTitles","title","toLowerCase","chunkIndex","chunk","progress","Math","round","forEach","row","indexInChunk","globalRowIndex","field","toString","trim","_row$PhysicalProduct","_row$Dimension","_row$CollaborativeSp","userCollabSpace","firstRow","levelValue","levelStr","String","Number","valueToValidate","columnName","_row$columnName","some","prefix","startsWith","_row$columnName2","_row$columnName3","quantityValue","numQuantity","isNaN","processedRows","totalRows","currentErrors","collaborativeSpace","documentPrefix","total","byType","sheetData","onerror","selectedValue","options","onChange","size","Form","Select","value","defaultLabel","list","option","attrIndex","label","show","onHide","onConfirm","CustomModal","footerButtons","variant","ReusableAlert","columnHeaders","handleSelectChange","dropdownOptions","Table","bordered","column","currentMapping","filteredOptions","CustomSelect","uiLabel","selectedMappings","setSelectedMappings","allNLSValues","operationChoice","hasMatchingNLS","warn","normalizedHeader","nls","StaticTable","hasNLS","isMandatory","shouldBeDisabled","attr","columnHeader","backendName","find","opt","getBackendNameForUILabel","prev","_objectSpread","mappedAttribute","currentColumnHeader","selectedValues","Object","entries","filter","_ref2","_ref3","_","mapping","groupedOptions","ebomAttributes","isEBOMAttribute","group","isAlreadySelected","matchesAnyNLS","partAttributes","isNotEBOMAttribute","isNotSystemAttribute","allowedBosAttributes","prepareDropdownOptions","onColumnsMapped","existingMappings","useEffect","keys","errorMessage","_Fragment","handleOkClick","completeMappings","simplifiedMappings","specialMappings","userMapping","autoMapped","existingMapping","isSpecialColumn","matchingOption","getBackendNameForHeader","finalMapping","columnMappings","totalColumns","groupEnd","MappedList","initialOperationChoice","mappedAttributes","setMappedAttributes","setOperationChoice","ENOVIA_BASE_URL","process","fetchColumnMapping","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","effectiveOperation","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","Error","member","objectId","id","attributeResponse","busIDs","groupData","results","item","systemAttributes","groupNLS","controlCenterAttributes","bosAttributes","attributeGroups","apiNlsValues","systemNlsValues","ebomNlsValues","bosNlsValues","Set","filteredGroupData","mergeAttributes","relevantAttributes","deploymentExtension","mappedData","attributesByGroup","groups","refreshMapping","initialOperationType","documentData","setDocumentData","operationType","setOperationType","API_URL","fetchDocumentData","_documentInfo$attribu","body","preferedType","typeName","subTypes","runUXBL","metrics","UXName","client_app_domain","client_app_name","response","status","documentInfo","JSON","stringify","extensionAttributes","attributes","DocumentsAttributes","hardcodedNlsValues","apiOptions","fullName","nameParts","split","extractedName","hardcodedOptions","combinedMappedData","currentPage","totalItems","itemsPerPage","onPageChange","totalPages","ceil","start","end","min","from","responseData","setCurrentPage","columnWidths","setColumnWidths","copiedCell","setCopiedCell","cache","useMemo","CellMeasurerCache","fixedWidth","defaultHeight","flattenedData","flatMap","flatten","columns","allKeys","key","add","formatHeaderText","replace","word","toUpperCase","charAt","join","width","tooltip","paginatedData","clearAll","handleCopyCellValue","rowIndex","colIndex","buttonElement","textToCopy","navigator","clipboard","writeText","then","classList","setTimeout","remove","catch","err","rowRenderer","parent","CellMeasurer","columnIndex","getItemValue","lowerKey","k","displayValue","isCopied","statusValue","statusClass","position","stopPropagation","currentTarget","xmlns","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x","y","rx","ry","d","CustomButton","handleExport","handleExportExcel","text","idx","ResizableBox","axis","resizeHandles","handle","right","top","onResizeStop","handleResize","newWidth","minConstraints","maxConstraints","minWidth","maxWidth","justifyContent","userSelect","paddingRight","boxSizing","AutoSizer","List","rowCount","rowHeight","deferredMeasurementCache","overscanRowCount","Pagination","newPage","useMEPMassUpload","loading","setLoading","showSuccessToast","ENOVIA_SOURCE_BASE_URL","REACT_APP_ENOVIA_SOURCING_BASE_URL","handleMEPMassupload","array","chunkArray","createMEPItems","_response$output","_response$output$memb","_response$output2","_response$output2$mem","searchStr","Title","encodeURIComponent","match","state","_checkMepResponse$out","_checkMepResponse$out2","checkMepResponse","ValidateMep","_checkMepResponse$out3","memberData","manufacturer","uploadBody","partSource","partSourceURL","manufacturerPartNumber","cestamp","createBody","items","isManufacturable","description","Description","_response$output3","_response$output3$mem","_response$output4","_response$output4$mem","_response$output5","_response$output5$mem","_extensionresponse$ou","_extensionresponse$ou2","extensionBody","engItem","source","identifier","relativePath","manufacturerCompany","extensionresponse","getAttachedDocumentIds","baseUrl","productId","parentRelName","docName","_response$output$data","url","filteredData","_item$dataelements","dataelements","buildDisconnectPayload","docIds","parentId","docType","updateAction","relateddata","parents","documentType","disconnectDocuments","docs","res","useRemoveDocConnection","showWarningToast","handleDocDisconnectingMassupload","specDocs","refDocs","nonExistingProducts","revisionNotMatch","notInWorkProducts","obsoleteProdcuts","disconnectPayload","searchUrl","revision","specIds","refIds","payload","disconnectResults","rowError","mainError","API_ENDPOINTS","transformSheetDataWithMappings","mappedAttributesData","collabMapping","excludedColumns","documentItems","rootData","backendFieldName","attribute","collabspaceTitle","CHUNK_SIZE","totalChunks","originalData","mappings","isDocumentPayload","documents","connectItemDocuments","PartType","PartNumber","PartRevision","DocumentType","DocumentName","DocumentRevision","RelationshipType","BOSAttributes","normalizeFieldName","rootFieldMapping","parttype","part_type","einnumber","ein_number","partnumber","part_number","partrevision","part_revision","documenttype","document_type","documentname","document_name","documentrevision","document_revision","relationshiptype","relationship_type","uiLabelBackendName","normalizedName","fieldName","bosSpecialAttrs","originalAttr","rootKey","isConnectItemDocumentsPayload","attributeGroupMap","getPathForAttribute","MBOM_GROUP_KEY","transformedItems","transformedRow","instanceAttributes","customerAttributes","productTypeColumn","productType","partNumber","_ref4","_mappedData$find","Type","path","pathParts","part","generateColumnMappings","systemAttributeMappings","isSpecial","systemAttrKey","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","showInfoToast","isValidating","setIsValidating","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","useRef","formattedData","setFormattedData","userDetails","setUserDetails","securityContext","setSecurityContext","collabNames","setCollabNames","setCollabMapping","isSubmitting","setIsSubmitting","apiResponse","setApiResponse","showSuccessModal","setShowSuccessModal","productMappedAttributes","refreshProductMapping","useMassUpload","documentMappedAttributes","refreshDocumentMapping","useFetchDocumentData","getActiveData","handleRefreshForCurrentOperation","globalCollabSpaceTitles","globalCollabSpaceNames","userData","PlatformAPI","loadPlatformAPI","getUser","getUserDetails","fetchUserDetails","window","widget","getValue","securityContextValue","handleReset","selectElement","document","querySelector","MSG_WIDGET_RESET_SUCCESS","isDisconnectUploading","isUploading","handleClick","useCallback","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","minHeight","maxHeight","Stack","gap","direction","MSG_OPERATION_CHNAGED","Group","controlId","Control","handleDownloadTemplate","MSG_DROPDOWN_NOT_SELECTED","open","downloadTemplate","FileUpload","validationResult","transformedData","MSG_FILE_VALIDATED_SUCCESS","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","MSG_TEMPLATE_OPERATION_MISMATCH","Loader","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","MSG_NO_DATA_TO_SUBMIT","endpoint","MSG_INVALID_OPERATION_TYPE","successCount","failureCount","allResponses","hasErrors","docChunks","userInfo","email","login","userId","api","post","success","responses","emailNotification","MSG_UPLOAD_SUCCESS","MSG_UPLOAD_FAILED_CONTACT_ADMIN","MSG_UPLOAD_FAILED","ColumnMappingModal","MSG_NO_SHEET_DATA","SuccessModal","root","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","securityContext1","WAFData","loadWAFData","csrfURL","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","csrfValue","securityContextHeader","showToast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","otherOptions","_objectWithoutProperties","_excluded","toast","useToastWithProgress","showToastWithProgress","showSuccessToastWithProgress","showErrorToastWithProgress","showInfoToastWithProgress","showWarningToastWithProgress","processedErrors","errorGroups","reduce","rowMatch","columnMatch","errorMsg","rowNumber","values","sort","a","b","ErrorPopup","imageSrc","props","Button","src","alt","marginRight","Alert","Modal","centered","Header","closeButton","Body","Footer","btn"],"sourceRoot":""}