{"version":3,"file":"static/js/449.325cf6cf.chunk.js","mappings":"uTAQA,MA8EA,EA9EwBA,KACtB,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,MACjB,iBAAEC,EAAgB,eAAEC,IAAmBC,EAAAA,EAAAA,MACtCC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GAEvCC,QAAQC,IAAI,kCAsEZ,OA7DAC,EAAAA,EAAAA,WAAU,KACR,IAAKC,OAAOC,OAAQ,OAqDpBJ,QAAQK,MAAM,+DACdF,OAAOC,OAAOE,SAAS,YAlDLC,UAAa,IAADC,EAAAC,EAC5B,MAAMJ,GAAQ,IAAIK,OAAQC,MAAMC,MAAM,MAGhCC,EAAqBC,eAAeC,QAAQ,sBAElD,GAlB4BV,IACvBA,EAAMW,KACVC,GACCA,EAAKC,SAAS,uBAAyBD,EAAKC,SAAS,kBAenDC,CAAuBd,KAAWQ,EAIpC,YAHAb,QAAQoB,KACN,kFAOJN,eAAeO,WAAW,sBAM1BvB,GAAW,GAEX,MACMwB,EADcC,EAAAA,EAAMC,WAEZC,cAAcC,kBAAkBC,mBAE9C,GAAsB,OAAjBL,QAAiB,IAAjBA,GAAuB,QAANd,EAAjBc,EAAmBM,YAAI,IAAApB,GAAO,QAAPC,EAAvBD,EAAyBqB,aAAK,IAAApB,IAA9BA,EAAgCqB,OAMnC,OALA9B,QAAQ+B,MACN,6EACAT,QAEFxB,GAAW,GAIb,UAIQkC,EAAAA,EAAAA,GAAkBV,EAAkBM,KAAKC,MAAOrC,EACxD,CAAE,MAAOuC,GACP/B,QAAQ+B,MAAM,iDAA6CA,GAC3DpC,EAAesC,EAAAA,GACjB,CAAC,QACCnC,GAAW,GACXJ,EAAiBwC,EAAAA,GACnB,KAOD,IAEIrC,GAAUsC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IAAK,M,yFC/ExB,MAAMC,EAAgBC,IAKtB,IALuB,OAC5BC,EAAS,GAAE,OACXC,EAAM,aACNC,EAAY,kBACZC,GACDJ,EAEC,OADAtC,QAAQC,IAAI,iCAAkCsC,GACnC,OAANA,QAAM,IAANA,GAAAA,EAAQT,QAGXK,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,CAAAC,SACGL,EAAOM,IAAKC,IACXC,EAAAA,EAAAA,MAAA,QAEEC,MAAO,CACLC,YAAa,MACbC,QAAS,cACTC,WAAY,SACZC,MAAON,EAAMM,OAAS,QACtBC,WAAY,QACZT,SAAA,CAEDE,EAAMQ,UACNb,GAAyC,YAAzBK,EAAMS,iBACrBpB,EAAAA,EAAAA,KAACqB,EAAAA,IAAc,CACbC,KAAM,GACNT,MAAO,CAAEU,OAAQ,UAAWN,MAAO,MAAOO,WAAY,OACtDC,QAASA,IAAMlB,EAAkBF,EAAQM,EAAMe,aAd9Cf,EAAMe,YANS,OA0DjBC,EAAeA,CAACC,EAAWC,EAAMC,KAC5CjE,QAAQC,IAAI,qBAAqBgE,GAE5BF,EAEEA,EAAUlB,IAAKjB,GACP,kBAAToC,EACK,CACLE,UAAc,OAAJtC,QAAI,IAAJA,OAAI,EAAJA,EAAMuC,YAAa,MAC7BC,OAAW,OAAJxC,QAAI,IAAJA,OAAI,EAAJA,EAAMyC,aAAc,GAC3BC,QAAY,OAAJ1C,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,SAAU,QAG1BtE,QAAQC,IAAI,0BAA8B,OAAJ2B,QAAI,IAAJA,OAAI,EAAJA,EAAM2C,SAAUN,EAAOO,QAAS,OAE/D,CACLJ,OAAW,OAAJxC,QAAI,IAAJA,OAAI,EAAJA,EAAM6C,QAAS,MACtBC,KAAS,OAAJ9C,QAAI,IAAJA,OAAI,EAAJA,EAAM8C,MAAO,IAClBC,QAAY,OAAJ/C,QAAI,IAAJA,OAAI,EAAJA,EAAMgD,cAAe,UAC7B,cAAkB,OAAJhD,QAAI,IAAJA,OAAI,EAAJA,EAAMiD,YAAa,MACjC,cAAkB,OAAJjD,QAAI,IAAJA,OAAI,EAAJA,EAAMkD,YAAa,MACjCP,QAAY,OAAJ3C,QAAI,IAAJA,OAAI,EAAJA,EAAM2C,SAAUN,EAAOO,QAAS,MACxC,iBAAqB,OAAJ5C,QAAI,IAAJA,OAAI,EAAJA,EAAMmD,eAAgBd,EAAOe,UAAW,MACzD,kBAAmBpD,EAAKqD,gBAAkB,MAC1C,aAAc,SACd,aAAc,MACd,cAAc,EACdC,KAAMtD,EAAKuD,KAAO,OAAS,MAC3B,aAAc,MAzBG,IA+EZC,EAAgB,CAC3B,CAAEC,YAAa,kBAAmBC,OAAQ,oB,0CCzI5C,MA8KA,EA9KwChD,IAYjC,IAZkC,WACvCiD,EAAU,WACVC,EAAU,OACVC,EAAM,SACNC,EAAQ,WACRC,EAAU,aACVC,EAAY,OACZpB,EAAM,MACNqB,EAAK,KACL7B,EAAI,QACJ8B,EAAO,OACP7B,GACD3B,EACC,MAAM,iBAAEyD,EAAgB,iBAAErG,IAAqBE,EAAAA,EAAAA,KACzCoG,EAAkBC,GACE,aAAjBA,GAAgD,gBAAjBA,GAAmD,cAAjBA,GAEnEC,EAAeC,IAAoBpG,EAAAA,EAAAA,WAAS,GAC7CqG,GAAoBC,EAAAA,EAAAA,UA6B1BrG,QAAQC,IAAI,uBAAwB0F,GAiCpC,OACE5C,EAAAA,EAAAA,MAAAJ,EAAAA,SAAA,CAAAC,SAAA,EACEG,EAAAA,EAAAA,MAAA,OAAKuD,UAAU,sBAAqB1D,SAAA,EAChCkD,IACA3D,EAAAA,EAAAA,KAAA,UACEmE,UAAU,qCACV1C,QAASA,KACHoC,EAAeH,GACjBE,EAAiBQ,EAAAA,IAIN,kBAATvC,GAEOQ,EADT2B,GAAiB,GAIjBJ,EADmB,aAAVF,EACQW,EAAAA,GAEAC,EAAAA,KAEnB7D,SACH,cAIFkD,IACC3D,EAAAA,EAAAA,KAAA,UACEmE,UAAU,qCACV1C,QAASA,KACO,aAAViC,GAAkC,gBAAVA,GAAqC,cAAVA,EACrDE,EAAiBQ,EAAAA,IAEjBJ,GAAiB,IAEnBvD,SACH,sBAKO,kBAAToB,IACC7B,EAAAA,EAAAA,KAAA,UACEmE,UAAU,qCACV1C,QAxGc8C,KAClBV,EAAeH,GACjBE,EAAiBQ,EAAAA,IAIfd,IAAoB,kBAATzB,GAA4BQ,GACzCiB,IAEAM,EADmB,aAAVF,EACQc,EAAAA,GAEAC,EAAAA,KA6FchE,SAC1B,UAIDkD,IACF3D,EAAAA,EAAAA,KAAA,UACEmE,UAAU,oCACV1C,QA/FaiD,KACfb,EAAeH,GACjBE,EAAiBQ,EAAAA,IAGfb,GACFA,KAyF0B9C,SACvB,eAMHT,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CACVC,KAAMb,EACNc,OAAQA,IAAMb,GAAiB,GAC/B1B,MAAM,kBACNwC,cAAe,CACb,CACEC,MAAO,MACPC,QAAS,UACTvD,QAASA,KAAO,IAADwD,EACY,QAAzBA,EAAAhB,EAAkBiB,eAAO,IAAAD,GAAzBA,EAA2BE,WAC3BnB,GAAiB,KAGrB,CACEe,MAAO,QACPC,QAAS,SACTvD,QAASA,IAAMuC,GAAiB,KAElCvD,UAEFT,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,aAAY1D,UACzBT,EAAAA,EAAAA,KAACoF,EAAAA,EAAc,CACbC,IAAKpB,EACLxE,KAAM+D,EACN8B,QAAS7B,EACTpB,OAAQA,EACRkD,UApHU9F,IAElB,GADA5B,QAAQC,IAAI2B,GACC,kBAAToC,EACEpC,EAAKE,OAAS,IAChByD,EAAW3D,GACX4D,EAAW5D,SAGb,GAAIA,EAAKE,OAAS,EAAG,CACnB,MAAM6F,EAAW/F,EAAKiB,IAAK4B,IAAK,CAC9BA,MAAOA,EACPC,IAAK,IACLC,OAAQ,UACR,aAAc,MACd,aAAc,MACdJ,OAAQN,EAAOO,OACf,gBAAiBP,EAAOe,SACxB,kBAAmB,MACnB,aAAc,SACd,aAAc,MACd,aAAc,QACdE,KAAM,MACN,aAAc,MAEhBK,EAAWoC,GAEXnC,EAAW5D,EACb,GA0FMiE,MAAOA,Y,wEC3KnB,MA4HA,EA5H6BvD,IAOtB,IAPuB,sBAC5BsF,EAAqB,aACrBC,EAAY,oBACZC,EAAmB,aACnBC,EAAY,uBACZC,EAAsB,YACtBC,GACD3F,EACC,MAAM,WAAE9C,IAAeC,EAAAA,EAAAA,MACjB,cAAEyI,IAAkBC,EAAAA,EAAAA,KAyC1B,OACEhG,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,CAAAC,UACEG,EAAAA,EAAAA,MAAA,OAAKuD,UAAU,2BAA0B1D,SAAA,EACvCT,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJpF,MAAO,CAAEqF,MAAO,OAAQC,OAAQ,QAChCC,IAAI,+DACJC,IAAI,eACJlC,UAAU,iBAEZnE,EAAAA,EAAAA,KAAA,QAAMmE,UAAU,qBAAoB1D,SAAC,mBACrCG,EAAAA,EAAAA,MAAA,OAAKuD,UAAU,oBAAmB1D,SAAA,EAChCT,EAAAA,EAAAA,KAAA,MAAImE,UAAU,aACdnE,EAAAA,EAAAA,KAAA,QAAMmE,UAAU,eAAc1D,SAAC,QAC/BT,EAAAA,EAAAA,KAAA,MAAImE,UAAU,gBAEhBnE,EAAAA,EAAAA,KAACsG,EAAAA,EAAW,CAACC,SArDGC,IAmCpBT,EAAcS,EAlCK,CACjBlE,MAAO,SACPmE,KAAM,GACNC,KAAM,UACNC,sBAAsB,EACtBC,QACE,+HACFC,cAAc,EACdC,UAAU,EACVC,kBAAkB,EAClBC,0BAA0B,EAC1BC,qBAAsB,GACtBC,kBAAmB,YAGQC,IAC3BtJ,QAAQC,IAAI,oBAAqBqJ,GACjCtJ,QAAQC,IAAI,kCAAmCqJ,EAAgB,GAAGC,IAEhED,GACAA,EAAgBxH,OAAS,GACzBwH,EAAgB,GAAGC,GAEnB/J,EAAW,CACT,CACEgK,SAAUF,EAAgB,GAAGC,GAC7BE,WAAYH,EAAgB,GAAG,sBAInCtJ,QAAQoB,KAAK,+CAuBbe,EAAAA,EAAAA,KAAA,OAAKuH,MAAM,OAAM9G,UACfG,EAAAA,EAAAA,MAAA,OAAK2G,MAAM,6BAA4B9G,SAAA,EACrCT,EAAAA,EAAAA,KAAA,OAAKuH,MAAM,yBAAwB9G,UACjCT,EAAAA,EAAAA,KAACwH,EAAAA,EAAM,CACLxC,QAAQ,eACRvD,QAASA,KACP,MAAMgG,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KACH,wFACFH,EAAKI,SAAW,iCAChBJ,EAAKK,SACLrH,SACH,yBAIHT,EAAAA,EAAAA,KAAA,OAAKuH,MAAM,yBAAwB9G,UACjCT,EAAAA,EAAAA,KAAC+H,EAAAA,EAAKC,MAAK,CAACC,UAAU,mBAAkBxH,UACtCT,EAAAA,EAAAA,KAAC+H,EAAAA,EAAKG,QAAO,CACXrG,KAAK,OACLsG,UAAQ,EACRC,SAAU3C,EACV4C,SAAU1C,EACVN,IAAKK,SAIX1F,EAAAA,EAAAA,KAAA,OAAKuH,MAAM,yBAAwB9G,UACjCT,EAAAA,EAAAA,KAACwH,EAAAA,EAAM,CAACxC,QAAQ,iBAAiBvD,QAASqE,EAAYrF,UACpDT,EAAAA,EAAAA,KAACsI,EAAAA,EAAe,CAACC,KAAMC,EAAAA,WAG3BxI,EAAAA,EAAAA,KAAA,OAAKuH,MAAM,yBAAwB9G,UACjCT,EAAAA,EAAAA,KAAA,OACEa,MAAO,CACLE,QAAS,eACTQ,OAAQsE,EAAyB,cAAgB,WACjDpF,UAEFT,EAAAA,EAAAA,KAACwH,EAAAA,EACC,CACAxC,QACEa,EAAyB,YAAc,kBAEzCpE,QAASmE,EACTyC,SAAUxC,EAAwBpF,SACnC,2C,sDChHjB,MAgFagI,EAAyBrK,UACpC,MAKMsK,QAtFUtK,eAChBuK,GAII,IAHJC,EAAIC,UAAAlJ,OAAA,QAAAmJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,KACPE,EAAMF,UAAAlJ,OAAA,QAAAmJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,MAGThL,QAAQC,IAAI,gBAAiB6K,GAC7B9K,QAAQC,IAAI,cACZD,QAAQC,IAAI,gBAAiBkL,KAAKC,UAAUL,EAAM,KAAM,IAExD,IACE,MAAMF,QAAiBQ,EAAAA,EAAAA,GAAM,CAC3BP,MACAI,SACAI,QAAS,CACP,eAAgB,oBAElB1J,KAAMmJ,IAIR,OADA/K,QAAQC,IAAI,qBAAsB4K,EAASjJ,MACpCiJ,EAASjJ,IAClB,CAAE,MAAOG,GAEP,MADA/B,QAAQ+B,MAAM,kBAAmBA,GAC3BA,CACR,CACF,CA4DyBwJ,CAJrB,+EAMAR,EACA,QAGF,OADA/K,QAAQC,IAAI,6BAA8BkL,KAAKC,UAAUP,IAClDA,GAoIIW,EAAyBjL,MACpCkL,EACAC,EACAC,EACA1D,KAEA,IAEE,MAAM2D,QAAyBC,EAAAA,EAAAA,KACzBC,GAASC,EAAAA,EAAAA,GAAA,CACb,eAAgB,oBACbH,GAEL,IAAII,EAAc7L,OAAOC,OAAO6L,SAAS,eACzCjM,QAAQC,IAAI,0BAA2B+L,GACvC,MAAME,EAAmBF,EAAYpL,MAAM,KAC3CZ,QAAQC,IAAI,mBAAoBiM,GAChC,MAAMC,EAAcD,EAAiB,GACrClM,QAAQC,IAAI,gBAAiBkM,GAC7B,MAAMC,EAAcF,EAAiB,GAErClM,QAAQC,IAAI,gBAAiBmM,GAE7B,MAAMC,QAAsBC,EAAAA,EAAAA,GAAa,CAACF,GAAcN,EAAW,IACnE9L,QAAQC,IAAI,yBAA0BoM,GAEtC,MAAME,OA9N+BhM,OACvCiM,EACAH,EACAF,EACAC,KAEA,MAAMvK,EAAQ,GACR4K,EAAoB,IAAIC,IAE9B,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAU1K,OAAQ6K,IAAK,CACzC,MAAMC,EAAMJ,EAAUG,GACtB,GAAIC,EAAI9K,QAAU,GAAK8K,EAAI,IAAMA,EAAI,GAAI,CACvC,MAAMC,EAAWD,EAAI,GAAGE,WAAWC,OAC7BC,EAAaJ,EAAI,GAAGE,WAAW5L,SAAS,KAC1C0L,EAAI,GACDE,WACAlM,MAAM,KACNiC,IAAKoK,GAAMA,EAAEF,QAChB,CAACH,EAAI,GAAGE,WAAWC,QACvBlL,EAAMqL,KAAK,CACTC,KAAMN,EACNtK,OAAQyK,IAEVA,EAAWI,QAAStK,GAAU2J,EAAkBY,IAAIvK,GACtD,CACF,CAEA,MAAMwK,EAAe,GAcrB,OAbAb,EAAkBW,QAASG,IACzB,MAAMC,EAAenB,EAAcoB,KAAM3K,GACfA,EAAM2B,MAAMiJ,QAAQ,YAAa,MAC9BH,GAAczK,EAAM2B,QAAU8I,GAEvDC,GACFF,EAAaJ,KAAK,CAChB5J,UAAWkK,EAAa/I,MAAMiJ,QAAQ,YAAa,IACnD7J,QAAS2J,EAAajE,OAKrB,CACLoE,QAAS,iBACTC,eAAgBzB,EAChB0B,cAAezB,EACf0B,QAAS,WACTC,MAAOlM,EACPmM,aAAcV,IA+KoBW,CAChCxC,EACAY,EACAF,EACAC,GAEFpM,QAAQC,IACN,yDACAkL,KAAKC,UAAUmB,EAAqB,KAAM,IAI5C,MAAM1B,QAAiBD,EACrB2B,GAEFvM,QAAQC,IAAI,0DAA2D4K,GAGvE,MAAMrG,EAAiB,OAARqG,QAAQ,IAARA,OAAQ,EAARA,EAAUrG,OAEzBkH,GACA3I,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEE,QAAS,OAAQC,WAAY,UAAWP,SAAA,EACtDG,EAAAA,EAAAA,MAAA,QAAAH,SAAA,CAAM,iDACyCT,EAAAA,EAAAA,KAAA,UAAAS,SAAS4B,QAExDrC,EAAAA,EAAAA,KAAA,UACEyB,QAAUsK,IACRA,EAAMC,kBACNC,UAAUC,UAAUC,UAAU9J,IAEhCxB,MAAO,CACLuL,WAAY,OACZC,OAAQ,OACR9K,OAAQ,UACRC,WAAY,MACZP,MAAO,QAETqB,MAAM,eAAc7B,UAEpBT,EAAAA,EAAAA,KAACsM,EAAAA,IAAS,CAAChL,KAAM,WAInBwE,GAEF,CAAE,MAAOlG,GACP/B,QAAQ+B,MAAM,mCAAoCA,GAClD4J,EAA2B,uDAC7B,G,4CC2zBF,EApjCwB+C,KACtB,MAAM,6BAAEhD,EAA4B,2BAAEC,IACpCgD,EAAAA,EAAAA,MACKC,EAAeC,IAAoB9O,EAAAA,EAAAA,WAAS,IAC5C0L,EAAeqD,IAAoB/O,EAAAA,EAAAA,UAAS,OAC5CgP,EAAiBC,IAAsBjP,EAAAA,EAAAA,WAAS,IAChDkP,EAAkBC,IAAuBnP,EAAAA,EAAAA,UAAS,KACnD,wBAAEoP,EAAuB,QAAEtP,IAAYJ,EAAAA,EAAAA,MACtC2P,EAAUC,IAAetP,EAAAA,EAAAA,UAAS,IAClCgE,EAAWuL,IAAgBvP,EAAAA,EAAAA,UAAS,KACpCwP,EAAeC,IAAoBzP,EAAAA,EAAAA,UAAS,KAC5C0P,EAAeC,IAAoB3P,EAAAA,EAAAA,UAAS,OAC5C4P,EAAYC,IAAiB7P,EAAAA,EAAAA,UAAS,KACtC8P,EAAoBC,IAAyB/P,EAAAA,EAAAA,UAAS,KACtD+H,EAAqBiI,IAA0BhQ,EAAAA,EAAAA,WAAS,IACxDiI,GAAwBgI,KAA6BjQ,EAAAA,EAAAA,WAAS,IAC/D,WAAEP,KAAeC,EAAAA,EAAAA,MAGhBwQ,GAAgBC,KAAqBnQ,EAAAA,EAAAA,WAAS,IAC9CoQ,GAAcC,KAAmBrQ,EAAAA,EAAAA,WAAS,IAC1CsQ,GAAqBC,KAA0BvQ,EAAAA,EAAAA,WAAS,IACxD0C,GAAc8N,KAAmBxQ,EAAAA,EAAAA,WAAS,GAC3CyQ,IAAWC,EAAAA,EAAAA,OACX,iBAAE/Q,GAAgB,eAAEC,KAAmBC,EAAAA,EAAAA,KAC7C,IAAI8Q,GAAmBvQ,OAAOC,OAAO6L,SAAS,eAC9CjM,QAAQC,IAAI,wBAAyByQ,IAErC,MAAM7I,IAAexB,EAAAA,EAAAA,QAAO,MAgKtB3D,IAAoBiO,EAAAA,EAAAA,aACxB,CAACnO,EAAQoO,KACPd,EAAuB/L,GACrBA,EAAUlB,IAAKgO,GACbA,EAAKvM,SAAW9B,GAAMuJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEb8E,GAAI,IACPxM,WAAYwM,EAAKxM,WAAWxB,IAAKC,GAC/BA,EAAMe,UAAY+M,GAAO7E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEhBjJ,GAAK,IACRM,MAAuB,QAAhBN,EAAMM,MAAkB,QAAU,QAE3CN,KAGR+N,KAIV,CAACf,IAyKGgB,GAAoB/M,IACxB,MAAMgN,EAAYhN,EAAUlB,IAAK+J,IAAG,CAClCC,SAAUD,EAAI1I,SACd8M,UAAWpE,EAAIxI,SAGjB,OADApE,QAAQC,IAAI,wBAAyB8Q,GAC9BA,GAGT/Q,QAAQC,IAAI,2BAA4B8D,GACxC,MAAMkN,IAAoBC,EAAAA,EAAAA,IACvBrL,GAAUA,EAAMpE,cAAcwP,mBAG3BvP,IAAoBwP,EAAAA,EAAAA,IACvBrL,GAAUA,EAAMpE,cAAcC,mBAEjC1B,QAAQC,IAAI,oBAAqByB,IAIjC,MAAMyP,IAAgBD,EAAAA,EAAAA,IACnBrL,GAAUA,EAAMpE,cAAc2P,oBAAoBD,eAErDnR,QAAQC,IAAI,2BAA4BkR,IAExC,MAAME,IAAcH,EAAAA,EAAAA,IACjBrL,GAAUA,EAAMpE,cAAc2P,oBAAoBE,aAErDtR,QAAQC,IAAI,0BAA2BoR,IACvC,MAAMvF,IAAYoF,EAAAA,EAAAA,IACfrL,GAAUA,EAAMpE,cAAc2P,oBAAoBG,WAErDvR,QAAQC,IAAI,yBAA0B6L,IAEtC,MAAMhG,IAAUoL,EAAAA,EAAAA,IACbrL,GAAUA,EAAMpE,cAAc2P,oBAAoBI,WAErDxR,QAAQC,IAAI,oBAAqB6F,IACjC,MAAM2L,IAAuBP,EAAAA,EAAAA,IAC1BrL,GAAUA,EAAMpE,cAAcgQ,sBAEjCzR,QAAQC,IAAI,yBAA0BwR,IACtC,MAAMC,IAAkBR,EAAAA,EAAAA,IACrBrL,GAAUA,EAAMpE,cAAckQ,gBAAgBD,iBAEjD1R,QAAQC,IAAI,wBAAyByR,IAErC,MAAME,IAAYV,EAAAA,EAAAA,IAAarL,GAAUA,EAAMpE,cAAcmQ,WAEvDC,IAAYX,EAAAA,EAAAA,IACfrL,GAAUA,EAAMpE,cAAckQ,gBAAgBE,WAEjD7R,QAAQC,IAAI,wCAAyC4R,IAMrD,MAAMC,IAAcZ,EAAAA,EAAAA,IACjBrL,GAAUA,EAAMpE,cAAckQ,gBAAgBI,cAEjD/R,QAAQC,IAAI,oCAAqC6R,IAEjD,MAAME,IAAed,EAAAA,EAAAA,IAClBrL,GAAUA,EAAMpE,cAAckQ,gBAAgBM,uBAEjDjS,QAAQC,IAAI,2BAA4B+R,IAExC,MAAM/N,IAASiN,EAAAA,EAAAA,IACZrL,GAAUA,EAAMpE,cAAckQ,gBAAgB1N,QAEjDjE,QAAQC,IAAI,qBAAsBgE,IAElC,MAAMiO,IAAkBhB,EAAAA,EAAAA,IACrBrL,GAAUA,EAAMpE,cAAckQ,gBAAgBO,iBAEjDlS,QAAQC,IAAI,uCAAwCiS,IACpD,MAAM1N,IAAS0M,EAAAA,EAAAA,IACZrL,GAAUA,EAAMpE,cAAckQ,gBAAgBnN,QAEjDxE,QAAQC,IAAI,6BAA8BuE,IAE1C,MAAM8G,IAAU4F,EAAAA,EAAAA,IACbrL,GAAUA,EAAMpE,cAAckQ,gBAAgBrG,SAEjDtL,QAAQC,IAAI,mCAAoCqL,IAEhD,MAAM6G,IAAiBxB,EAAAA,EAAAA,aAAY,KACjC,IAAIkB,EAAYR,GAAYxO,IAAKgO,GAC/BA,EAAKpM,MAAMiJ,QAAQ,UAAW,KAGhC,MAAM0E,EACyB,IAA7BnB,GAAkBnP,OAAeiC,EAAYkN,GAE/C,IAAIoB,EAAsB,IACrB,IAAI3F,IACL0F,EAAWE,QAASzB,IAAI,IAAA0B,EAAA,OAAe,QAAVA,EAAA1B,EAAKzM,aAAK,IAAAmO,OAAA,EAAVA,EAAY1P,IAAKoK,GAAMA,EAAE3J,aAAc,OAIpEkP,EAAoBX,EACrBY,OAAQ3P,IAAWuP,EAAoBnR,SAAS4B,IAChDD,IAAKC,IAAK,CAAQ2B,MAAO3B,KAK5B,OAHA9C,QAAQC,IAAI,4BAA6BuS,GAGlCX,EAAUhP,IAAKC,IAAK,CAAQ2B,MAAO3B,MACzC,CAACuO,GAAatN,EAAWkN,GAAmBnL,KAGzC4M,GAAmBC,IACvBrD,EAAaqD,IAUf,GAPA3S,QAAQC,IAAI,kBAAmB8D,IAE/B7D,EAAAA,EAAAA,WAAU,KACJ6D,EAAUjC,QAAU,GACtBuN,EAAauD,GAAYA,EAAU,IAEpC,CAAC7O,IACArC,GAAkBmR,UAAYnR,GAAkBC,mBAAqB,IAADmR,GAAAC,GAClElN,GAAQnE,GAAkBmR,SAAS,kBACnCG,GAAUtR,GAAkBmR,SAAkB,QAC9C7O,GAA2C,QAAvC8O,GAAGpR,GAAkBC,0BAAkB,IAAAmR,IAAM,QAANC,GAApCD,GAAsClR,YAAI,IAAAmR,QAAN,EAApCA,GAA4ClR,MAAM,GAAG4H,WAGlE,MAAOwJ,GAA2BC,KAChCnT,EAAAA,EAAAA,UAASiS,IACXhS,QAAQC,IACN,0CACAgT,KAEF/S,EAAAA,EAAAA,WAAU,KACRgT,GAA6BlB,IAChB,kBAAThO,GACF8L,EAAsBqB,IAEtB3B,EAAiBwC,KAElB,CAACA,GAAchO,GAAMmN,MAExBjR,EAAAA,EAAAA,WAAU,KACK,kBAAT8D,IACF4L,EAAcuC,OAEf,CAACA,GAAgBnO,MAmBpB9D,EAAAA,EAAAA,WAAU,KACK,kBAAT8D,IACF4L,EAAckC,KAEf,CAACA,GAAa9N,KACjB,MAAMyB,GAASlF,UAAsB,IAAD4S,EAAAC,EAClC,IAAIC,EAAe,CAAC,EAEpB,MAAMC,EAAwB,GAE9BtT,QAAQC,IAAI,aAAc8D,GAC1B/D,QAAQC,IAAI,oCAAqCgT,IACjD,IAAIM,EAAa,GAEbC,EAAyBP,GAA0BpQ,IAAK4Q,IAC1D,IAAIC,GAAY3H,EAAAA,EAAAA,GAAA,GAAQ0H,GAsCxB,OApCA1P,EAAUqJ,QAASuG,IAAe,IAADC,EAC/B,IAAIC,EAAW,CAAC,EAChB,MAAM7C,EAAY2C,EAAUvP,MAAMsJ,QAAQ,QAAS,IAAIA,QACrD,OACA,IAGIoG,EAEL,QAFYF,EAAG/B,GAAUpE,KACvBsG,GAAcA,EAAUtP,QAAUkP,EAAUvP,cAC9C,IAAAwP,OAAA,EAFeA,EAEbrK,GAEH,GAAImK,EAAajP,QAAUkP,EAAUvP,MAAO,EACxBsP,EAAavO,KAAO,OAAS,SAG7BwO,EAAUzO,OACtB,MAAM8O,KAAKhD,IACbqC,EAAa,OAADY,OAAQjD,IAAkC,SAAnB2C,EAAUzO,KAC7C2O,EAASK,SAAQ,OAAAD,OAAUjD,GAC3B6C,EAASM,UAA+B,SAAnBR,EAAUzO,OAE/BmO,EAAa,GAADY,OAAIjD,EAAS,SAA6B,SAAnB2C,EAAUzO,KAC7C2O,EAASK,SAAQ,GAAAD,OAAMjD,EAAS,QAChC6C,EAASM,UAA+B,SAAnBR,EAAUzO,MAEjCwO,EAAavO,KAA0B,SAAnBwO,EAAUzO,KAC9B2O,GAAQ9H,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACH8H,GAAQ,IACXtK,GAAIuK,EACJrP,MAAOkP,EAAUvP,MACjBgQ,KAAM,WAERb,EAAWrG,KAAK2G,GAEpB,IAEKH,IAIT3P,EAAUqJ,QAASuG,IAKjB,IAJqBV,GAA0BxF,KAC5C4G,GAAiBA,EAAa5P,QAAUkP,EAAUvP,OAGlC,CAAC,IAADkQ,EACjB,MAAMtD,EAAY2C,EAAUvP,MAAMsJ,QAAQ,QAAS,IAAIA,QACrD,OACA,IAEIoG,EAEL,QAFYQ,EAAGzC,GAAUpE,KACvBsG,GAAcA,EAAUtP,QAAUkP,EAAUvP,cAC9C,IAAAkQ,OAAA,EAFeA,EAEb/K,GAEH,GAAIuK,EAAS,CACX,IAAIS,EAAc,CAAEhL,GAAIuK,EAASrP,MAAOkP,EAAUvP,OAC9CyP,EAAW,CAAC,EAChBP,EAAsBpG,KAAK4G,GAEJ,SAAnBH,EAAUzO,MACR,MAAM8O,KAAKhD,IACbqC,EAAa,OAADY,OAAQjD,KAAe,EACnC6C,EAASK,SAAQ,OAAAD,OAAUjD,KAE3BqC,EAAa,GAADY,OAAIjD,EAAS,UAAU,EACnC6C,EAASK,SAAQ,GAAAD,OAAMjD,EAAS,SAElCuD,EAAYpP,MAAO,EACnB0O,EAASM,WAAY,IAErBI,EAAYpP,MAAO,EACnB0O,EAASM,WAAY,GAGvBX,EAAuBtG,KAAKqH,GAC5BV,GAAQ9H,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACH8H,GAAQ,IACXtK,GAAIuK,EACJrP,MAAOkP,EAAUvP,MACjBgQ,KAAM,QAERb,EAAWrG,KAAK2G,EAClB,CACF,IAGF,IAAIW,EAAe,GACnBvB,GAA0B7F,QAASiH,IAIjC,IAH0BtQ,EAAU/C,KACjC2S,GAAcA,EAAUvP,QAAUiQ,EAAa5P,OAE5B,CAAC,IAADgQ,EACpB,MAAMX,EAEL,QAFYW,EAAG5C,GAAUpE,KACvBiH,GAAcA,EAAUjQ,QAAU4P,EAAa5P,cACjD,IAAAgQ,OAAA,EAFeA,EAEblL,GACCuK,GACFU,EAAatH,KAAK4G,EAEtB,IAGFN,EAAyBA,EAAuBf,OAC7CiC,IAAeF,EAAatT,SAASwT,EAAUnL,KAGlDvJ,QAAQC,IAAI,qCAAsCuU,GAIlDxU,QAAQC,IAAI,mCAAoCuT,GAChDxT,QAAQC,IAAI,4BAA6BqT,GACzCtT,QAAQC,IAAI,iBAAkBoT,GAC9BrT,QAAQC,MAGR,MAAM0U,QAAeC,EAAAA,EAAAA,IACnBvB,EACAC,EACAE,EACAlI,GACoC,QAD7B6H,EACPzR,GAAkBC,0BAAkB,IAAAwR,GAAM,QAANC,EAApCD,EAAsCvR,YAAI,IAAAwR,OAAN,EAApCA,EAA4CvR,MAAM,GAAG2H,SACrDqI,GACAK,GACAlO,GACAwQ,EACAjB,EACA7B,IAGF,GAAIiD,EAAOE,QAAS,CAClBzE,IAAgB,GAChBpQ,QAAQC,IAAI,eAAgB0U,GACA,KAAxBA,EAAOG,cAA8C,MAAvBH,EAAOG,aACvCpV,GAAiBqV,EAAAA,IAGjBpV,GJxhB8BqV,KACpC,IAAKA,EAAc,MAAO,qBAE1B,MAAMC,EAAcD,EACjBpU,MAAM,MACN6R,OAAQyC,GAAuB,KAAfA,EAAInI,QAOvB,OACEhK,EAAAA,EAAAA,MAAA,OACEC,MAAO,CACLmS,WAAY,OACZzR,OAAQ,OACR0R,SAAU,WACVC,aAAc,QACdzS,SAAA,EAEFT,EAAAA,EAAAA,KAAA,UAAAS,SAAQ,aACRT,EAAAA,EAAAA,KAAA,UACEyB,QAhBa0R,KACjB,MAAMC,EAAaN,EAAYpS,IAAKqS,GAAG,KAAAjB,OAAUiB,IAAOM,KAAK,MAC7DpH,UAAUC,UAAUC,UAAUiH,IAe1BvS,MAAO,CACLoS,SAAU,WACVK,MAAO,OACPC,IAAK,QACLnH,WAAY,OACZC,OAAQ,OACR9K,OAAQ,UACRiS,SAAU,OACVvS,MAAO,QACPR,UAEFT,EAAAA,EAAAA,KAACsM,EAAAA,IAAS,CAAChL,KAAM,QAEnBtB,EAAAA,EAAAA,KAAA,MAAAS,SACGqS,EAAYpS,IAAI,CAACqS,EAAKU,KACrBzT,EAAAA,EAAAA,KAAA,MAAAS,SAAiBsS,GAARU,UIifIC,CAAsBlB,EAAOG,cAAe,CACzDgB,WAAW,IAGf,IAAIC,EAAW,GACf,GAAIpB,EAAOqB,UAAYC,OAAOC,KAAKvB,EAAOqB,UAAUlU,OAAS,EAAG,CAC9D,IAAI+I,EJ/jBL,SACLsL,EACA5G,EACAiE,EACA1B,GA0BA,OAxBA9R,QAAQC,IAAI,uBAAwBsP,GACpCvP,QAAQC,IAAI,qBAAsB6R,GAClCqE,EAAS/I,QAASyD,IACE,QAAdA,EAAK7M,MAGPwP,EAAyBA,EAAuBf,OAC7C3P,GAAUA,EAAM2B,QAAUoM,EAAKpM,OAI7BqN,EAAY9Q,KAAM8B,GAAUA,EAAM2B,QAAUoM,EAAKpM,QACpDqN,EAAY5E,KAAK2D,IAEI,WAAdA,EAAK7M,OAEdwP,EAAyBA,EAAuB3Q,IAAKC,GACnDA,EAAM2B,QAAUoM,EAAKpM,OAAKsH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQjJ,GAAK,IAAEqC,KAAM,UAAYrC,MAO1D,CAAE0Q,yBAAwB1B,cACnC,CIgiBuBsE,CACbzB,EAAOqB,SACPzG,EACAiE,EACA1B,IAEF9R,QAAQC,IAAI,eAAgB4K,GACxBA,IACF+E,EAAc/E,EAASiH,aAEvBiE,EAAWlL,EAAS2I,uBAExB,MACEuC,EAAWvC,EAGTuC,IAEFvG,EAAiBuG,GACjB7C,GAA6B6C,GAEjC,MACE3F,IAAgB,GAChBzQ,GAAe0W,EAAAA,MAQnBnW,EAAAA,EAAAA,WAAU,KACH0R,IACHzC,KAED,CAACyC,GAAWzC,KAGfjP,EAAAA,EAAAA,WAAU,KACRgQ,GAAkBuB,KACjB,CAACA,KAGJ,MAAM6E,IAAeC,EAAAA,EAAAA,SAAQ,IAEvBzS,EADY,kBAATE,GACU6L,EACAN,EADoBvL,GAAMC,IAE1C,CAAC4L,EAAoBN,EAAevL,GAAMC,KAEvCuS,IAAkBD,EAAAA,EAAAA,SACtB,IJtsB+B5G,IAC5BA,EACEA,EAAW9M,IAAKC,IAAK,CAC1B,mBAAwB,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO2B,QAAS,SAFb,GIqsBhBgS,CAAmB9G,GACzB,CAACA,IAEH3P,QAAQC,IAAI,wCAAyCuW,IAGrD,MAAM3D,IAAW0D,EAAAA,EAAAA,SACf,IJ5wBwB7U,KAC1B,IAAKA,IAAsBA,EAAkBmR,SAC3C,OAAO,KAGT,MAAMhC,EAAOnP,EAAkBmR,SAE/B,IAAIA,EAAW,CACbpO,MAAOoM,EAAK6F,OAAS,MACrB1S,KAAM6M,EAAKuD,MAAQ,MACnB,iBAAkBvD,EAAK,mBAAqB,MAC5C8F,MAAO9F,EAAK+F,OAAS,MACrB,4BAA6B/F,EAAK,8BAAgC,MAClEgG,YAAahG,EAAKgG,aAAe,MACjC,mBAAoBhG,EAAK,qBAAuB,MAChD,2BAA4BA,EAAK,6BAA+B,MAChE,aAAcA,EAAK,eAAiB,MACpCiG,SACEjG,EAAKiG,UACL,uHAOJ,MAJkB,aAAdjG,EAAKuD,OACPvB,EAASkE,IAAMlG,EAAKkG,KAAO,MAC3BlE,EAAS,cAAgBhC,EAAK,eAAiB,OAE1CgC,GIkvBCmE,CAAYtV,IAClB,CAACA,KAEH1B,QAAQC,IAAI4S,KAsBZ3S,EAAAA,EAAAA,WAAU,KACJoW,GAAaxU,QAAU,IACzB9B,QAAQC,IAAI,kBAAmBqW,IAC/BhH,EAAagH,IACbjH,EAAauD,GAAYA,EAAU,KAEpC,CAAC0D,MAEJpW,EAAAA,EAAAA,WAAU,KACRoQ,KAAyBuC,KACxB,CAACA,KAGJ,MAAMpL,IAAU8O,EAAAA,EAAAA,SACd,IJ7uBwBU,EAACzS,EAAQR,EAAMvB,EAAcC,KACvD1C,QAAQC,IAAI,iBAAkB+D,GACjB,kBAATA,EACK,CACL,CAAEqB,YAAa,WAAYC,OAAQ,aACnC,CACED,YAAa,QACbC,OAAQ,QACR4R,KAAMC,IAAA,IAAC,IAAEvK,GAAKuK,EAAA,OACZhV,EAAAA,EAAAA,KAACE,EAAa,CACZE,OAAQqK,EAAIwK,SAAShT,MACrB5B,OAAQoK,EAAIwK,SAAS9S,OACrB7B,aAAcA,EACdC,kBAAmBA,OAOtB,CACL,CAAE2C,YAAa,QAASC,OAAQ,SAChC,CAAED,YAAa,MAAOC,OAAQ,OAC9B,CAAED,YAAa,SAAUC,OAAQ,UACjC,CAAED,YAAa,SAAUC,OAAQ,UACjC,CAAED,YAAa,gBAAiBC,OAAQ,iBACxC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,kBAAmBC,OAAQ,UAC1C,CACED,YAAa,OACbC,OAAQ,QAGV,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,gBIwsB/B2R,CAAazS,EAAQR,GAAMvB,GAAcC,IAC/C,CAAC8B,GAAQR,GAAMvB,GAAcC,KAGzBkD,IAAe2Q,EAAAA,EAAAA,SAAQ,IAAMnR,EAAe,KAuClDlF,EAAAA,EAAAA,WAAU,KACRF,QAAQC,IAAI,mCAAoC,CAC9CJ,UACA4R,wBACAG,gBAED,CAAC/R,EAAS4R,GAAsBG,KAEnC,MAAM3J,GAAcA,KAElB6G,EAAiB,MACjBY,EAAiB,MACjBR,EAAoB,IACpBF,GAAmB,GACnBM,EAAa,IACbM,EAAc,IACdE,EAAsB,IACtBN,EAAiB,IACjB0D,GAA6B,IAC7B7D,EAAY,GAEZU,GAAuB,GAGnBlI,GAAaR,UACfQ,GAAaR,QAAQgQ,MAAQ,IAI/BrH,IAA0B,IAgC5B,OACEjN,EAAAA,EAAAA,MAAAJ,EAAAA,SAAA,CAAAC,SAAA,CAGGuN,KAAgBhO,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KAEtBwP,KAAc/R,IAAYoQ,KAC1B9N,EAAAA,EAAAA,KAAA,OACEa,MAAO,CACLsF,OAAQ,OACRpF,QAAS,OACToU,cAAe,SACfC,eAAgB,gBAChBnC,SAAU,YACVxS,UAEFT,EAAAA,EAAAA,KAACqV,EAAoB,CACnB5P,sBA33BsBsG,IDiBF3N,OAC9B2N,EACAgB,EACAF,EACArP,EACAD,EACAoP,EACAY,EACAM,KAGAhQ,QAAQC,IAAI,yCAEZ,MAAMwX,EAAQvJ,EAAMwJ,OAAOD,MACrBE,EAAkB,CACtB,2BACA,qEAWF,GAPqBC,MAAMC,KAAKJ,GAAOhF,OACpCqF,IACEH,EAAgBzW,SAAS4W,EAAK9T,QAC9B8T,EAAK3K,KAAK4K,cAAcC,SAAS,UACjCF,EAAK3K,KAAK4K,cAAcC,SAAS,UAGrBlW,OAAS,EAIxB,OAHAnC,EAAe,kDACfuO,EAAMwJ,OAAOL,MAAQ,QACrBrH,GAA0B,GAI5B,MAAM8H,EAAOL,EAAM,GACbQ,EAAS,IAAIC,WAEnBD,EAAOE,OAAS5X,UACd,MAAMqB,EAAO,IAAIwW,WAAWC,EAAEX,OAAO/C,QAC/B2D,EAAWC,EAAAA,GAAU3W,EAAM,CAAEoC,KAAM,UACnCwU,EAAYF,EAASG,WAAW,GAChCC,EAAQJ,EAASK,OAAOH,GACxBI,EAAWL,EAAAA,GAAWM,cAAcH,EAAO,CAAEpT,OAAQ,IAK3D,GAHAtF,QAAQC,IAAI,qBAAsB2Y,GAGV,IAApBA,EAAS9W,OAGX,OAFAnC,EAAe,sBACfqQ,GAA0B,GAO5B,MAAM8I,EAAoBF,EAAS,GAAG/V,IAAKyC,GACnC,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQwH,WAAWC,OAAOgL,eAI5B,GAFA/X,QAAQC,IAAI,sBAAuB6Y,GAEN,SAAzBA,EAAkB,IAA0C,WAAzBA,EAAkB,GAKvD,OAJAnZ,EACE,0EAEFqQ,GAA0B,GAK5B,GAAwB,IAApB4I,EAAS9W,OAEX,YADAnC,EAAe,0DAIjB,MAAMoZ,EAAS,GACf,IAAK,IAAIpM,EAAI,EAAGA,EAAIiM,EAAS9W,OAAQ6K,IAAK,CACxC,MAAMC,EAAMgM,EAASjM,GACfkE,EAAOjE,EAAI,GACXrK,EAASqK,EAAI,IAEdiE,GAAQtO,GACXwW,EAAO7L,KAAK,CACV8L,UAAWrM,EAAI,EACfsM,WAAY,OACZC,iBAAkB,yBAIlBrI,IAAStO,GACXwW,EAAO7L,KAAK,CACV8L,UAAWrM,EAAI,EACfsM,WAAY,SACZC,iBAAkB,2BAGxB,CAIA,GAFAlZ,QAAQC,IAAI,qBAAsB8Y,GAE9BA,EAAOjX,OAAS,EAAG,CACrB,MAAMqX,EAAkBJ,EAAOlW,IAC5Bd,GAAK,OAAAkS,OACGlS,EAAMiX,UAAS,OAAA/E,OAAMlS,EAAMkX,WAAU,YAAAhF,OAAWlS,EAAMmX,mBAGjElZ,QAAQC,IAAI,qCAAsCkZ,GAElDjK,EAAoBiK,GACpBnK,GAAmB,GACnBgB,GAA0B,EAC5B,MACEtQ,EAAiB,6CACjBoP,EAAiB8J,GACjBlJ,EAAiBoI,GACjB9H,GAA0B,IAI9BiI,EAAOmB,QAAU,KACfzZ,EAAe,8CACfqQ,GAA0B,IAG5BiI,EAAOoB,kBAAkBvB,IC5ItBwB,CACCpL,EACAgB,EACAF,EACArP,GACAD,GACAoP,EACAY,EACAM,IACAuJ,QAAQ,KACRnJ,IAAgB,KAKlBL,GAAuB,IA42BflI,aAAcA,GACdC,oBAAqBA,EACrBC,aA9CWxH,UACnB,GAAKkL,EAAL,CAKA2E,IAAgB,GAGhB,UACQ5E,EACJC,EACAC,EACAC,EACA1D,GAEJ,CAAE,MAAOlG,GACP/B,QAAQ+B,MAAM,yBAA0BA,EAC1C,CAAC,QACCqO,IAAgB,EAClB,CAGAJ,IAA0B,EAnB1B,MAFErQ,GAAe,yDA6CTqI,uBAAwBA,GACxBC,YAAaA,OA+ElB2J,KACC7O,EAAAA,EAAAA,MAAAJ,EAAAA,SAAA,CAAAC,SAAA,CAEG/C,IAAWsC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KACnBD,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,qCAAoC1D,UACjDG,EAAAA,EAAAA,MAAA,OAAKuD,UAAU,UAAS1D,SAAA,EACtBT,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,YAAW1D,UACxBT,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJG,IAAI,+DACJC,IAAI,YACJlC,UAAU,YACV1C,QAlNQ4V,KACtBrK,IAEAqB,IAASiJ,EAAAA,EAAAA,KAAa,IACtBjJ,IACEkJ,EAAAA,EAAAA,IAAqB,CACnB7G,SAAU,CAAC,EACX8G,cAAe,GACfC,SAAU,GACVjY,mBAAoB,MAGxB6O,IACEqJ,EAAAA,EAAAA,IAAmB,CACjBhI,UAAW,GACXI,sBAAuB,GACvBF,aAAc,GACdG,gBAAiB,GACjB1N,QAAQ,EACR8G,QAAS,CAAC,EACVoG,gBAAiB,GACjBzN,OAAQ,CAAC,KAGbuM,IACEsJ,EAAAA,EAAAA,IAAuB,CACrB3I,cAAe,GACfG,YAAa,GACbE,WAAW,EACXD,UAAW,CAAC,KAIhBjC,EAAa,IACbgB,IAAuB,QAoLZuC,KACC1Q,EAAAA,EAAAA,KAAC4X,EAAAA,EAAmB,CAClBnY,KAAMiR,GACNmH,WAAW,yBAOlB/J,IACC9N,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,yBAAwB1D,UACrCT,EAAAA,EAAAA,KAACC,EAAAA,EAAM,OAGTD,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,CAAAC,UACEG,EAAAA,EAAAA,MAAA,OAAKuD,UAAU,cAAa1D,SAAA,EAC1BT,EAAAA,EAAAA,KAAC8X,EAA+B,CAC9BtU,WAAY6Q,GACZ5Q,aAAcA,GACdpB,OAAQA,GACRe,WA9zBIhF,UASlB,GARAsO,GAAiB,GACjB7O,QAAQC,IAAI,gBAAiB2B,GAC7B5B,QAAQC,IAAI,gCAAiC8D,GAC7C/D,QAAQC,IAAI,0BAA2B2B,GACvC5B,QAAQC,IAAI,mBAAoBkR,IAEhC9B,EAAauD,GAAYA,EAAU,GAEtB,kBAAT5O,GACFhE,QAAQC,IAAI,gCAEZ6P,EAAuBoK,GACdA,EAAKrX,IAAK+J,IAKf,KAH+B,IAA7BqE,GAAkBnP,QAClBmP,GAAkBjQ,KAAMmZ,GAAMA,EAAE7V,SAAWsI,EAAItI,SAE9B,OAAOsI,EAE1B,MAAMwN,EAAWjJ,GAAc1D,KAAM0M,GAAMA,EAAE7V,SAAWsI,EAAItI,QACtD+V,GAAsB,OAARD,QAAQ,IAARA,OAAQ,EAARA,EAAU/V,aAAc,GACtCiW,EAAiB1N,EAAIvI,YAAc,GAEnCkW,EAAwBD,EAAezX,IAAK2X,GAE9C1U,IACAlE,EAAKV,SAASsZ,EAAGlX,UAAUyJ,SAC3BsN,EAAYrZ,KACTyZ,GAAOA,EAAGnX,UAAUyJ,SAAWyN,EAAGlX,UAAUyJ,SAGzBhB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQyO,GAAE,IAAEpX,MAAO,QAAUoX,GAGjDE,EAAiB,GA+BvB,OA7BA9Y,EAAKwL,QAAS4D,IACZ,MAAMxD,EAAe6D,GAAY5D,KAAM3K,GACdA,EAAM2B,MAC1BiJ,QAAQ,YAAa,IACrBX,SACuBiE,EAAUjE,QAGtC,IAAKS,EAAc,OAEnB,MAAMmN,EAAgBN,EAAYrZ,KAC/ByZ,GAAOA,EAAGnX,UAAUyJ,SAAWiE,EAAUjE,QAGtBuN,EAAetZ,KAClCwZ,GAAOA,EAAGlX,UAAUyJ,SAAWiE,EAAUjE,SAI1C2N,EAAexN,MAAInB,EAAAA,EAAAA,GAAC,CAClBzI,UAAW0N,EACXnN,QAAS2J,EAAajE,GACtBhG,eAAgB,WAEZoX,EAAgB,CAAEvX,MAAO,OAAU,CAAEA,MAAO,cAKtD2I,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKa,GAAG,IACNvI,WAAY,IAAIkW,KAA0BG,YAI3C,CACLtK,IAAgB,GAChBpQ,QAAQC,IAAI,yCAIZ,IAAK,IAAD2a,EAAAC,EACF,MAAM,YAAEC,EAAW,aAAEhG,SAAuBiG,EAAAA,EAAAA,IAC1CnZ,EACAiQ,GACoC,QAD3B+I,EACTlZ,GAAkBC,0BAAkB,IAAAiZ,GAAM,QAANC,EAApCD,EAAsChZ,YAAI,IAAAiZ,OAAN,EAApCA,EAA4ChZ,MAAM,GAAG2H,SACrDxF,GACA0N,GACAQ,GACAc,IAEFhT,QAAQC,IAAI,kCAAmC6a,GAC/C9a,QAAQC,IAAI,mCAAoC6U,GAGhD,MAAMkG,EAAgBF,EAAYjY,IAC/BgO,IAAI,IAAAoK,EAAA,OAAyD,QAAzDA,EAAKpJ,GAAUpE,KAAM3K,GAAUA,EAAMyG,KAAOsH,EAAKqK,gBAAQ,IAAAD,OAAA,EAApDA,EAAsDxW,QAElEzE,QAAQC,IAAI,kBAAmB+a,GAG/B,MAAMG,EAAcvZ,EAAK6Q,OACtB3P,IAAWkY,EAAc9Z,SAAS4B,EAAM2B,QAErC2W,EAAgBxZ,EAAK6Q,OAAQ3P,GACjCkY,EAAc9Z,SAAS4B,EAAM2B,QAE/BzE,QAAQC,IAAI,gBAAiBkb,GAC7Bnb,QAAQC,IAAI,kBAAmBmb,GAG3BA,EAActZ,OAAS,IAErBgT,GACFnJ,EAA2BmJ,EAAc,CAEvC,GAIJ9U,QAAQC,IAAI,mCAAoC6U,IAIlDlF,EAAeyL,GAAmB,IAC7BA,KACAD,EAAcvY,IAAKC,IAAK,CAAQ2B,MAAO3B,EAAM2B,WAI9C0W,EAAYrZ,OAAS,IACvBwN,EAAc4K,GAAS,IAClBiB,EAAYtY,IAAIyY,IAAA,IAAC,MAAE7W,GAAgB6W,EAANC,GAAIC,EAAAA,EAAAA,GAAAF,EAAAG,GAAA,OAAA1P,EAAAA,EAAAA,GAAA,CAClC3H,MAAOK,GACJ8W,QAEFrB,IAEL7K,EAAauD,GAAYA,EAAU,GACnClH,EAA6B,8BAEjC,CAAE,MAAO3J,GACP/B,QAAQ+B,MAAM,6BAA8BA,GAC5C4J,EAA2B,0CAC7B,CAAC,QAECyE,IAAgB,EAClB,CACF,GA8qBc5K,WA3qBM5D,IACpB5B,QAAQC,IAAI,mCAAoC2B,GAChD,MAAM8Z,EAAmBlF,GAAgB/D,OACtC7F,IACEhL,EAAK6L,KAAMkO,GAAgBA,IAAgB/O,EAAI,qBAGpD,GADA5M,QAAQC,IAAI,mCAAoCyb,GAC5CA,EAAkB,CACpB,MAAME,EAAkBF,EAAiB7Y,IAAKgO,IAAI,CAChDpM,MAAOoM,EAAK,sBAGd7Q,QAAQC,IAAI2b,GACZhM,EAAcgM,EAChB,GA8pBcnW,OAj+BGlF,UAMjB,GALAP,QAAQC,IAAI,sCAAuC8D,GAEnD+M,GAAiB/M,GACjBqM,IAAgB,GAEH,kBAATpM,GACF,IAAgB,IAAZ8B,GAAkB,CACpB9F,QAAQC,IAAI,gCACZ,MAAM4K,QAAiBgR,EACrB9X,EACArC,GACAyP,IAIF,GADAnR,QAAQC,IAAI,8BAA+B4K,GACvCA,EAAU,CACZ,MAAMiR,EAAmB/X,EAAUlB,IAAK8Q,IACtC,MAAMoI,EAAe5K,GAAc1D,KAChCoD,GAASA,EAAKvM,SAAWqP,EAAUrP,QAGtC,MAAO,CACLA,OAAQqP,EAAUrP,OAClB0X,SAAsB,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAcC,SACxBC,UAAuB,OAAZF,QAAY,IAAZA,OAAY,EAAZA,EAAcE,UACzB9X,UAAWwP,EAAUzP,SACrBG,WAAYsP,EAAUvP,MAAMvB,IAAIP,IAAA,IAAC,UAAEgB,EAAS,QAAEO,GAASvB,EAAA,MAAM,CAC3DgB,YACAO,gBAKN2M,IAAS0L,EAAAA,EAAAA,IAAiBJ,IAE1B1L,IAAgB,EAClB,MACEpQ,QAAQoB,KAAK,2BACbgP,IAAgB,EAEpB,KAAO,CACLpQ,QAAQC,IAAI,8BAEZ,MAAM4K,QAAiBsR,EACrBpY,EACArC,GACAyP,IAIF,GADAnR,QAAQC,IAAI,8BAA+B4K,GACvCA,EAAU,CAAC,IAADuR,EAAAC,EACZ,MAAMP,EAAmB/X,EAAUlB,IAAK8Q,IACtC,MAAMoI,EAAe5K,GAAc1D,KAChCoD,GAASA,EAAKvM,SAAWqP,EAAUrP,QAGtC,MAAO,CACLA,OAAQqP,EAAUrP,OAClB0X,SAAsB,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAcC,SACxBC,UAAuB,OAAZF,QAAY,IAAZA,OAAY,EAAZA,EAAcE,UACzB9X,UAAWwP,EAAUzP,SACrBG,WAAYsP,EAAUvP,MAAMvB,IAAIsU,IAAA,IAAC,UAAE7T,EAAS,QAAEO,GAASsT,EAAA,MAAM,CAC3D7T,YACAO,gBAKN2M,IAAS0L,EAAAA,EAAAA,IAAiBJ,IAG1B,MAAMQ,EAC+D,QADnDF,EAChB7a,EAAAA,EAAMC,WAAWC,cAAcC,kBAAkBC,0BAAkB,IAAAya,GAC3D,QAD2DC,EAAnED,EACIxa,YAAI,IAAAya,OAD2D,EAAnEA,EACUxa,MACI,OAAZya,QAAY,IAAZA,GAAAA,EAAcxa,cACVE,EAAAA,EAAAA,GAAkBsa,EAAc9c,IAGxC4Q,IAAgB,EAClB,MACEpQ,QAAQoB,KAAK,2BACbgP,IAAgB,EAEpB,YAEM3K,GAAO1B,IA44BD2B,SAz4BKnF,UACnB,GAAa,kBAATyD,GACFhE,QAAQC,IAAI,uCACZsQ,GAAiB2J,IAAUA,QAK3B,GAHAla,QAAQC,IAAI,uBAAwBgR,IACpCjR,QAAQC,IAAI,4CAA6C8D,GAErDkN,GAAkBnP,OAAS,EAAG,CAAC,IAADya,EAAAC,EAEhC,MAAMC,EAAiBxL,GAAkBpO,IAAK+J,GAAQA,EAAIxI,OAC1DpE,QAAQC,IAAI,mBAAoBwc,GAChC,MAAMC,EAAgBD,EAAe5Z,IAAK4B,IAAK,CAC7CA,MAAOA,KAETzE,QAAQC,IAAI,kBAAmByc,GAC/B,MAAMhB,EAAmB3X,EAAU0O,OAChC7F,IAAS6P,EAAevb,SAAS0L,EAAIxI,QAExCpE,QAAQC,IAAI,kBAAmByS,IAC3BA,KACFpD,EAAaoM,GACbrM,EAAauD,GAAYA,EAAU,IAKrChD,EAAe+M,GAAqB,IAC/BA,KACAD,IAGLhR,EACE,qDAEIkR,EAAAA,EAAAA,IACJ/K,GACA6K,EACoC,QADvBH,EACb7a,GAAkBC,0BAAkB,IAAA4a,GAAM,QAANC,EAApCD,EAAsC3a,YAAI,IAAA4a,OAAN,EAApCA,EAA4C3a,MAAM,GAAG2H,SACrDxF,GAEJ,MACE2H,EAA2B,8CAg2BjB9F,MAAOA,GACP7B,KAAMA,GACN8B,QAASA,GACT7B,OAAQA,MAEV9B,EAAAA,EAAAA,KAAC0a,EAAAA,EAAa,CAEZjb,KAAMmC,EACN0D,QAASA,GAETuS,WAAW,2BAJN5K,YAgBjBjN,EAAAA,EAAAA,KAAC2a,EAAAA,EAAkB,CACjB/V,KAAMgI,EACN/H,OAAQA,IAAMgI,GAAmB,GACjC+J,OAAQ9J,QAQH4M,EAAgCtb,MAC3CwD,EACArC,EACAyP,KACI,IAAD4L,EAAAC,EAAAC,EACH,MAAMC,GACgC,QAApCH,EAAArb,EAAkBC,0BAAkB,IAAAob,GAAM,QAANC,EAApCD,EAAsCnb,YAAI,IAAAob,GAAO,QAAPC,EAA1CD,EAA4Cnb,aAAK,IAAAob,OAAb,EAApCA,EAAoD,KAAM,CAAC,EACvDpK,EAAWnR,EAAkBmR,UAAY,CAAC,EAE1CsK,EAAU,CACdxP,QAASkF,EAAS6D,MAClB0G,KAAMF,EAAW1T,SACjBoE,eAAgBiF,EAASwK,aACzBxP,cAAegF,EAAS,uBACxB/E,QAAS,WACTC,MAAOhK,EAAUlB,IAAKgO,IACpB,MAAMyM,EAAYnM,EAAc1D,KAAM8P,GAAOA,EAAGjZ,SAAWuM,EAAKvM,QAEhE,MAAO,CACLA,OAAQuM,EAAKvM,OACb0X,UAAmB,OAATsB,QAAS,IAATA,OAAS,EAATA,EAAWtB,WAAY,eACjCC,WAAoB,OAATqB,QAAS,IAATA,OAAS,EAATA,EAAWrB,YAAa,UACnC9X,UAAW0M,EAAK3M,SAChBG,WAAYwM,EAAKzM,MAAMqO,OAAQ3P,GAAUA,EAAMM,OAC5CP,IAAKC,IACJ,MAAM,MAAEM,GAAmBN,EAATyY,GAAIC,EAAAA,EAAAA,GAAK1Y,EAAK0a,GAChC,OAAAzR,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKwP,GAAI,IACPkC,UAAqB,UAAVra,EAAoB,MAAQ,cAMnDpD,QAAQC,IAAI,4BAA6Bkd,GAIzC,IAEE,aADuB5R,EAAAA,EAAAA,IAAU,OAHjC,gFAGkD4R,EAEpD,CAAE,MAAOpb,GAEP,MADA/B,QAAQ+B,MAAM,+BAAgCA,GACxCA,CACR,GAGWoa,EAAmB5b,MAC9BwD,EACArC,EACAyP,KACI,IAADuM,EAAAC,EAAAC,EACH,MAAMV,GACgC,QAApCQ,EAAAhc,EAAkBC,0BAAkB,IAAA+b,GAAM,QAANC,EAApCD,EAAsC9b,YAAI,IAAA+b,GAAO,QAAPC,EAA1CD,EAA4C9b,aAAK,IAAA+b,OAAb,EAApCA,EAAoD,KAAM,CAAC,EACvD/K,EAAWnR,EAAkBmR,UAAY,CAAC,EAE1CsK,EAAU,CACdxP,QAASkF,EAAS6D,MAClB0G,KAAMF,EAAW1T,SACjBoE,eAAgBiF,EAASwK,aACzBxP,cAAegF,EAAS,uBACxB/E,QAAS,WACTC,MAAOhK,EAAUlB,IAAKgO,IACpB,MAAMyM,EAAYnM,EAAc1D,KAAM8P,GAAOA,EAAGjZ,SAAWuM,EAAKvM,QAEhE,MAAO,CACLA,OAAQuM,EAAKvM,OACb0X,UAAmB,OAATsB,QAAS,IAATA,OAAS,EAATA,EAAWtB,WAAY,eACjCC,WAAoB,OAATqB,QAAS,IAATA,OAAS,EAATA,EAAWrB,YAAa,UACnC9X,UAAW0M,EAAK3M,SAChB2Z,UAAmB,OAATP,QAAS,IAATA,OAAS,EAATA,EAAWO,WAAY,MACjCxZ,WAAYwM,EAAKzM,MAAMvB,IAAKC,IAAW,IAADgb,EACpC,MAAM/B,EAAe5K,EAAc1D,KAChCsQ,GAAOA,EAAGzZ,SAAWuM,EAAKvM,QAEvB0Z,EAA4B,OAAZjC,QAAY,IAAZA,GAAwB,QAAZ+B,EAAZ/B,EAAc1X,kBAAU,IAAAyZ,OAAZ,EAAZA,EAA0B9c,KAC7CiM,GAAMA,EAAEpJ,UAAYf,EAAMe,SAGvBoa,EAA8B,UAAhBnb,EAAMM,MACpB8a,EAAiC,QAAhBpb,EAAMM,MAG7B,OAAI4a,GAAiBE,EACZ,CACL5a,UAAWR,EAAMQ,UACjBO,QAASf,EAAMe,QACf4Z,UAAW,UAKXO,IAAkBE,EACb,CACL5a,UAAWR,EAAMQ,UACjBO,QAASf,EAAMe,QACf4Z,UAAW,KAKVO,GAAiBE,EACb,MAIJF,GAAiBC,EACb,CACL3a,UAAWR,EAAMQ,UACjBO,QAASf,EAAMe,QACf4Z,UAAW,OAIR,OACNhL,OAAO0L,aAKhBne,QAAQC,IAAI,sCAAuCkd,GAKnD,IAEE,aADuB5R,EAAAA,EAAAA,IAAU,OAHjC,qFAGkD4R,EAEpD,CAAE,MAAOpb,GAEP,MADA/B,QAAQ+B,MAAM,+BAAgCA,GACxCA,CACR,GCruCF,IAAIqc,EAAO,KAuFI,SAAS,IAGtB,GAAIje,OAAOC,OAAQ,CAGjB,IAAIie,GAAe,EAEnBle,OAAOC,OAAOE,SAAS,SAAU,KAC3B+d,EACFre,QAAQoB,KACN,+EAIJid,GAAe,EArGrB,WAAkB,IAADC,EAAAC,EACfC,UAAU,CAAC,8BAAgCC,IACzCte,OAAOse,YAAcA,IAIvB,IAAIC,GACW,QAAbJ,EAAAne,OAAOC,cAAM,IAAAke,GAAM,QAANC,EAAbD,EAAevT,YAAI,IAAAwT,OAAN,EAAbA,EAAqBI,cAAc,WACnC9U,SAAS+U,eAAe,QAGrBF,IACHA,EAAc7U,SAASC,cAAc,OACrC4U,EAAYnV,GAAK,OACbpJ,OAAOC,QAAUD,OAAOC,OAAO2K,KACjC5K,OAAOC,OAAO2K,KAAK8T,YAAYH,GAG/B7U,SAASkB,KAAK8T,YAAYH,IAOzBN,IAEHA,EAAOU,EAAAA,WAAoBJ,IAK7BN,EAAKW,QACHhc,EAAAA,EAAAA,MAACic,EAAAA,GAAQ,CAACzd,MAAOA,EAAAA,EAAMqB,SAAA,EACrBT,EAAAA,EAAAA,KAAC5C,EAAe,KAChB4C,EAAAA,EAAAA,KAACuM,EAAe,KAChBvM,EAAAA,EAAAA,KAAC8c,EAAAA,GAAc,OAMrB,CAiEMC,KAEJ,MACElf,QAAQ+B,MACN,sEAGN,EArEA,WA2BE,GAAI5B,OAAOgf,QAAUhf,OAAOgf,OAAOtV,SAAU,CAC3C,IAAIuV,EAAiBjf,OAAOgf,OAAOtV,SAASC,cAAc,UAC1DsV,EAAeC,YA1BE,y1BA2BjBlf,OAAOgf,OAAOtV,SAASkB,KAAK8T,YAAYO,EAE1C,MACEpf,QAAQoB,KAAK,qFAEjB,CAGAke,E,6EC/FA,MAAMC,EAAuBA,CAAC3d,EAAMiQ,KAClC7R,QAAQC,IAAI,mCAAoC2B,GAChD5B,QAAQC,IAAI,qCAAsC4R,GAElD,MAAM2N,EAAa5d,EAChBiB,IAAKgO,IACJ,MAAM4O,EAAY5O,EAAKpM,MAAMiJ,QAAQ,OAAQ,IAAIA,QAAQ,SAAU,IAE7DF,EAAeqE,EAAUpE,KAAM3K,GAChBA,EAAM2B,MACtBiJ,QAAQ,OAAQ,IAChBA,QAAQ,SAAU,IACHqK,gBAAkB0H,EAAU1H,eAGhD,OAAOvK,EAAeA,EAAajE,GAAK,OAEzCkJ,OAAQlJ,GAAc,OAAPA,GAIlB,OADAvJ,QAAQC,IAAI,8BAA+Buf,GACpCA,GAGI5C,EAAmBrc,MAC9BsR,EACA6K,EACAgD,EACA1b,KAEAhE,QAAQC,IAAI,YAAa4R,GACzB7R,QAAQC,IAAI,gBAAiByc,GAC7B,MAAMlI,EAAe+K,EAAqB7C,EAAe7K,GAGzD,GAAI2C,EAAa1S,OAAS,EAAG,CAC3B,IAAI6d,EACF,iGAEEC,EAAe,CACjBrW,GAAImW,EACJ1b,KAAMA,EACN6b,QAASrL,GAEX,MAAMsL,QAA2BvU,EAAAA,EAAAA,IAC9B,OACDoU,EACAC,GAGF5f,QAAQC,IAAI,sBAAuBkL,KAAKC,UAAU0U,GACpD,GAIW/E,EAAgBxa,MAC3BqB,EACAiQ,EACArI,EACAxF,EACA0N,EACAqO,EACA/M,KAEAhT,QAAQC,IAAI,mCAAoC2B,GAGhD,MAAM4d,EAAaD,EAAqB3d,EAAMiQ,GAC9C7R,QAAQC,IAAI,+BAAgCuf,GAC5Cxf,QAAQC,IAAI,gBAAiB8f,GAG7B,MAAMC,EAAsBD,EAActN,OAAQwN,IAChD,GAAsC,aAAlCA,EAAUpa,MAAMkS,cAA8B,CAMhD,OALerG,EAAgBjE,KAC5ByS,GACCA,EAAOC,aAAeF,EAAU1W,IACA,WAAhC2W,EAAOE,OAAOrI,cAGpB,CACA,OAAO,IAGT/X,QAAQC,IAAI,2BAA4B+f,GAGxC,MAAMlF,EAAc,GAEpB0E,EAAWpS,QAASiT,IAClB,MAAMC,EAAYN,EAAoBvN,OACnC8N,IAAWA,EAAMV,QAAQ3e,SAASmf,IAElCxd,IAAK0d,GAAUA,EAAMpT,MACrBqI,KAAK,MAEU,KAAd8K,GAAkC,cAAdA,GACtBxF,EAAY5N,KAAK,CAAEgO,QAASmF,EAASG,OAAQF,MAGjDtgB,QAAQC,IAAI,yBAA0B6a,GAGtC,IAAIhG,EAAe,GACnBgG,EAAY1N,QAASyD,IAAU,IAADoK,EAC5B,MAAMwF,EAEL,QAFexF,EAAGpJ,EAAUpE,KAC1B3K,GAAUA,EAAMyG,KAAOsH,EAAKqK,gBAC9B,IAAAD,OAAA,EAFkBA,EAEhBxW,MACGic,EAAO,iCAAAzM,OAAoCwM,EAAU,sCAAAxM,OAAqCpD,EAAK2P,QACrG1L,GAAY,GAAAb,OAAOyM,EAAO,QAG5B1gB,QAAQC,IAAI,mBAAoB6U,GAGhC,MAAM6L,EAAqBnB,EAAW/M,OACnClJ,IAAQuR,EAAY9Z,KAAM6P,GAASA,EAAKqK,UAAY3R,IAQvD,GANAvJ,QAAQC,IACN,iDACA0gB,GAIEA,EAAmB7e,OAAS,EAAG,CACjC,MAAM8e,EACJ,+FAEIhB,EAAe,CACnBrW,GAAIC,EACJxF,KAAMA,EACN6b,QAASc,EACT9X,KAAM,kBAGR7I,QAAQC,IAAI,qBAAsB2f,GAElC,IACE,MAAMiB,QAAyBtV,EAAAA,EAAAA,IAC7B,OACAqV,EACAhB,GAGF5f,QAAQC,IAAI,qBAAsBkL,KAAKC,UAAUyV,GACnD,CAAE,MAAO9e,GACP/B,QAAQ+B,MAAM,8BAA+BA,EAC/C,CACF,CAEA,GACE4e,EAAmB7e,OAAS,GAC5Bie,EAAcje,OAAS,GACd,iBAATkC,GACAgP,EACA,CACA,IAAI4N,EACF,+FAEEhB,EAAe,CACjBrW,GAAIC,EACJxF,KAAMA,EACN6b,QAASc,EACTG,OAAQf,EACRlX,KAAM,kBAER,MAAMkY,QAA8BxV,EAAAA,EAAAA,IACjC,OACDqV,EACAhB,GAGF5f,QAAQC,IACN,0BACAkL,KAAKC,UAAU2V,GAEnB,CAEA,MAAO,CACLlM,SAAS,EACT6L,QAAS,0BACT5F,YAAaA,EACbhG,aAAcA,IAILF,EAAWrU,MACtB8S,EACAC,EACA0N,EACA1V,EACAoU,EACAuB,EACAlB,EACA/b,EACAwQ,EACAjB,EACA7B,KAEA,IACE,MAAMwP,EAAkBC,4DACxBnhB,QAAQC,IAAI,+CACZD,QAAQC,IAAI,2BAA4B+D,GACxChE,QAAQC,IAAI,8BAA+BsT,GAC3CvT,QAAQC,IAAI,2BAA4ByR,GACxC,MACM0P,QAAgBC,EAAAA,EAAAA,MAChBC,EAAgB/gB,MAAOuK,EAAKC,EAAMG,KACtClL,QAAQC,IAAI,gBAAiB6K,GAC7B9K,QAAQC,IAAI,gBAAiBkL,KAAKC,UAAUL,EAAM,KAAM,IAEjD,IAAIwW,QAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqB5W,EAAK,CAChCI,SACAI,SAAOS,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFT,GAAO,IACV,eAAgB,qBAElB1J,KAAMuJ,KAAKC,UAAUL,GACrB/G,KAAM,OACN2d,WAAa9W,IACX7K,QAAQC,IAAI,qBAAsB4K,GAClC2W,EAAQ3W,IAEV+W,UAAY7f,IACV/B,QAAQ+B,MAAM,kBAAmBA,GACjC0f,EAAO1f,SASf,IAAIie,EAAsBD,EAActN,OAAQwN,IAE9C,GADAjgB,QAAQC,IAAI,wBAAyBggB,GACC,aAAlCA,EAAUpa,MAAMkS,cAA8B,CAChD/X,QAAQC,IAAI,sBAAuBggB,GACnC,MAAMC,EAASxO,EAAgBjE,KAC5ByS,GACCA,EAAOC,aAAeF,EAAU1W,IACA,WAAhC2W,EAAOE,OAAOrI,eAGlB,OADA/X,QAAQC,IAAI,iCAAkCigB,IACtCA,CACV,CAEA,OADAlgB,QAAQC,IAAI,qCAAsCggB,EAAUpa,QACrD,IAET7F,QAAQC,IAAI,4BAA6B+f,GAEzC,IAAIhK,EAAW,GACfzC,EAAWnG,QAASsH,IAElB,GAAIA,EAAUP,UAAW,CACvB,IAAI0N,EAAa,GACjB7B,EAAoB5S,QAAS0U,IACtBA,EAAmBjC,QAAQ3e,SAASwT,EAAUnL,KACjDsY,EAAW3U,KAAK,CACd6U,QAASD,EAAmBvY,GAC5ByY,UAAWF,EAAmB3U,SAIhC0U,EAAW/f,OAAS,GACtBkU,EAAS9I,KAAK,CACZ3D,GAAImL,EAAUnL,GACd9E,MAAOiQ,EAAUjQ,MACjBqc,OAAQe,EACR7d,KAAM0Q,EAAUN,MAGtB,IAEF,IAAIU,EAAe,GACnB9U,QAAQC,IAAI,cAAe+V,GAC3BA,EAAS5I,QAASyD,IAChB,IAAI6P,EAAU,GAGd,GACE9I,MAAMqK,QAAQpR,EAAKiQ,SACnBjQ,EAAKiQ,OAAOoB,MAAO3B,GAAUA,EAAMyB,WACnC,CACA,MAAMG,EAActR,EAAKiQ,OACtBje,IAAK0d,GAAUA,EAAMyB,WACrBxM,KAAK,MACRxV,QAAQC,IAAI,oBAAqBkiB,GAE/BzB,EAD8B,QAA5B7P,EAAK7M,KAAK+T,cACL,GAAA9D,OAAMpD,EAAKpM,MAAK,yDAAAwP,OAAwDkO,GAExE,8BAAAlO,OAAiCpD,EAAKpM,MAAK,sCAAAwP,OAAqCkO,GAEzFniB,QAAQC,IAAI,cAAeygB,EAC7B,MAEEA,EAAO,0BAAAzM,OAA6BpD,EAAKpM,MAAK,KAIhDqQ,GAAY,GAAAb,OAAOyM,EAAO,QAE5B1gB,QAAQC,IAAI+V,GACZhW,QAAQC,IAAI,2BAA4B6U,GAExC,IAAI0K,EAAajM,EACdd,OACEiC,GACkC,QAAjCA,EAAUN,KAAK2D,gBACd/B,EAAShV,KAAMohB,GAAcA,EAAU7Y,KAAOmL,EAAUnL,KAE5D1G,IAAK6R,GAAcA,EAAUnL,IAChCvJ,QAAQC,IAAI,mBAAoBuf,GAChC,IAAI6C,EAAa,CAAC,EAClB9O,EAAWnG,QAASsH,KACSsB,EAAShV,KACjCohB,GAAcA,EAAU7Y,KAAOmL,EAAUnL,MAIR,WAAjCmL,EAAUN,KAAK2D,eACoB,QAAjCrD,EAAUN,KAAK2D,eAA2BrD,EAAUP,aAEvDkO,EAAW3N,EAAUR,UAAYQ,EAAUP,aAG/CnU,QAAQC,IAAI,kBAAmBoiB,GAE/B,IAAIC,EAAmB/O,EACpBd,OACEiC,GACCA,EAAUP,YACT6B,EAAShV,KAAMohB,GAAcA,EAAU7Y,KAAOmL,EAAUnL,KAE5D1G,IAAK6R,GAAcA,EAAUnL,IAIhC,GAFAvJ,QAAQC,IAAI,4BAA6BqiB,GAErC9C,EAAW1d,OAAS,EAAG,CACzB,IAAI8e,EACF,+FACEhB,EAAe,CACjBrW,GAAImW,EACJ1b,KAAMA,EACN6b,QAASL,EACT3W,KAAM,kBAER,MAAMgY,QAAyBtV,EAAAA,EAAAA,IAC7B,OACAqV,EACAhB,GAGF5f,QAAQC,IAAI,oBAAqBkL,KAAKC,UAAUyV,GAClD,CAEA,GAAI5K,OAAOC,KAAKmM,GAAYvgB,OAAS,EAAG,CAAC,IAADygB,EACtC,MAAMC,EAAU,GAAAvO,OAAMiN,EAAe,qDAAAjN,OAAoDyL,GACnF7U,QAAiByW,EAAckB,EAAY,GAAI,OACrDxiB,QAAQC,IAAI,mBAAoB4K,GAChC,IAAI4X,GAA4B,QAAlBF,EAAA1X,EAAS6X,OAAO,UAAE,IAAAH,OAAA,EAAlBA,EAAoBE,UAAW,GAC7CJ,EAAoB,QAAII,EAExB,MAAME,EAAQ,0GAAA1O,OAA6GyL,SACrHnU,EAAAA,EAAAA,IAAU,QAAQoX,EAAUN,GAClCriB,QAAQC,IAAI,iCACd,CAEA,GACEqiB,EAAiBxgB,OAAS,GAC1Bie,EAAcje,OAAS,GACd,iBAATkC,EACA,CACA,IAAI4c,EACF,+FAEEhB,EAAe,CACjBrW,GAAImW,EACJ1b,KAAMA,EACN6b,QAASyC,EACTxB,OAAQf,EACRlX,KAAM,kBAER,MAAMkY,QAA8BxV,EAAAA,EAAAA,IACjC,OACDqV,EACAhB,GAGF5f,QAAQC,IACN,0BACAkL,KAAKC,UAAU2V,GAEnB,CACA,GAAIvM,EAAa1S,OAAS,EAAG,CAC3B,IAAI6d,EACF,iGAEEC,EAAe,CACjBrW,GAAImW,EACJ1b,KAAMA,EACN6b,QAASrL,GAEX,MAAMsL,QAA2BvU,EAAAA,EAAAA,IAC/B,OACAoU,EACAC,GAGF5f,QAAQC,IAAI,sBAAuBkL,KAAKC,UAAU0U,GACpD,CAIA,OAFA9f,QAAQC,IAAI,wDAEL,CACL4U,SAAS,EACT6L,QAAS,0BACT1K,SAAUA,EACVlB,aAAcA,EAElB,CAAE,MAAO/S,GAEP,OADA/B,QAAQ+B,MAAM,kBAAmBA,GAC1B,CAAE8S,SAAS,EAAO6L,QAAS,sBAAuB3e,QAC3D,E,uFClaF,MAuHA,EAvHmBO,IAAiB,IAAhB,OAAEyW,GAAQzW,EAC5B,MAAMsgB,GAAkBrM,EAAAA,EAAAA,SAAQ,KAE9B,MAAMsM,EAAc9J,EAAO+J,OAAO,CAACC,EAAQhhB,KACzC,MAAMihB,EAAWjhB,EAAMkhB,MAAM,cACvBC,EAAcnhB,EAAMkhB,MAAM,mCAC1BE,EAAWphB,EAAMnB,MAAM,MAAMwiB,MAAM,GAAG5N,KAAK,MAE3CwD,EAAYgK,EAAWA,EAAS,GAAK,MACrC/J,EAAaiK,EACfA,EAAY,GACZnhB,EAAMb,SAAS,sBAAuB,YACtC,sBACA,MAaJ,OAXK6hB,EAAO/J,KACV+J,EAAO/J,GAAa,CAClBA,YACAvR,QAAS,GACTsR,OAAQ,KAIZgK,EAAO/J,GAAWvR,QAAQyF,KAAK+L,GAC/B8J,EAAO/J,GAAWD,OAAO7L,KAAKiW,GAAYphB,GAEnCghB,GACN,CAAC,GAGJ,OAAO9M,OAAOoN,OAAOR,GAAaS,KAChC,CAACC,EAAGC,IAAMC,OAAOF,EAAEvK,WAAayK,OAAOD,EAAExK,aAE1C,CAACD,IAEE2K,EAAQ,IAAIC,EAAAA,GAAkB,CAClCC,YAAY,EACZC,cAAe,KAGXC,EAAc3M,IAAoC,IAAnC,IAAE4M,EAAG,MAAEnO,EAAK,MAAE5S,EAAK,OAAEmc,GAAQhI,EAChD,MAAMpV,EAAQ6gB,EAAgBhN,GAC9B,OACEzT,EAAAA,EAAAA,KAAC6hB,EAAAA,GAAY,CAEXN,MAAOA,EACPO,YAAa,EACbC,SAAUtO,EACVuJ,OAAQA,EAAOvc,UAEfG,EAAAA,EAAAA,MAAA,OAAKC,MAAOA,EAAOsD,UAAU,YAAW1D,SAAA,EACtCT,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,aAAatD,MAAO,CAAEqF,MAAO,OAAQzF,SACjDb,EAAMiX,aAET7W,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,aAAatD,MAAO,CAAEqF,MAAO,OAAQzF,SACjDb,EAAM0F,QAAQ5E,IAAI,CAACshB,EAAQxX,KAC1BxK,EAAAA,EAAAA,KAAA,OAAAS,SAAcuhB,GAAJxX,OAGdxK,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,aAAatD,MAAO,CAAEqF,MAAO,OAAQzF,UAClDT,EAAAA,EAAAA,KAAA,MAAImE,UAAU,aAAY1D,SACvBb,EAAMgX,OAAOlW,IAAI,CAACuhB,EAAKzX,KACtBxK,EAAAA,EAAAA,KAAA,MAAAS,SAAawhB,GAAJzX,YAlBZoX,IA2BX,OACEhhB,EAAAA,EAAAA,MAAA,OAAKuD,UAAU,wBAAuB1D,SAAA,EACpCT,EAAAA,EAAAA,KAACkiB,EAAAA,EAAa,CACZld,QAAQ,SACRuZ,SACE3d,EAAAA,EAAAA,MAAAJ,EAAAA,SAAA,CAAAC,SAAA,EACET,EAAAA,EAAAA,KAAA,UAAAS,SAAQ,uBAAiB,6HAEIggB,EAAgB9gB,OAAO,oBAGxDwE,UAAU,kBAGZvD,EAAAA,EAAAA,MAAA,OAAKuD,UAAU,gBAAe1D,SAAA,EAE5BG,EAAAA,EAAAA,MAAA,OAAKuD,UAAU,gBAAe1D,SAAA,EAC5BT,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,cAActD,MAAO,CAAEqF,MAAO,OAAQzF,SAAC,gBAGtDT,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,cAActD,MAAO,CAAEqF,MAAO,OAAQzF,SAAC,iBAGtDT,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,cAActD,MAAO,CAAEqF,MAAO,OAAQzF,SAAC,0BAMxDT,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,kBAAiB1D,UAC9BT,EAAAA,EAAAA,KAACmiB,EAAAA,GAAS,CAAA1hB,SACP0Y,IAAA,IAAC,OAAEhT,EAAM,MAAED,GAAOiT,EAAA,OACjBnZ,EAAAA,EAAAA,KAACoiB,EAAAA,GAAI,CACHlc,MAAOA,EACPC,OAAQA,EACRkc,SAAU5B,EAAgB9gB,OAC1B2iB,UAAWf,EAAMe,UACjBC,yBAA0BhB,EAC1BI,YAAaA,gBC9F7B,EApB2BxhB,IAA+B,IAA9B,KAAEyE,EAAI,OAAEC,EAAM,OAAE+R,GAAQzW,EAElD,OADAtC,QAAQC,IAAI,mCAAoC8Y,IAE9C5W,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CACVC,KAAMA,EACNC,OAAQA,EACRvC,MAAM,iBACNwC,cAAe,CACb,CACEC,MAAO,QACPC,QAAS,SACTvD,QAASoD,IAEXpE,UAEFT,EAAAA,EAAAA,KAACwiB,EAAU,CAAC5L,OAAQA,M,iGCA1B,MA4GA,GA5GuB6L,EAAAA,EAAAA,YACrB,CAAAtiB,EAA8CkF,KAAS,IAAtD,KAAE5F,EAAI,QAAE6F,EAAO,UAAEC,EAAS,OAAElD,EAAM,MAAEqB,GAAOvD,EAC1C,MAAM,iBAAEyD,IAAqBnG,EAAAA,EAAAA,MACtBilB,EAAcC,IAAmB/kB,EAAAA,EAAAA,UAAS,CAAC,IAElDG,EAAAA,EAAAA,WAAU,KACR4kB,EAAgB,CAAC,IAChB,CAACljB,IAEJ,MAAM0F,EAAWA,KACf,MACMyd,EADeC,EAAMC,sBAAsBC,KACdriB,IAChCgO,GAASA,EAAKuG,SAAS,oBAGG,IAAzB2N,EAAcjjB,QAKlB4F,EAAUqd,GACVD,EAAgB,CAAC,IALf/e,EAAiBof,EAAAA,MASrBC,EAAAA,EAAAA,qBAAoB5d,EAAK,MACvBF,cAGF,MAAM+d,GAAkB9O,EAAAA,EAAAA,SAAQ,IAYvB,CAXiB,CACtBhN,GAAI,SACJ2N,KAAMC,IAAA,IAAC,IAAEvK,GAAKuK,EAAA,OACZhV,EAAAA,EAAAA,KAAA,SACE6B,KAAK,WACLsC,UAAU,mBACVgf,QAAS1Y,EAAI2Y,gBACbhb,SAAUqC,EAAI4Y,kCAIQ/d,GAC3B,CAACA,IAEEud,GAAQS,EAAAA,EAAAA,IAAc,CAC1B7jB,OACA6F,QAAS4d,EACTxf,MAAO,CAAEgf,gBACTa,oBAAoB,EACpBC,qBAAsBb,EACtBc,iBAAiBA,EAAAA,EAAAA,QAGnB,OACE7iB,EAAAA,EAAAA,MAAAJ,EAAAA,SAAA,CAAAC,SAAA,EACEG,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACET,EAAAA,EAAAA,KAAA,UACE6B,KAAK,SACLsC,UAAU,+BACV1C,QAASA,KACPohB,EACGa,cACAX,KAAK9X,QAASR,GAAQA,EAAIkZ,gBAAe,KAC5CljB,SACH,gBAGDT,EAAAA,EAAAA,KAAA,UACE6B,KAAK,SACLsC,UAAU,4BACV1C,QAASA,KACPohB,EACGa,cACAX,KAAK9X,QAASR,GAAQA,EAAIkZ,gBAAe,KAC5CljB,SACH,oBAKFoiB,EAAMa,cAAcX,KAAKpjB,OAAS,GACjCK,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,gBAAgBtD,MAAO,CAAE+iB,UAAW,QAASnjB,SACzDoiB,EAAMa,cAAcX,KAAKriB,IAAK+J,IAC7B7J,EAAAA,EAAAA,MAAA,OAEEuD,UAAU,8CACVtD,MAAO,CACLgjB,gBAAiBpZ,EAAI2Y,gBAAkB,UAAY,WACnD3iB,SAAA,EAEFT,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,OAAM1D,UAClBqjB,EAAAA,EAAAA,IACCrZ,EAAIsZ,kBAAkB,GAAG/B,OAAOgC,UAAUjP,KAC1CtK,EAAIsZ,kBAAkB,GAAGE,iBAG7BjkB,EAAAA,EAAAA,KAAA,OAAAS,SAAMgK,EAAIwK,SAAS3P,EAAQ,GAAGpC,iBAZzBuH,EAAIrD,QAiBfpH,EAAAA,EAAAA,KAAA,KAAGmE,UAAU,iBAAgB1D,SAAC,0B,iECtHxC,MAeA,EAfsBN,IAKf,IALgB,QACrB6E,EAAU,OAAM,QAChBuZ,EAAO,KACP3Z,GAAO,EAAI,UACXT,EAAY,IACbhE,EACC,OAAKyE,GAGH5E,EAAAA,EAAAA,KAACkkB,EAAAA,EAAK,CAAClf,QAASA,EAASb,UAAWA,EAAU1D,SACb8d,IAJjB,K,2ECNpB,MA4BA,EA5BoBpe,IAAuD,IAAtD,KAAEyE,EAAI,OAAEC,EAAM,MAAEvC,EAAK,SAAE7B,EAAQ,cAAEqE,GAAe3E,EACnE,OACES,EAAAA,EAAAA,MAACujB,EAAAA,EAAK,CAACvf,KAAMA,EAAMC,OAAQA,EAAQvD,KAAK,KAAK8iB,UAAQ,EAAA3jB,SAAA,EACnDT,EAAAA,EAAAA,KAACmkB,EAAAA,EAAME,OAAM,CAACC,aAAW,EAAA7jB,UACvBT,EAAAA,EAAAA,KAACmkB,EAAAA,EAAM5P,MAAK,CAAA9T,SAAE6B,GAAS,mBAEzBtC,EAAAA,EAAAA,KAACmkB,EAAAA,EAAMI,KAAI,CAAA9jB,SAAEA,KACbT,EAAAA,EAAAA,KAACmkB,EAAAA,EAAMK,OAAM,CAAA/jB,SACVqE,EACCA,EAAcpE,IAAI,CAAC+jB,EAAKhR,KACtBzT,EAAAA,EAAAA,KAACwH,EAAAA,EAAM,CAELxC,QAASyf,EAAIzf,SAAW,YACxBvD,QAASgjB,EAAIhjB,QAAQhB,SAEpBgkB,EAAI1f,OAJA0O,KAQTzT,EAAAA,EAAAA,KAACwH,EAAAA,EAAM,CAACxC,QAAQ,YAAYvD,QAASoD,EAAOpE,SAAC,e","sources":["pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","services/api/PlantAssignment/createMFGCA.js","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js","services/api/PlantAssignment/saveTableDataService.js","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Popup/Popup.jsx","components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n        {!isMFGCA && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n        )}\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./plantAssignment.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n        <div class=\"mt-3\">\r\n          <div class=\"row justify-content-center\">\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button\r\n                variant=\"link ms-auto\"\r\n                onClick={() => {\r\n                  const link = document.createElement(\"a\");\r\n                  link.href =\r\n                    \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                  link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                  link.click();\r\n                }}\r\n              >\r\n                Download Template\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileInputChange}\r\n                  disabled={isFileInputDisabled}\r\n                  ref={fileInputRef} // Attach the ref to the file input\r\n                />\r\n              </Form.Group>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                <FontAwesomeIcon icon={faRotateLeft} />\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n                }}\r\n              >\r\n                <Button\r\n                  // variant=\"outline-primary\"\r\n                  variant={\r\n                    isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                  }\r\n                  onClick={handleSubmit}\r\n                  disabled={isCreateButtonDisabled} // Disable the button\r\n                >\r\n                  Create Manufacturing CA\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import * as XLSX from \"xlsx\";\r\nimport { getAllPlants } from \"./allPlantSevice\";\r\nimport { fetchCsrfToken } from \"./fetchCsrfService\";\r\nimport axios from \"axios\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\n// Import useToastWithProgress\r\n \r\n// const { showSuccessToastWithProgress, showErrorToastWithProgress } = useToastWithProgress();\r\n \r\n \r\nconst fetchData = async (\r\n  url,\r\n  body = null,\r\n  method = \"GET\"\r\n  // headers = {}\r\n) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\");\r\n  console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n \r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n// Function to create the manufacturing CA body from Excel data and allPlants\r\nexport const createManufacturingCABody = async (\r\n  excelData,\r\n  allPlantsData,\r\n  companyName,\r\n  collabSpace\r\n) => {\r\n  const items = [];\r\n  const uniquePlantTitles = new Set();\r\n \r\n  for (let i = 1; i < excelData.length; i++) {\r\n    const row = excelData[i];\r\n    if (row.length >= 2 && row[0] && row[1]) {\r\n      const itemName = row[0].toString().trim();\r\n      const plantsList = row[1].toString().includes(\",\")\r\n        ? row[1]\r\n            .toString()\r\n            .split(\",\")\r\n            .map((p) => p.trim())\r\n        : [row[1].toString().trim()];\r\n      items.push({\r\n        name: itemName,\r\n        plants: plantsList,\r\n      });\r\n      plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n    }\r\n  }\r\n \r\n  const parentPlants = [];\r\n  uniquePlantTitles.forEach((plantTitle) => {\r\n    const matchedPlant = allPlantsData.find((plant) => {\r\n      const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n      return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n    });\r\n    if (matchedPlant) {\r\n      parentPlants.push({\r\n        PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n        PlantID: matchedPlant.id,\r\n      });\r\n    }\r\n  });\r\n \r\n  return {\r\n    CATitle: \"FromAutomation\",\r\n    CAOrganization: companyName, // company name credentials\r\n    CACollabSpace: collabSpace, // from credentials\r\n    CAOwner: \"e1331143\",\r\n    Items: items,\r\n    ParentPlants: parentPlants,\r\n  };\r\n};\r\n \r\n// Function to make the API call\r\nexport const callManufacturingCAApi = async (body) => {\r\n  const manufacturingCAUrl =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/createMFGCA\";\r\n \r\n // console.log(\"Headers for Manufacturing CA API:\", CAHeaders);\r\n \r\n  const response = await fetchData(\r\n    manufacturingCAUrl,\r\n    body,\r\n    \"POST\"\r\n  );\r\n  console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n  return response;\r\n};\r\n \r\n// Function to handle file change (only validation)\r\nexport const handleFileChange = async (\r\n  event,\r\n  setValidationErrors,\r\n  setShowErrorsModal,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n  setValidatedData, // New parameter to store validated data\r\n  setSelectedFiles,\r\n  setIsCreateButtonDisabled\r\n) => {\r\n \r\n  console.log(\"[handleFileChange] Function triggered\");\r\n \r\n  const files = event.target.files;\r\n  const validExtensions = [\r\n    \"application/vnd.ms-excel\",\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  ]; // MIME types for .xls and .xlsx\r\n \r\n  // Check if all files are valid Excel files\r\n  const invalidFiles = Array.from(files).filter(\r\n    (file) =>\r\n      !validExtensions.includes(file.type) &&\r\n      !file.name.toLowerCase().endsWith(\".xls\") &&\r\n      !file.name.toLowerCase().endsWith(\".xlsx\")\r\n  );\r\n \r\n  if (invalidFiles.length > 0) {\r\n    showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n    event.target.value = \"\"; // Reset the file input\r\n    setIsCreateButtonDisabled(true); // Disable the button if invalid files are present\r\n    return;\r\n  }\r\n \r\n  const file = files[0];\r\n  const reader = new FileReader();\r\n \r\n  reader.onload = async (e) => {\r\n    const data = new Uint8Array(e.target.result);\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n \r\n    console.log(\"Parsed Excel Data:\", jsonData);\r\n \r\n    // Validation: Check if the file is empty\r\n    if (jsonData.length === 0) {\r\n      showErrorToast(\"File is empty\");\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n   \r\n \r\n    // Validation: Check if headers match \"Item\" and \"Plants\"\r\n    const normalizedHeaders = jsonData[0].map((header) =>\r\n      header?.toString().trim().toLowerCase()\r\n    ); // Normalize headers\r\n    console.log(\"Normalized Headers:\", normalizedHeaders);\r\n \r\n    if (normalizedHeaders[0] !== \"item\" || normalizedHeaders[1] !== \"plants\") {\r\n      showErrorToast(\r\n        \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n      );\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n    // Validation: Check if the file contains only headers and no data\r\n    if (jsonData.length === 1) {\r\n      showErrorToast(\"No data present in the file. Only headers are present.\");\r\n      return;\r\n    }\r\n \r\n    const errors = [];\r\n    for (let i = 1; i < jsonData.length; i++) {\r\n      const row = jsonData[i];\r\n      const item = row[0];\r\n      const plants = row[1];\r\n \r\n      if (!item && plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Item\",\r\n          errorDescription: \"Items can't be empty\",\r\n        });\r\n      }\r\n \r\n      if (item && !plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Plants\",\r\n          errorDescription: \"Plants value is missing\",\r\n        });\r\n      }\r\n    }\r\n \r\n    console.log(\"Validation Errors:\", errors);\r\n \r\n    if (errors.length > 0) {\r\n      const formattedErrors = errors.map(\r\n        (error) =>\r\n          `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n      );\r\n \r\n      console.log(\"[createMFGCA.js] Formatted Errors:\", formattedErrors);\r\n \r\n      setValidationErrors(formattedErrors);\r\n      setShowErrorsModal(true);\r\n      setIsCreateButtonDisabled(true);\r\n    } else {\r\n      showSuccessToast(\"File uploaded successfully with no errors\");\r\n      setValidatedData(jsonData); // Store validated data for further processing\r\n      setSelectedFiles(file);// Update selectedFiles state only after successful validation\r\n      setIsCreateButtonDisabled(false);\r\n    }\r\n  };\r\n \r\n  reader.onerror = () => {\r\n    showErrorToast(\"Failed to read the file. Please try again.\");\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n \r\n  reader.readAsArrayBuffer(file);\r\n};\r\n \r\n// New function to process Manufacturing CA\r\nexport const processManufacturingCA = async (\r\n  validatedData,\r\n  showSuccessToastWithProgress,\r\n  showErrorToastWithProgress,\r\n  handleReset\r\n) => {\r\n  try {\r\n \r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    let credentials = window.widget.getValue(\"Credentials\");\r\n    console.log(\"credentials createMFGCA\", credentials);\r\n    const credentialsParts = credentials.split(\".\");\r\n    console.log(\"credentialsParts\", credentialsParts);\r\n    const companyName = credentialsParts[1]; // Value after the first dot\r\n    console.log(\"Company Name:\", companyName);\r\n    const collabSpace = credentialsParts[2]; // Value after the second dot\r\n \r\n    console.log(\"Collab Space:\", collabSpace);\r\n \r\n    const allPlantsData = await getAllPlants([collabSpace], CAHeaders, \"\");\r\n    console.log(\"Fetched allPlantsData:\", allPlantsData);\r\n \r\n    const manufacturingCABody = await createManufacturingCABody(\r\n      validatedData,\r\n      allPlantsData,\r\n      companyName,\r\n      collabSpace\r\n    );\r\n    console.log(\r\n      \"[processManufacturingCA] Manufacturing CA Body (JSON):\",\r\n      JSON.stringify(manufacturingCABody, null, 2)\r\n    );\r\n \r\n    // Pass headers to callManufacturingCAApi\r\n    const response = await callManufacturingCAApi(\r\n      manufacturingCABody\r\n    );\r\n    console.log(\"[processManufacturingCA] Manufacturing CA API Response:\", response);\r\n \r\n    // Extract CAName from the response\r\n    const CAName = response?.CAName ;\r\n    //showSuccessToastWithProgress(`Manufacturing CA created successfully! Name: ${CAName}`);\r\n    showSuccessToastWithProgress(\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n    <span>\r\n      Manufacturing CA created successfully! Name: <strong>{CAName}</strong>\r\n    </span>\r\n    <button\r\n      onClick={(event) => {\r\n        event.stopPropagation(); // Prevent the toast from closing\r\n        navigator.clipboard.writeText(CAName); // Copy the CAName to clipboard\r\n      }}\r\n      style={{\r\n        background: \"none\",\r\n        border: \"none\",\r\n        cursor: \"pointer\",\r\n        marginLeft: \"8px\",\r\n        color: \"grey\",\r\n      }}\r\n      title=\"Copy CA Name\"\r\n    >\r\n      <FaRegCopy size={14} />\r\n    </button>\r\n  </div>\r\n    );\r\n    handleReset();\r\n    // showSuccessToast(\"Manufacturing CA created successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error in processManufacturingCA:\", error);\r\n    showErrorToastWithProgress(\"Failed to create Manufacturing CA. Please try again.\");\r\n  }\r\n};","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = usePlantDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n        //added by ayush\r\n        showSuccessToastWithProgress(\r\n          \"Plants removed successfully from the table.\"\r\n        );\r\n        await handleRemoveData(\r\n          allPlants,\r\n          removedTitles,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type\r\n        );\r\n      } else {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable || CAItemDetailsTable.length === 0) return;\r\n\r\n  //   // ✅ Always derive MFGCA from item MBOM, even if type is not \"Change Action\"\r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n\r\n  //   if (type === \"Change Action\") {\r\n  //     const isAnyMFGCA = CAItemDetailsTable.some(\r\n  //       (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //     );\r\n\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFGCA,\r\n  //     }));\r\n\r\n  //     if (isAnyMFGCA) {\r\n  //       setIsRemoveMode(false); // 🚀 Immediately set RemoveMode false after confirming MFGCA\r\n  //     }\r\n  //   }\r\n  // }, [CAItemDetailsTable, type, dispatch]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress,\r\n        handleReset\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n"],"names":["WidgetLifecycle","handleDrop","usePlantDropableArea","showSuccessToast","showErrorToast","useToast","loading","setLoading","useState","console","log","useEffect","window","widget","trace","addEvent","async","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","includes","isAutoTriggeredRefresh","warn","removeItem","latestDraggedData","store","getState","droppedObject","droppedObjectData","initialDraggedData","data","items","length","error","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","_jsx","Loader","PlantRenderer","_ref","plants","itemId","isRemoveMode","handleRemovePlant","_Fragment","children","map","plant","_jsxs","style","marginRight","display","alignItems","color","fontWeight","PlantName","PlantERPStatus","AiOutlineClose","size","cursor","marginLeft","onClick","PlantID","getTableData","tableData","type","CAData","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Change","CAName","title","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","uniqueColumns","accessorKey","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","state","isMFGCA","showWarningToast","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","className","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","show","onHide","footerButtons","label","variant","_availablePlantRef$cu","current","addPlant","AvailablePlant","ref","columns","addedItem","newItems","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","performSearch","useInterComSearch","Image","width","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","id","objectId","objectType","class","Button","link","document","createElement","href","download","click","Form","Group","controlId","Control","multiple","onChange","disabled","FontAwesomeIcon","icon","faRotateLeft","callManufacturingCAApi","response","url","body","arguments","undefined","method","JSON","stringify","axios","headers","fetchData","processManufacturingCA","validatedData","showSuccessToastWithProgress","showErrorToastWithProgress","csrfTokenHeaders","fetchCsrfToken","CAHeaders","_objectSpread","credentials","getValue","credentialsParts","companyName","collabSpace","allPlantsData","getAllPlants","manufacturingCABody","excelData","uniquePlantTitles","Set","i","row","itemName","toString","trim","plantsList","p","push","name","forEach","add","parentPlants","plantTitle","matchedPlant","find","replace","CATitle","CAOrganization","CACollabSpace","CAOwner","Items","ParentPlants","createManufacturingCABody","event","stopPropagation","navigator","clipboard","writeText","background","border","FaRegCopy","PlantAssignment","useToastWithProgress","isAddingPlant","setIsAddingPlant","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","initializeDroppableArea","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","dispatch","useDispatch","securityContext1","useCallback","plantId","item","extractPlantData","plantData","plantName","selectedTableRows","useSelector","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","isDropped","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","getUniquePlant","sourceData","assignedTablePlants","flatMap","_item$Plant","uniqueTablePlants","filter","updateTableData","updatedData","prevKey","cardData","_droppedObjectData$in5","_droppedObjectData$in6","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in7","_droppedObjectData$in8","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classid","classitem","test","concat","MBOMName","MBOMValue","Type","initialClass","_allPlants$find3","classObject","rowstoDelete","_allPlants$find4","classItem","result","saveData","success","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","userSelect","position","paddingRight","handleCopy","textToCopy","join","right","top","fontSize","index","formattedFinalMessage","autoClose","finalobj","ErrorObj","Object","keys","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","useMemo","uniqueTableData","getUniqueTableData","Title","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","cell","_ref2","original","value","flexDirection","justifyContent","DragAndDropComponent","files","target","validExtensions","Array","from","file","toLowerCase","endsWith","reader","FileReader","onload","Uint8Array","e","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","normalizedHeaders","errors","rowNumber","columnName","errorDescription","formattedErrors","onerror","readAsArrayBuffer","handleFileChange","finally","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","PlantAssignmentToolbarNativeCta","prev","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","existsInRedux","_droppedObjectData$in3","_droppedObjectData$in4","ErrorObject","handleAddData","erroredPlants","_allPlants$find","ClassID","validPlants","invalidPlants","prevUniqueData","_ref3","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","setCAItemDetails","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","selectedTitles","removedTitles","prevUniquePlants","handleRemoveData","ReusableTable","ContentErrorsModal","_droppedObjectData$in9","_droppedObjectData$in0","_droppedObjectData$in1","objectData","payload","CAId","organization","caDetails","ca","_excluded2","PlantType","_droppedObjectData$in10","_droppedObjectData$in11","_droppedObjectData$in12","ItemMBOM","_originalItem$ItemPla","ci","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","querySelector","getElementById","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener","extractIdsFromTitles","newClasses","itemTitle","productId","declassifyUrl","classifybody","classes","declassifyResponse","productChilds","NotPropagableChilds","prodChild","change","identifier","action","classId","missingIn","child","Childs","classTitle","message","filteredNewClasses","classifyUrl","classifyResponse","childs","childclassifyResponse","initialAssignedClasses","AllClasses","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchOOTBData","Promise","resolve","reject","authenticatedRequest","onComplete","onFailure","prodchilds","notPropagableChild","childId","childName","isArray","every","childTitles","errorItem","updateBody","propagateClasses","_response$member$","nextApiUrl","cestamp","member","patchUrl","processedErrors","errorGroups","reduce","groups","rowMatch","match","columnMatch","errorMsg","slice","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","key","CellMeasurer","columnIndex","rowIndex","column","err","ReusableAlert","AutoSizer","List","rowCount","rowHeight","deferredMeasurementCache","ErrorPopup","forwardRef","rowSelection","setRowSelection","selectedItems","table","getSelectedRowModel","rows","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","checked","getIsSelected","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","columnDef","getContext","Alert","Modal","centered","Header","closeButton","Body","Footer","btn"],"sourceRoot":""}