{"version":3,"file":"static/js/718.f2740582.chunk.js","mappings":"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","sources":["services/api/refreshService.js","hooks/useRevisions.js","components/DragAndDrop/DragAndDropStandAlone.jsx","components/Card/cardwithdraganddrop.jsx","components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","components/SearchInput/SearchInput.jsx","services/api/PlantAssignment/fetchCsrfService.js","hooks/useToast.js","components/Button/Button.jsx","hooks/useBOSWidget.js","hooks/useBOSDropableArea.js","hooks/useInterComSearch.js","components/List/List.jsx","components/Card/Card.jsx","components/Loader/Loader.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/getRouteDetails.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/CADetailService.js","hooks/usePlantDropableArea.js","hooks/useDroppableArea.js","services/api/PlantAssignment/allPlantSevice.js"],"sourcesContent":["export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n","import useToast from \"../hooks/useToast\";\r\n\r\nimport api from \"../utils/api\"; // Import axios instance\r\nimport { MSG_REPLACE_SUCCESS, MSG_REPLACE_ERROR } from \"../utils/toastMessages\";\r\n\r\nconst useRevisions = () => {\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const fetchRevisionsAndParents = async (\r\n    objectId,\r\n    objectType,\r\n    relativePath\r\n  ) => {\r\n    if (!relativePath) {\r\n      console.error(\"[Fetch Revisions] ❌ Missing relative path.\");\r\n      return;\r\n    }\r\n\r\n    const parentURL = `/revFloat/getParents`;\r\n\r\n    try {\r\n      // Use the axios instance to make the POST request\r\n      const response = await api.post(parentURL, {\r\n        data: {\r\n          id: objectId,\r\n          type: objectType,\r\n          relativePath: relativePath,\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const parentDetails = response.data;\r\n\r\n        // 🚀 Return data instead of dispatching\r\n        return parentDetails;\r\n      } else {\r\n        throw new Error(\r\n          `[Fetch Revisions] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Fetch Revisions] ❌ Error occurred:\", error);\r\n      return null; // Ensure it returns null on error\r\n    }\r\n  };\r\n\r\n  const replaceRevisions = async (selectedParents, droppedData, userEmail) => {\r\n    const parentURL = `/revFloat/floatRevisions`; // Use relative path for axios\r\n\r\n    try {\r\n      // Make the POST request to the replacement API\r\n      const response = await api.post(parentURL, {\r\n        SelectedParents: selectedParents,\r\n        DroppedData: droppedData,\r\n        userEmail: userEmail,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Handle successful replacement\r\n        console.log(\"Replacement successful:\", response.data);\r\n        showSuccessToast(MSG_REPLACE_SUCCESS); // Show success toast\r\n        // You might want to update the Redux store or refetch data here\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(\r\n          `[Replacement API] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during replacement:\", error);\r\n      showErrorToast(MSG_REPLACE_ERROR); // Show error toast\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  return { fetchRevisionsAndParents, replaceRevisions };\r\n};\r\n\r\nexport default useRevisions;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropStandAlone = ({ widgetType }) => {\r\n  const plantDroppable = usePlantDropableArea();\r\n  const bosDropable = useBOSDropableArea();\r\n  const defaultDroppable = useDroppableArea();\r\n\r\n  const { initializeDroppableArea } =\r\n    widgetType === \"PlantAssignment\"\r\n      ? plantDroppable\r\n      : widgetType === \"bosWidget\"\r\n      ? bosDropable\r\n      : defaultDroppable;\r\n  const hasInitializedDroppable = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!hasInitializedDroppable.current) {\r\n      // console.log(\"[DragAndDrop] 🔄 Initializing droppable area...\");\r\n      initializeDroppableArea();\r\n      hasInitializedDroppable.current = true; // ✅ Prevent multiple calls\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropStandAlone;\r\n","import React, { useState } from \"react\";\r\nimport DragAndDropStandAlone from \"../DragAndDrop/DragAndDropStandAlone\";\r\nimport CardComponent from \"./Card\";\r\n\r\nconst CardWithDragAndDrop = ({ data, widgetType }) => {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const handleDragStart = () => {\r\n    // console.log(\"handleDragStart called\");\r\n    setIsDragging(true);\r\n  };\r\n\r\n  const handleDragEnd = () => {\r\n    // console.log(\"handleDragEnd called\");\r\n    // console.log(\"Before setIsDragging(false) - isDragging:\", isDragging);\r\n    setIsDragging(false);\r\n    // console.log(\"After setIsDragging(false) - isDragging:\", isDragging);\r\n  };\r\n  return (\r\n    <div className={`card-with-drag-and-drop ${isDragging ? \"dragging\" : \"\"}`}>\r\n      <DragAndDropStandAlone widgetType={widgetType} />\r\n      <CardComponent\r\n        data={data}\r\n        onDragStart={handleDragStart}\r\n        onDragEnd={handleDragEnd}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardWithDragAndDrop;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns, changedCells }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n  // Extract only the column name (remove row index prefix like '0_')\r\n  const columnName =\r\n    cell.column.id.split(\"_\").slice(1).join(\"_\") || cell.column.id;\r\n  const isChanged = changedCells?.[columnName];\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div\r\n          className=\"cell-content\"\r\n          style={{\r\n            color: isChanged ? \"red\" : \"inherit\",\r\n            fontWeight: isChanged ? \"bold\" : \"normal\",\r\n          }}\r\n        >\r\n          {cellContent}\r\n          <style>\r\n            {`\r\n        .cell-content select {\r\n          color: ${isChanged ? \"red\" : \"inherit\"} !important;\r\n          font-weight: ${isChanged ? \"bold\" : \"normal\"} !important;\r\n        }\r\n      `}\r\n          </style>\r\n        </div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  console.log(\"Widget Type:\", widgetType);\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  type,\r\n  widgetType,\r\n  latestRevision,\r\n  droppedRevision,\r\n  onSelectableRowsChange,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n    \r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (widgetType !== \"Revision_FLoat_Widget\" && widgetType !== \"Plant_Assignment_Widget\") {\r\n    var { updateTableData } = meta; // Need to work on this\r\n  }\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => {\r\n        const isSelectable = enableRowSelection(row.original); // Get row's selectability status\r\n\r\n        return (\r\n          <input\r\n            type=\"checkbox\"\r\n            disabled={!isSelectable} // Disable non-selectable rows\r\n            style={{\r\n              cursor: isSelectable ? \"pointer\" : \"not-allowed\", // Block cursor for non-selectable rows\r\n              opacity: isSelectable ? 1 : 0.5, // Make disabled checkboxes faded\r\n            }}\r\n            {...{\r\n              checked: row.getIsSelected(),\r\n              onChange: row.getToggleSelectedHandler(),\r\n            }}\r\n          />\r\n        );\r\n      },\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    return [selectionColumn, ...baseColumns];\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Jatin added this for testing, if needs to change and make it work in the parent component, then will change this.\r\n  useEffect(() => {\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      const selectableRows = tableData.filter(enableRowSelection);\r\n      onSelectableRowsChange(selectableRows); // Notify parent\r\n    }\r\n  }, [widgetType, tableData, onSelectableRowsChange]);\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const enableRowSelection = (row) => {\r\n    if (widgetType === \"Bos_Attribute_Widget\" && type === \"Document\") {\r\n      return row.IsLatest === \"TRUE\";\r\n    }\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      return !latestRevision || latestRevision === droppedRevision;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n\r\n    // Earlier it was\r\n    //  enableRowSelection: true,\r\n\r\n    enableRowSelection: (row) => enableRowSelection(row.original),\r\n\r\n    defaultColumn: {\r\n      size: 170,\r\n      minSize: 50,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    meta: {\r\n      updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    console.log(\"Export button clicked\");\r\n    console.log(\"Widget Type in handleExport:\", widgetType); // ADD THIS LINE\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      console.log(\"Exporting for Revision_FLoat_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plant_Assignment_Widget\") {\r\n      console.log(\"Exporting for Plant_Assignment_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    } else if (widgetType === \"Bos_Attribute_Widget\") {\r\n      console.log(\"Exporting for Bos_Attribute_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Bos_Attribute_Widget.xlsx\");\r\n    } else {\r\n      console.log(\r\n        \"Exporting with default filename for widgetType:\",\r\n        widgetType\r\n      ); // ADD THIS LINE\r\n      handleExportExcel(data, \"table-data.xlsx\"); // Default case\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className=\"table custom-table table-hover\"\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                          changedCells={row.original.changedCells} // Pass changed cells info\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td\r\n                    colSpan={table.getHeaderGroups()[0].headers.length}\r\n                    className=\"no-data p-2\"\r\n                  >\r\n                    No Table Data\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport \"./SearchInput.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchInput = ({ onSearch, disabled }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const handleInputChange = (event) => {\r\n    const newSearchText = event.target.value;\r\n    setSearchText(newSearchText);\r\n  };\r\n\r\n  const handleInputKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setSearchText(\"\");\r\n    inputRef.current.focus(); // Keep focus on the input after clearing\r\n  };\r\n  const handleSearchIconClick = () => {\r\n    if (searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-content-container d-flex align-items-center\">\r\n      <FontAwesomeIcon\r\n        icon={faMagnifyingGlass}\r\n        onClick={handleSearchIconClick}\r\n        className=\"search-icon\"\r\n      />\r\n\r\n      <span className=\"ms-4 drag-and-drop-text flex-grow-1\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            ref={inputRef}\r\n            value={searchText}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyPress}\r\n            placeholder=\"Search...\"\r\n            disabled={disabled}\r\n          />\r\n          {searchText && (\r\n            <Button\r\n              variant=\"btn-link\"\r\n              onClick={handleClearClick}\r\n              className=\"clear-button\"\r\n            >\r\n              ✖\r\n            </Button>\r\n          )}\r\n        </InputGroup>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n\r\n\r\nexport const fetchmepCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_ENOVIA_MEP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    progress = undefined,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      progress,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n// New function that wraps useToast and adds progress\r\nconst useToastWithProgress = () => {\r\n  const { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast } = useToast();\r\n\r\n  const showToastWithProgress = (message, options = {}) => {\r\n    showToast({ message, progress: 1, ...options }); // Add progress property\r\n  };\r\n\r\n  const showSuccessToastWithProgress = (message, options = {}) => {\r\n    showSuccessToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showErrorToastWithProgress = (message, options = {}) => {\r\n    showErrorToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showInfoToastWithProgress = (message, options = {}) => {\r\n    showInfoToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showWarningToastWithProgress = (message, options = {}) => {\r\n    showWarningToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  return {\r\n    showToastWithProgress,\r\n    showSuccessToastWithProgress,\r\n    showErrorToastWithProgress,\r\n    showInfoToastWithProgress,\r\n    showWarningToastWithProgress,\r\n  };\r\n};\r\n\r\n// export { useToast, useToastWithProgress };\r\nexport default useToast;\r\nexport { useToastWithProgress };","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n\r\nconst useBOSWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useBOSWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  const handleBOSWidget = async (\r\n    collabSpace,\r\n    state,\r\n    objectId,\r\n    type,\r\n    parentName,\r\n    parentRevision\r\n  ) => {\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useBOSWidget] CSRF Headers:\", headers);\r\n\r\n      // Step 1: Call Enovia Web Service\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/documents/parentId/${objectId}?parentRelName=SpecificationDocument`;\r\n\r\n      let parentDirection = type === \"Document\" ? \"to\" : \"from\";\r\n\r\n      let urlObjWAF = `${baseURL}&parentDirection=${parentDirection}`;\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"GET\",\r\n        urlObjWAF,\r\n        \"\",\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      if (\r\n        ChildObject &&\r\n        ChildObject.status &&\r\n        ChildObject.output.data.length > 0\r\n      ) {\r\n        let ChildObjectDocument = ChildObject.output.data.map((sSpec) => ({\r\n          id: sSpec.id,\r\n          title:\r\n            sSpec.dataelements.title && sSpec.dataelements.title.trim() !== \"\"\r\n              ? sSpec.dataelements.title\r\n              : sSpec.dataelements.secondaryTitle,\r\n          revision: sSpec.dataelements.revision,\r\n          state: sSpec.dataelements.stateNLS,\r\n          name: sSpec.dataelements.name,\r\n        }));\r\n\r\n        console.log(\r\n          \"[useBOSWidget] Extracted Spec Documents:\",\r\n          ChildObjectDocument\r\n        );\r\n        // if type is Document and then iterate ovet the\r\n        if (type === \"Document\") {\r\n          const revisionBody = {\r\n            data: [],\r\n          };\r\n          ChildObjectDocument.forEach((child) => {\r\n            const body = {\r\n              id: child.id,\r\n              identifier: child.id,\r\n              type: \"VPMReference\",\r\n              source: `${ENOVIA_BASE_URL}`,\r\n              relativePath: `/resources/v1/modeler/dseng/dseng:EngItem/${child.id}`,\r\n            };\r\n            revisionBody.data.push(body);\r\n          });\r\n          const RevisionUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n          const response = await callEnoviaWebService(\r\n            \"POST\",\r\n            RevisionUrl,\r\n            revisionBody,\r\n            headers\r\n          );\r\n          console.log(\"response is:\", response);\r\n          response.output.results.forEach((item) => {\r\n            // Find the latest version based on the 'revision' key\r\n            const latestVersion = item.versions.reduce((latest, current) => {\r\n              return convertRevisionToNumber(current.revision) >\r\n                convertRevisionToNumber(latest.revision)\r\n                ? current\r\n                : latest;\r\n            });\r\n\r\n            // Update 'isLatestRevision' for only the matching document\r\n            ChildObjectDocument = ChildObjectDocument.map((doc) => {\r\n              if (item.versions.some((version) => version.id === doc.id)) {\r\n                return {\r\n                  ...doc,\r\n                  isLatestRevision:\r\n                    doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n                };\r\n              }\r\n              return doc;\r\n            });\r\n          });\r\n\r\n          // Function to convert revision to a comparable numeric value\r\n          function convertRevisionToNumber(rev) {\r\n            if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n            let number = 0;\r\n            for (let i = 0; i < rev.length; i++) {\r\n              number =\r\n                number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n            }\r\n            return number; // Handles A-Z, AA-ZZ revisions\r\n          }\r\n\r\n          console.log(\"ChildObjectDocument is:\", ChildObjectDocument);\r\n        }\r\n        let requestBody;\r\n        let getUrl;\r\n        if (type === \"Document\") {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestSpecItemDetails\";\r\n          requestBody = {\r\n            SpecName: parentName, // Replace with actual SpecName if dynamic\r\n            SpecRevision: parentRevision, // Replace with actual SpecRevision if dynamic\r\n            Items: ChildObjectDocument.map((obj) => ({\r\n              ItemName: obj.name, // Replace dynamically if needed\r\n              ItemRevision: obj.revision,\r\n            })),\r\n          };\r\n        } else {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestItemSpecDetails\";\r\n          requestBody = {\r\n            ItemName: parentName, // Replace with actual ItemName if dynamic\r\n            ItemRevision: parentRevision, // Replace with actual revision if dynamic\r\n            Specifications: ChildObjectDocument.map((obj) => ({\r\n              SpecName: obj.name,\r\n              SpecRevision: obj.revision,\r\n            })),\r\n          };\r\n        }\r\n\r\n        console.log(\"Requested Body is:\", requestBody);\r\n\r\n        const response = await fetchData(\"POST\", getUrl, requestBody);\r\n\r\n        console.log(\"the response from node API is:\", response);\r\n\r\n        let mergedData = [];\r\n        if (response?.data?.data?.Specifications) {\r\n          // **Case 1: API Response Contains \"Specifications\"**\r\n          response.data.data.Specifications.forEach((spec) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (obj) =>\r\n                obj.name === spec.SpecName && obj.revision === spec.SpecRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              childName: spec.SpecName,\r\n              childRevision: spec.SpecRevision,\r\n              PrintOnPurchaseOrderRequired: spec.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: spec.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: spec.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: spec.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": spec[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else if (response?.data?.data?.Items) {\r\n          // get all the id's\r\n\r\n          // **Case 2: API Response Contains \"Items\"**\r\n          response.data.data.Items.forEach((item) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (doc) =>\r\n                doc.name === item.ItemName && doc.revision === item.ItemRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childName: item.ItemName,\r\n              childRevision: item.ItemRevision,\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              PrintOnPurchaseOrderRequired: item.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: item.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: item.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: item.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": item[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else {\r\n          console.warn(\"[useBOSWidget] Unexpected API response format.\");\r\n        }\r\n        console.log(\r\n          \"[useBOSWidget] Final Merged Data for Dispatch:\",\r\n          mergedData\r\n        );\r\n\r\n        dispatch(setSpecDocument(mergedData));\r\n        // You can now dispatch or return this data as needed\r\n      } else {\r\n        console.warn(\"[useBOSWidget] No connected childs.\");\r\n        dispatch(setSpecDocument([]));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useBOSWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleBOSWidget };\r\n};\r\n\r\nexport default useBOSWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport useBOSWidget from \"./useBOSWidget\";\r\n\r\nconst useBOSDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleBOSWidget } = useBOSWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleBOSWidget(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              draggedObjectData.Name,\r\n              draggedObjectData[\"Dropped Revision\"]\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleBOSWidget]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useBOSDropableArea;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { loadInterCom } from \"../utils/helpers\";\r\n\r\nconst useInterComSearch = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [InterCom, setInterCom] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // console.log(\"[useInterComSearch] Loading InterCom module\");\r\n        const interComInstance = await loadInterCom();\r\n        setInterCom(interComInstance);\r\n      } catch (error) {\r\n        console.error(\r\n          \"[useInterComSearch] Error initializing InterCom:\",\r\n          error\r\n        );\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect();\r\n        // console.log(\"[useInterComSearch] Socket disconnected\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const performSearch = useCallback(\r\n    (searchText, searchOpts, onObjectsSelected) => {\r\n      // Check if InterCom is loaded\r\n      if (!InterCom) {\r\n        console.warn(\"[useInterComSearch] InterCom is not loaded yet.\");\r\n        return;\r\n      }\r\n\r\n      const socketName =\r\n        \"socket\" + new Date().toISOString().replace(/[-:]/g, \"\");\r\n      const newSocket = new InterCom.Socket(socketName, {\r\n        dispatchRetryInternal: 0,\r\n      });\r\n      newSocket.subscribeServer(\"SearchComServer\");\r\n      setSocket(newSocket);\r\n\r\n      console.log(\r\n        \"[useInterComSearch] performSearch called with:\",\r\n        searchText,\r\n        searchOpts\r\n      );\r\n\r\n      const widgetId = window.widget?.id;\r\n      // console.log(\"[useInterComSearch] widget id:\", widgetId);\r\n\r\n      const finalSearchOpts = {\r\n        ...searchOpts,\r\n        widget_id: widgetId,\r\n        app_socket_id: socketName,\r\n        default_search_criteria: searchText,\r\n      };\r\n\r\n      // Register the search context (if needed)\r\n      console.log(\r\n        \"[useInterComSearch] Dispatching RegisterContext event with:\",\r\n        finalSearchOpts\r\n      );\r\n      newSocket.dispatchEvent(\"RegisterContext\", finalSearchOpts);\r\n\r\n      // Dispatch the search event\r\n      // console.log(\r\n      //   \"[useInterComSearch] Dispatching InContextSearch event with:\",\r\n      //   finalSearchOpts\r\n      // );\r\n      newSocket.dispatchEvent(\"InContextSearch\", finalSearchOpts);\r\n\r\n      // Add a listener for search results\r\n      const handleSearchResults = (data) => {\r\n        console.log(\"[useInterComSearch] Search results received:\", data);\r\n        if (onObjectsSelected) {\r\n          onObjectsSelected(data);\r\n        }\r\n      };\r\n\r\n      console.log(\r\n        \"[useInterComSearch] Adding listener for Selected_Objects_search\"\r\n      );\r\n      newSocket.addListener(\"Selected_Objects_search\", handleSearchResults);\r\n    },\r\n    [InterCom]\r\n  );\r\n\r\n  return {\r\n    performSearch,\r\n  };\r\n};\r\n\r\nexport default useInterComSearch;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./List.css\";\r\nimport { makeDraggable } from \"../../utils/helpers\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst List = ({ data, isColumn, onDragStart, onDragEnd }) => {\r\n  const titleRef = useRef(null);\r\n  const initialDraggedData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData.initialDraggedData\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (titleRef.current && initialDraggedData) {\r\n      makeDraggable(\r\n        titleRef.current,\r\n        initialDraggedData,\r\n        onDragStart,\r\n        onDragEnd\r\n      );\r\n    }\r\n  }, [data, initialDraggedData, onDragStart, onDragEnd]);\r\n\r\n  if (!data) return null;\r\n\r\n  return (\r\n    <div className={`d-flex ${isColumn ? \"flex-column\" : \"flex-row\"}`}>\r\n      <h5\r\n        ref={titleRef}\r\n        className={`mb-1 text-start title ${!isColumn ? \"me-2\" : \"\"}`}\r\n      >\r\n        {data.title}\r\n      </h5>\r\n      <ul\r\n        className={`list-group d-flex flex-row flex-sm-row flex-wrap justify-content-between pb-3 pb-md-0 ${\r\n          !isColumn ? \"w-75\" : \"\"\r\n        }`}\r\n      >\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ps-0 pb-0 ${\r\n            !isColumn ? \"d-flex flex-row justify-content-around\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p>\r\n            <b>Type:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.type}>\r\n              {data.type}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <b>Owner:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.owner}>\r\n              {data.owner}\r\n            </span>\r\n          </p>\r\n          {isColumn && (\r\n            <p>\r\n              <b>Maturity State:</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Maturity State\"]}>\r\n                {data[\"Maturity State\"]}\r\n              </span>\r\n            </p>\r\n          )}\r\n        </li>\r\n        {isColumn && (\r\n          <li\r\n            className=\"list-group-item flex-grow-1 text-start mx-0 pt-0\"\r\n            style={{ border: \"0\", paddingLeft: \"0\" }}\r\n          >\r\n            <p>\r\n              <b>Dropped Revision :</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Dropped Revision\"]}>\r\n                {data[\"Dropped Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Latest Released Revision:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Latest Released Revision\"]}\r\n              >\r\n                {data[\"Latest Released Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Collabspace:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Collaborative Space Title\"]}\r\n              >\r\n                {data[\"Collaborative Space Title\"]}\r\n              </span>\r\n            </p>\r\n          </li>\r\n        )}\r\n\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ${\r\n            !isColumn ? \"d-flex flex-row\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\", paddingLeft: \"0\" }}\r\n        >\r\n          {data.type !== \"Document\" && (\r\n            <>\r\n              <p>\r\n                <b>CAD Format:</b>{\" \"}\r\n                <span className=\"list-text\" title={data[\"CAD Format\"]}>\r\n                  {data[\"CAD Format\"]}\r\n                </span>\r\n              </p>\r\n              <p>\r\n                <b>EIN:</b>{\" \"}\r\n                <span className=\"list-text\" title={data.EIN}>\r\n                  {data.EIN}\r\n                </span>\r\n              </p>\r\n            </>\r\n          )}\r\n        </li>\r\n\r\n        <div className=\"d-none d-md-flex align-items-stretch\">\r\n          <div className=\"vr\"></div>\r\n        </div>\r\n\r\n        {/* Horizontal divider after third li on small screens */}\r\n        <div className=\"d-flex d-md-none w-100\">\r\n          <hr className=\"w-100\" />\r\n        </div>\r\n\r\n        <li\r\n          className=\"list-group-item flex-grow-1 text-start mx-0\"\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p className=\"description-container\" title={data.Description}>\r\n            {data.Description}\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState } from \"react\";\r\nimport \"./Card.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { Image, Card, CardBody } from \"react-bootstrap\";\r\nimport List from \"../List/List\";\r\n\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CardComponent = ({ data, onDragStart, onDragEnd }) => {\r\n  const [isColumn, setIsColumn] = useState(true);\r\n\r\n  const toggleFlexDirection = () => {\r\n    setIsColumn(!isColumn);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"d-flex flex-row mt-4 border-0 \" style={{ width: \"100%\" }}>\r\n      <div className=\"pb-3 d-none d-md-block me-5 ms-4\">\r\n        <Card.Img\r\n          className={`${\r\n            !isColumn ? \"image-resize img-thumbnail\" : \"img-thumbnail\"\r\n          } `}\r\n          src={data.imageURL} // Use dynamic image URL from data\r\n          alt=\"Card image\"\r\n        />\r\n      </div>\r\n      <CardBody className={`${!isColumn ? \"p-0 layout-change\" : \"p-0\"} `}>\r\n        <List\r\n          data={data}\r\n          isColumn={isColumn}\r\n          onDragStart={onDragStart}\r\n          onDragEnd={onDragEnd}\r\n        />\r\n      </CardBody>\r\n      <button\r\n        className=\"me-2 p-0 btn btn-link accordion-toggle\"\r\n        onClick={toggleFlexDirection}\r\n      >\r\n        {/* <FontAwesomeIcon\r\n          icon={faAngleUp}\r\n          size=\"xs\"\r\n          style={{ color: \"#212121\" }}\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        /> */}\r\n\r\n        <Image\r\n          src=\"https://khanfarzan17.github.io/tedting-revision-float/images/arrow.png\"\r\n          alt=\"downArrow\"\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        />\r\n      </button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n \r\nexport const GetFlowDownCADetails = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n \r\n  try {\r\n    const WAFData = await loadWAFData();\r\n \r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n \r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/search?searchStr=${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const routeData = (searchResponse?.data || []).find(item => item.type === \"Route\");\r\n \r\n    if (routeData) {\r\n        const RouteID = routeData.identifier;\r\n        const RouteStatus = routeData.state;\r\n        const RouteURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/${RouteID}`;\r\n        const RouteDetails = await fetchData(RouteURL);\r\n        const ChangeData = (RouteDetails?.data || []).find(item => item.type === \"Change Action\");\r\n        if(ChangeData){\r\n            const MFGCAID = ChangeData.identifier;\r\n            const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n            const CAresponse = await fetchData(CAUrl);\r\n            if (CAresponse) {\r\n                for (const item of CAresponse.isFlowDownOf || []) {\r\n                  if (item.type === \"Change Action\") {\r\n                    const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n                    const EngCAResponse = await fetchData(EngCAUrl);\r\n                    if (EngCAResponse) {\r\n                        CADetails.CAAtt.push({\r\n                          CATitle: EngCAResponse.title,\r\n                          CAState: EngCAResponse.state,\r\n                        });\r\n                      }\r\n                  }\r\n                }\r\n            }\r\n        }\r\n        CADetails[\"MCOState\"] = RouteStatus;\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }    \r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\n\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async () => {\r\n          const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    const [ItemPlants, Iteminfo] = await Promise.all([\r\n                      getAssignedClasses(ItemId, headers),\r\n                      getItemDetails(ItemId, ItemType, headers),\r\n                    ]);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n        };\r\n\r\n        // Run both functions in parallel\r\n        await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // Step 1: Fetch user group collaboration spaces\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        let allPlants = [];\r\n        if (allCollabSpaces.length > 0) {\r\n          allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        }\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers) {\r\n  const plantIdData = [];\r\n \r\n  const url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n \r\n    if (\r\n      itemResponse.output.member &&\r\n      itemResponse.output.member[0].ClassificationAttributes\r\n    ) {\r\n      itemResponse.output.member[0].ClassificationAttributes.member.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantId\")) {\r\n              plantName = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"ERPStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (plantName !== null) {\r\n            plantIdData.push({\r\n              PlantName: plantName,\r\n              PlantID: classId,\r\n              PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return plantIdData;\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\",\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      JSON.stringify(Body),\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of response.output.results) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\nimport {GetFlowDownCADetails} from \"./getRouteDetails\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return GetFlowDownCADetails(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n            const CAName = itm[\"ds6w:label\"];\r\n            if (status !== \"Complete\") {\r\n              let url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n \r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n \r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n \r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n \r\n              if(resObejct){\r\n                CADetails[\"CAName\"] = CAName;\r\n                CADetails[\"CAStatus\"] = status;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default usePlantDropableArea;","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction, setLoading } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useRevisions from \"./useRevisions\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useDroppableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { fetchRevisionsAndParents } = useRevisions();\r\n  const dispatch = useDispatch();\r\n  // ✅ Use `useSelector` to get the latest values from Redux\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Fetch Revisions and Parents in parallel\r\n          const relativePath = objectDetailsResult.data.cardData.relativePath;\r\n          const [revisionParentData] = await Promise.all([\r\n            fetchRevisionsAndParents(\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              relativePath\r\n            ),\r\n          ]);\r\n          // Dispatch all updates together (batching updates)\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n              parentDetails: revisionParentData || [],\r\n            })\r\n          );\r\n          console.log(\"[fetchObjectDetails] ✅ Redux store updated.\");\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        console.log(\"[fetchObjectDetails] 🏁 Ensuring loading is reset.\");\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, fetchRevisionsAndParents, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useDroppableArea;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n"],"names":["refreshWidgetData","async","dataItems","handleDrop","console","log","length","Error","error","warn","useRevisions","showSuccessToast","showErrorToast","useToast","fetchRevisionsAndParents","objectId","objectType","relativePath","response","api","post","data","id","type","status","concat","replaceRevisions","selectedParents","droppedData","userEmail","SelectedParents","DroppedData","MSG_REPLACE_SUCCESS","success","MSG_REPLACE_ERROR","message","_ref","widgetType","plantDroppable","usePlantDropableArea","bosDropable","useBOSDropableArea","defaultDroppable","useDroppableArea","initializeDroppableArea","hasInitializedDroppable","useRef","useEffect","current","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","isDragging","setIsDragging","useState","DragAndDropStandAlone","CardComponent","onDragStart","handleDragStart","onDragEnd","handleDragEnd","header","columns","table","isFixed","column","isPinned","getState","columnPinning","left","includes","sortable","useSortable","disabled","attributes","listeners","setNodeRef","transform","opacity","position","top","CSS","Transform","toString","transition","getSize","zIndex","cursor","backgroundColor","ref","_objectSpread","onClick","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","getIsResizing","cell","changedCells","getIsPinned","cellContent","columnName","split","slice","join","isChanged","title","getValue","color","fontWeight","getWidgetStorageKey","editable","meta","latestRevision","droppedRevision","onSelectableRowsChange","dispatch","useDispatch","tableData","setTableData","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","isScrolled","setIsScrolled","handleScroll","e","target","scrollTop","tableContainer","addEventListener","removeEventListener","updateTableData","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","initialOrder","otherColumns","map","push","setItem","stringify","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","onChange","getToggleAllRowsSelectedHandler","_ref3","row","isSelectable","enableRowSelection","original","getIsSelected","getToggleSelectedHandler","_ref4","value","handleEditCell","rowIndex","columnId","updatedData","index","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","selectableRows","filter","IsLatest","useReactTable","state","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","defaultColumn","size","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","setSelectedTableRows","columnSizeVars","headers","getFlatHeaders","colSizes","getTotalSize","i","columnSizingInfo","columnSizing","CustomButton","variant","handleSelectAll","text","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","event","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","colSpan","onSearch","searchText","setSearchText","inputRef","FontAwesomeIcon","icon","faMagnifyingGlass","handleSearchIconClick","trim","InputGroup","Form","Control","newSearchText","onKeyDown","key","placeholder","Button","handleClearClick","focus","fetchCsrfToken","securityContext1","window","widget","WAFData","loadWAFData","csrfURL","process","Promise","resolve","reject","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","name","csrfValue","securityContextHeader","securityContextValue","fetchmepCsrfToken","showToast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","Bounce","progress","otherOptions","_objectWithoutProperties","_excluded","toast","options","arguments","undefined","showInfoToast","showWarningToast","useToastWithProgress","showToastWithProgress","showSuccessToastWithProgress","showErrorToastWithProgress","showInfoToastWithProgress","showWarningToastWithProgress","imageSrc","props","marginRight","useBOSWidget","ENOVIA_BASE_URL","email","handleBOSWidget","collabSpace","parentName","parentRevision","setParentDetailsLoading","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","parentDirection","urlObjWAF","ChildObject","callEnoviaWebService","output","_response$data","_response$data$data","_response$data2","_response$data2$data","requestBody","getUrl","ChildObjectDocument","sSpec","dataelements","secondaryTitle","revision","stateNLS","revisionBody","child","body","identifier","source","RevisionUrl","convertRevisionToNumber","rev","test","parseInt","number","charCodeAt","results","item","latestVersion","versions","reduce","latest","doc","version","isLatestRevision","SpecName","SpecRevision","Items","obj","ItemName","ItemRevision","Specifications","fetchData","mergedData","spec","matchingDoc","find","childState","childTitle","childLatest","childName","childRevision","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","setSpecDocument","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","MSG_UNEXPECTED_ERROR","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","useInterComSearch","socket","setSocket","InterCom","setInterCom","interComInstance","loadInterCom","loadData","disconnect","performSearch","searchOpts","onObjectsSelected","_window$widget","socketName","Date","toISOString","replace","newSocket","Socket","dispatchRetryInternal","subscribeServer","widgetId","finalSearchOpts","widget_id","app_socket_id","default_search_criteria","dispatchEvent","addListener","isColumn","titleRef","initialDraggedData","droppedObjectData","makeDraggable","border","owner","paddingLeft","EIN","Description","setIsColumn","Card","Img","imageURL","CardBody","List","toggleFlexDirection","Loader","GetFlowDownCADetails","flowDownCA","CADetails","CAAtt","url","searchResponse","routeData","RouteID","RouteStatus","RouteURL","RouteDetails","ChangeData","MFGCAID","CAUrl","CAresponse","isFlowDownOf","EngCAUrl","EngCAResponse","CATitle","CAState","usePlantAssignment","handlePlantAssignment","ItemDetails","isMFGCA","fetchChangeActionData","CAURL","realizedChanges","realizedChange","where","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","sLatestID","revurl","ret","Body","result","ancestors","ancestor","getLatestRevision","mfgDetails","itemResponse","member","ScopeEngItem","getScopedItms","_Iteminfo$member$","_Iteminfo$member$$dse","ItemPlants","Iteminfo","all","getAssignedClasses","getItemDetails","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","err","CAAllPlantsData","allPlants","getAllPlants","setCAAllPlants","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","objectID","userGroup","userGroupBody","groups","sharings","userGroups","group","access","uri","userGroupID","grpUrl","grpresponse","members","getUserGroupCollab","allCollabSpaces","plants","libraryDataURL","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","ClassificationAttributes","classItem","parentClass","ClassID","PlantName","promiseArray","Attributes","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","allClass","assigned","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","getProductChildren","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","toLowerCase","classesurl","classResponse","classIds","flatMap","_member$Classificatio","classification","classes","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","URLCADetails","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","response2","objectsByPatterns","caproposedwhere_from","itm","CAName","url3","response3","Array","isArray","proposedChange","action","whats","what","CAData","fetchCADetails","setCAName","setProposedChanges","setCAData","plantIdData","classId","plantName","erpStatus","attribute","PlantID","PlantERPStatus","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setTimeout","revisionParentData","parentDetails","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","userClass"],"sourceRoot":""}