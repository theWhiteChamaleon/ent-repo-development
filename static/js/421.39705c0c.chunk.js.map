{"version":3,"file":"static/js/421.39705c0c.chunk.js","mappings":"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","sources":["services/api/PlantAssignment/fetchCsrfService.js","hooks/useToast.js","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Button/Button.jsx","components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","components/Select/customSelect.jsx","components/Modals/ConfirmationModal.jsx","components/bootsrap-table/Table.jsx","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","hooks/Mass-Upload/useMassUpload.js","hooks/Mass-Upload/useMassUploadDocument.js","components/Pagination/Pagination.jsx","components/Modals/SuccessModal.jsx","hooks/Mass-Upload/useMEPMassupload.js","hooks/Mass-Upload/useRemoveDocConnection.js","pages/mass-upload/massUpload.jsx","utils/getUserDetails.js","utils/downloadTemplate.js","massuUploadIndex.js","components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/Loader/Loader.js"],"sourcesContent":["import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    progress = undefined,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      progress,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n// New function that wraps useToast and adds progress\r\nconst useToastWithProgress = () => {\r\n  const { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast } = useToast();\r\n\r\n  const showToastWithProgress = (message, options = {}) => {\r\n    showToast({ message, progress: 1, ...options }); // Add progress property\r\n  };\r\n\r\n  const showSuccessToastWithProgress = (message, options = {}) => {\r\n    showSuccessToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showErrorToastWithProgress = (message, options = {}) => {\r\n    showErrorToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showInfoToastWithProgress = (message, options = {}) => {\r\n    showInfoToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showWarningToastWithProgress = (message, options = {}) => {\r\n    showWarningToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  return {\r\n    showToastWithProgress,\r\n    showSuccessToastWithProgress,\r\n    showErrorToastWithProgress,\r\n    showInfoToastWithProgress,\r\n    showWarningToastWithProgress,\r\n  };\r\n};\r\n\r\n// export { useToast, useToastWithProgress };\r\nexport default useToast;\r\nexport { useToastWithProgress };","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n    // const handleDragOver = (event) => {\r\n    //   if (disabled) {\r\n    //     event.preventDefault();\r\n    //     event.stopPropagation();\r\n    //     showErrorToast(\"Please choose an operation from the drop-down first\");\r\n    //   } else {\r\n    //     // Allow drag-over behavior for valid file uploads\r\n    //     event.preventDefault();\r\n    //     event.dataTransfer.dropEffect = \"copy\";\r\n    //   }\r\n    // };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled ? \"Please select an operation first\" : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\n\r\nconst processDataInChunks = (data, chunkSize = 1000) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < data.length; i += chunkSize) {\r\n    chunks.push(data.slice(i, i + chunkSize));\r\n  }\r\n  return chunks;\r\n};\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"🔍 Starting template validation...\");\r\n    console.log({\r\n      operation: selectedOperation,\r\n      fileName: file.name,\r\n    });\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n      5: \"Create/Update MEP\",\r\n      6: \"Remove Doc-Parts Relationships\",\r\n    };\r\n\r\n    const matchedOperation = operationNames[selectedOperation];\r\n    const expectedHeaders =\r\n      config.MassUpload[matchedOperation]?.fileHeaders || [];\r\n    const mandatoryAttributes =\r\n      config.MassUpload[matchedOperation]?.mandatoryAttributes || [];\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\"❌ Invalid Collaborative Space list\");\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = async (e) => {\r\n      const workbook = XLSX.read(e.target.result, {\r\n        type: \"binary\",\r\n        dense: true,\r\n        cellDates: true,\r\n        cellNF: false,\r\n        cellText: false,\r\n      });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const uploadedHeaders =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n        \r\n      // Template header validation\r\n      const headerMismatch = !expectedHeaders.every((header) =>\r\n        uploadedHeaders.includes(header)\r\n      );\r\n\r\n      if (headerMismatch) {\r\n        console.error(\" Template mismatch detected!\");\r\n        reject({\r\n          isTemplateMismatch: true,\r\n          errors: [\r\n            \"The template uploaded does not match the selected operation.\",\r\n          ],\r\n          headers: uploadedHeaders,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const headers =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      if (!headers || headers.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file has no content or is empty.\"],\r\n          headers: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const allSheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n\r\n      if (allSheetData.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file contains headers but no data rows.\"],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n      console.log(\"allSheetData\", allSheetData);\r\n      const chunks = processDataInChunks(allSheetData, 1000);\r\n      const validationErrors = [];\r\n      const invalidPrefixes = [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"];\r\n\r\n      // Error counters\r\n      let errorStats = {\r\n        mandatory: 0,\r\n        collabSpace: 0,\r\n        einPrefix: 0,\r\n        docPrefix: 0,\r\n      };\r\n\r\n      // Convert collabSpaceTitles to lowercase for case-insensitive comparison\r\n      const lowerCaseCollabSpaceTitles = collabSpaceTitles.map((title) =>\r\n        title.toLowerCase()\r\n      );\r\n\r\n      for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\r\n        const chunk = chunks[chunkIndex];\r\n        const progress = Math.round(((chunkIndex + 1) / chunks.length) * 100);\r\n\r\n        chunk.forEach((row, indexInChunk) => {\r\n          const globalRowIndex = chunkIndex * 1000 + indexInChunk;\r\n\r\n          // Mandatory fields validation\r\n          mandatoryAttributes.forEach((field) => {\r\n            // Special case for Physical Product Structure: Find Number and Quantity not mandatory for level 0 rows\r\n            if (\r\n              matchedOperation === \"Physical Product Structure\" &&\r\n              (field === \"Find Number\" || field === \"Quantity\") &&\r\n              row[\"Level\"] !== undefined &&\r\n              (row[\"Level\"] === 0 || row[\"Level\"] === \"0\")\r\n            ) {\r\n              // Skip validation for these fields on level 0 rows\r\n              return;\r\n            }\r\n\r\n            // Modified check that doesn't treat 0 as empty\r\n            if (\r\n              row[field] === undefined ||\r\n              row[field] === null ||\r\n              (row[field].toString().trim() === \"\" && row[field] !== 0)\r\n            ) {\r\n              errorStats.mandatory++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${field}\" is required but is empty`\r\n              );\r\n            }\r\n          });\r\n\r\n          // New validation: For Operation 1 - Dimension is mandatory when type is Raw Material\r\n          if (matchedOperation === \"Physical Product\") {\r\n            const physicalProductType =\r\n              row[\"Physical Product/Raw Material\"]?.toString().trim() || \"\";\r\n            if (physicalProductType.toLowerCase() === \"raw material\") {\r\n              const dimension = row[\"Dimension\"]?.toString().trim() || \"\";\r\n              if (dimension === \"\") {\r\n                validationErrors.push(\r\n                  `Row ${\r\n                    globalRowIndex + 2\r\n                  }: \"Dimension\" is required when  the column Name in the template \"Physical Product/Raw Material\" value is  \"Raw Material\"`\r\n                );\r\n              }\r\n            }\r\n          }\r\n\r\n          // Collaborative Space validation\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            const userCollabSpace =\r\n              row[\"Collaborative Space\"]?.trim().toLowerCase() || \"\";\r\n            if (\r\n              !userCollabSpace ||\r\n              !lowerCaseCollabSpaceTitles.includes(userCollabSpace)\r\n            ) {\r\n              errorStats.collabSpace++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${\r\n                  userCollabSpace\r\n                    ? `You are not allowed to create in \"Collaborative Space -\" (${userCollabSpace})`\r\n                    : 'Collaborative Space\" is Missing or Empty'\r\n                }`\r\n              );\r\n            }\r\n          }\r\n          // NEW: Validate that the first data row for Physical Product Structure has Level = 0\r\n          if (\r\n            matchedOperation === \"Physical Product Structure\" &&\r\n            globalRowIndex === 0\r\n          ) {\r\n            const firstRow = allSheetData[0];\r\n            const levelValue = firstRow[\"Level\"];\r\n            const levelStr = String(levelValue).trim();\r\n            console.log(\r\n              \"Validating Level for Physical Product Structure, first row:\",\r\n              firstRow,\r\n              \"Parsed Level:\",\r\n              levelStr\r\n            );\r\n\r\n            if (\r\n              levelStr === \"\" ||\r\n              (levelStr !== \"0\" && Number(levelStr) !== 0)\r\n            ) {\r\n              // Add validation error for Level with row number and column name\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Level\" value \"${levelValue}\"  The first entry in the file should be a level 0 object.`\r\n              );\r\n              console.log(\r\n                \"Level validation failed - first row Level is not 0:\",\r\n                levelValue\r\n              );\r\n            }\r\n          }\r\n\r\n          // EIN Number / Document Name validation\r\n          let valueToValidate = null;\r\n          let columnName = \"\";\r\n\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Physical Product Structure\"\r\n          ) {\r\n            columnName = \"EIN Number\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.einPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"EIN Number\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          } else if (\r\n            matchedOperation === \"Physical Product-Document\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            columnName = \"Document Name\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.docPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Document Name\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          }\r\n\r\n          // NEW: Validate that for Physical Product Structure, the \"Quantity\" value is positive (cannot be zero or negative)\r\n          if (matchedOperation === \"Physical Product Structure\") {\r\n            columnName = \"Quantity\";\r\n            const quantityValue = row[columnName]?.toString().trim();\r\n            if (quantityValue) {\r\n              const numQuantity = Number(quantityValue);\r\n              if (isNaN(numQuantity) || numQuantity <= 0) {\r\n                validationErrors.push(\r\n                  `Row ${\r\n                    globalRowIndex + 2\r\n                  }: \"Quantity\" value \"${quantityValue}\" Quantity should not be 0 or -ve.`\r\n                );\r\n                console.log(\r\n                  \"Quantity validation failed - Quantity is 0 or -ve:\",\r\n                  quantityValue\r\n                );\r\n              }\r\n            }\r\n          }\r\n          // NEW: Validate that for MEP, all mandatory fields are present\r\n          if (matchedOperation === \"Create/Update MEP\") {\r\n            console.log(\r\n              \"Mondatory fields validation for MEP\",\r\n              mandatoryAttributes\r\n            );\r\n            mandatoryAttributes.forEach((field) => {\r\n              if (\r\n                row[field] === undefined ||\r\n                row[field] === null ||\r\n                (row[field].toString().trim() === \"\" && row[field] !== 0)\r\n              ) {\r\n                errorStats.mandatory++;\r\n                validationErrors.push(\r\n                  `Row ${\r\n                    globalRowIndex + 2\r\n                  }: \"${field}\" is required but is empty`\r\n                );\r\n              }\r\n            });\r\n          }\r\n\r\n          // NEW: Validate that for MEP, all mandatory fields are present\r\n          if (matchedOperation === \"Remove Doc-Parts Relationships\") {\r\n            console.log(\r\n              \"Mondatory fields validation for MEP\",\r\n              mandatoryAttributes\r\n            );\r\n            mandatoryAttributes.forEach((field) => {\r\n              if (\r\n                row[field] === undefined ||\r\n                row[field] === null ||\r\n                (row[field].toString().trim() === \"\" && row[field] !== 0)\r\n              ) {\r\n                errorStats.mandatory++;\r\n                validationErrors.push(\r\n                  `Row ${\r\n                    globalRowIndex + 2\r\n                  }: \"${field}\" is required but is empty`\r\n                );\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Log only at 25% intervals\r\n        if (progress % 25 === 0) {\r\n          console.log(`Processing: ${progress}% complete`, {\r\n            processedRows: (chunkIndex + 1) * 1000,\r\n            totalRows: allSheetData.length,\r\n            currentErrors: {\r\n              mandatory: errorStats.mandatory,\r\n              collaborativeSpace: errorStats.collabSpace,\r\n              einPrefix: errorStats.einPrefix,\r\n              documentPrefix: errorStats.docPrefix,\r\n              total: validationErrors.length,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length > 0) {\r\n        console.log(\" Validation completed with errors:\", {\r\n          total: validationErrors.length,\r\n          byType: errorStats,\r\n        });\r\n        reject({\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes,\r\n        });\r\n        return;\r\n      }\r\n\r\n      console.log(\"✅ Validation completed successfully\");\r\n      resolve({\r\n        headers,\r\n        sheetData: allSheetData,\r\n        validationErrors: [],\r\n        mandatoryAttributes,\r\n      });\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.error(\" Error reading file\");\r\n      reject({\r\n        errors: [\"File reading failed.\"],\r\n        headers: [],\r\n        isTemplateMismatch: false,\r\n      });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  options,\r\n  onChange,\r\n  size,\r\n  className,\r\n}) => {\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{options.defaultLabel}</option> {/* Default option */}\r\n      {options.list.map((option, attrIndex) => (\r\n        <option key={attrIndex} value={option.value}>\r\n          {option.label}\r\n        </option>\r\n      ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","import React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport \"./ConfirmationModal.css\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirm Submission\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Submit\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <div className=\"confirmation-modal-content\">\r\n        <h4 className=\"confirmation-title\">\r\n          Are you sure you want to submit? This action cannot be undone.\r\n        </h4>\r\n\r\n        <ReusableAlert\r\n          variant=\"info\"\r\n          className=\"mb-3\"\r\n          message={\r\n            <span className=\"info-message-container\">\r\n              <span className=\"info-icon\">i</span>\r\n\r\n              <span className=\"info-text\">\r\n                Once submitted, your data will be processed by the system. You\r\n                will receive a confirmation once its complete. Large uploads may\r\n                take a few minutes.\r\n              </span>\r\n            </span>\r\n          }\r\n        />\r\n      </div>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\n// import \"./staticTable.css\"; // Ensure updated styles are applied\r\n\r\nconst StaticTable = ({\r\n  columnHeaders,\r\n  handleSelectChange,\r\n  dropdownOptions = [],\r\n}) => {\r\n  return (\r\n    <Table bordered className=\"table-light\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\">Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((column, index) => {\r\n          const { header, currentMapping, defaultLabel, disabled } = column;\r\n          // Get filtered dropdown options for this specific column\r\n          const filteredOptions = dropdownOptions(header);\r\n\r\n          return (\r\n            <tr key={index} className={disabled ? \"disabled-row\" : \"\"}>\r\n              <td className={disabled ? \"disabled-cell\" : \"\"}>{header}</td>\r\n              <td\r\n                className={`dropdown-cell ${\r\n                  disabled ? \"disabled-dropdown\" : \"\"\r\n                }`}\r\n              >\r\n                <div className=\"dropdown-wrapper\">\r\n                  <CustomSelect\r\n                    index={index}\r\n                    selectedValue={currentMapping?.uiLabel || header}\r\n                    onChange={(index, value) =>\r\n                      handleSelectChange(header, value)\r\n                    }\r\n                    size=\"lg\"\r\n                    className={`w-100 ${\r\n                      disabled ? \"custom-select-disabled\" : \"\"\r\n                    }`}\r\n                    disabled={disabled} // Fully disables interaction\r\n                    options={{\r\n                      defaultLabel: defaultLabel,\r\n                      list: filteredOptions,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import React from \"react\";\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\n\r\nconst MappedList = ({\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  selectedMappings,\r\n  setSelectedMappings,\r\n  dropdownOptions,\r\n  allNLSValues,\r\n  operationChoice,\r\n}) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n  console.log(\"MappedList - Received dropdownOptions:\", dropdownOptions);\r\n  console.log(\"MappedList - Received operationChoice:\", operationChoice);\r\n  console.log(\"MappedList - Received allNLSValues:\", allNLSValues);\r\n\r\n  // Checks if column header matches any NLS value\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    const hasMatch = allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    // console.log(\r\n    //   `Checking if header '${header}' matches any NLS value:`,\r\n    //   hasMatch\r\n    // );\r\n    return hasMatch;\r\n  };\r\n\r\n  // Gets backend name for selected UI label\r\n  const getBackendNameForUILabel = (uiLabel) => {\r\n    console.log(\"Finding backend name for UI label:\", uiLabel);\r\n    console.log(\"Current dropdown options:\", dropdownOptions);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available\");\r\n      return uiLabel;\r\n    }\r\n\r\n    const option = dropdownOptions.find((opt) => opt.uiLabel === uiLabel);\r\n    console.log(\"Found option:\", option);\r\n    return option ? option.backendName : uiLabel;\r\n  };\r\n\r\n  // Prepare dropdown options for the table - filter out already selected values\r\n  const prepareDropdownOptions = (currentColumnHeader) => {\r\n    // console.log(\"Preparing dropdown options for column:\", currentColumnHeader);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available for filtering\");\r\n      return [];\r\n    }\r\n\r\n    // Check if current header has a matching NLS value or is mandatory\r\n    const currentHeaderHasNLS = hasMatchingNLS(currentColumnHeader);\r\n    const isCurrentHeaderMandatory =\r\n      mandatoryAttributes.includes(currentColumnHeader);\r\n    const shouldExcludeOwnLabel =\r\n      currentHeaderHasNLS || isCurrentHeaderMandatory;\r\n\r\n    // For debugging\r\n    // console.log(\r\n    //   `Column '${currentColumnHeader}': has NLS match=${currentHeaderHasNLS}, is mandatory=${isCurrentHeaderMandatory}, should exclude own label=${shouldExcludeOwnLabel}`\r\n    // );\r\n\r\n    // Get currently selected values to filter them out (from other columns)\r\n    const selectedValues = Object.entries(selectedMappings)\r\n      .filter(([header]) => header !== currentColumnHeader)\r\n      .map(([_, mapping]) => mapping.uiLabel || mapping.mappedAttribute);\r\n\r\n    // For operation 2, we want to group options by their categories\r\n    if (operationChoice === \"2\") {\r\n      // Create grouped options structure\r\n      const groupedOptions = [];\r\n\r\n      // Look for EBOM attributes in the dropdown options\r\n      const ebomAttributes = dropdownOptions\r\n        .filter((attr) => {\r\n          // Basic filters first\r\n          const isEBOMAttribute = attr.group === \"EBOM Attributes\";\r\n          const isAlreadySelected = selectedValues.includes(attr.uiLabel);\r\n\r\n          // Check if this attribute matches ANY NLS value\r\n          const matchesAnyNLS = allNLSValues.some(\r\n            (nls) =>\r\n              nls.toLowerCase().trim() === attr.uiLabel.toLowerCase().trim()\r\n          );\r\n\r\n          // Check if this attribute is in the mandatory list\r\n          const isMandatory = mandatoryAttributes.includes(attr.uiLabel);\r\n\r\n          // Only exclude if it matches an NLS value AND is mandatory\r\n          const shouldExclude = matchesAnyNLS && isMandatory;\r\n\r\n          // For debugging\r\n          if (shouldExclude) {\r\n            // console.log(\r\n            //   `Excluding from dropdown: ${attr.uiLabel} (NLS match: ${matchesAnyNLS}, mandatory: ${isMandatory})`\r\n            // );\r\n          }\r\n\r\n          return isEBOMAttribute && !isAlreadySelected && !shouldExclude;\r\n        })\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      // Always add EBOM Attributes group if we have any EBOM attributes\r\n      if (ebomAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"EBOM Attributes\",\r\n          options: ebomAttributes,\r\n        });\r\n      }\r\n\r\n      // Add any Part Attributes group with the same filtering logic\r\n      const partAttributes = dropdownOptions\r\n        .filter((attr) => {\r\n          const isNotEBOMAttribute = attr.group !== \"EBOM Attributes\";\r\n          const isNotSystemAttribute = attr.group !== \"System Attributes\";\r\n          const isAlreadySelected = selectedValues.includes(attr.uiLabel);\r\n\r\n          // Check if this attribute matches ANY NLS value - same as non-operation 2 logic\r\n          const matchesAnyNLS = allNLSValues.some(\r\n            (nls) =>\r\n              nls.toLowerCase().trim() === attr.uiLabel.toLowerCase().trim()\r\n          );\r\n\r\n          // Check if this attribute is in the mandatory list\r\n          const isMandatory = mandatoryAttributes.includes(attr.uiLabel);\r\n\r\n          // Only exclude if it matches an NLS value AND is mandatory\r\n          const shouldExclude = matchesAnyNLS && isMandatory;\r\n\r\n          // For debugging\r\n          if (shouldExclude) {\r\n            // console.log(\r\n            //   `Excluding from dropdown: ${attr.uiLabel} (NLS match: ${matchesAnyNLS}, mandatory: ${isMandatory})`\r\n            // );\r\n          }\r\n\r\n          return (\r\n            isNotEBOMAttribute &&\r\n            isNotSystemAttribute &&\r\n            !isAlreadySelected &&\r\n            !shouldExclude\r\n          );\r\n        })\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      if (partAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"Item Attributes\",\r\n          options: partAttributes,\r\n        });\r\n      }\r\n\r\n      return groupedOptions;\r\n    }\r\n\r\n    // For operation 4, return only the 4 specific BOS Attributes\r\n    if (operationChoice === \"4\") {\r\n      // List of only the 4 attributes we want to show\r\n      const allowedBosAttributes = [\r\n        \"Print On Purchase Order Required\",\r\n        \"Print On Work Order Required\",\r\n        \"Work Order Document Required\",\r\n        \"Print On report Order Required\",\r\n      ];\r\n\r\n      // Return a flat array of only the 4 specific BOS Attributes\r\n      return dropdownOptions\r\n        .filter(\r\n          (attr) =>\r\n            attr.group === \"BOS Attributes\" &&\r\n            allowedBosAttributes.includes(attr.uiLabel) &&\r\n            !selectedValues.includes(attr.uiLabel)\r\n        )\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n    }\r\n\r\n    // For other operations, return flat list with the same filtering logic\r\n    const filteredOptions = dropdownOptions\r\n      .filter((attr) => {\r\n        const isAlreadySelected = selectedValues.includes(attr.uiLabel);\r\n\r\n        // Check if this attribute matches ANY NLS value\r\n        const matchesAnyNLS = allNLSValues.some(\r\n          (nls) =>\r\n            nls.toLowerCase().trim() === attr.uiLabel.toLowerCase().trim()\r\n        );\r\n\r\n        // Check if this attribute is in the mandatory list\r\n        const isMandatory = mandatoryAttributes.includes(attr.uiLabel);\r\n\r\n        // Only exclude if it matches an NLS value AND is mandatory\r\n        const shouldExclude = matchesAnyNLS && isMandatory;\r\n\r\n        // For debugging\r\n        if (shouldExclude) {\r\n          // console.log(\r\n          //   `Excluding from dropdown: ${attr.uiLabel} (NLS match: ${matchesAnyNLS}, mandatory: ${isMandatory})`\r\n          // );\r\n        }\r\n\r\n        // Return true to keep items that are either NOT already selected OR don't meet exclusion criteria\r\n        return !isAlreadySelected && !shouldExclude;\r\n      })\r\n      .map((attr) => ({\r\n        value: attr.uiLabel,\r\n        label: attr.uiLabel,\r\n      }));\r\n\r\n    // console.log(\r\n    //   \"Final filteredOptions for column:\",\r\n    //   currentColumnHeader,\r\n    //   filteredOptions\r\n    // );\r\n\r\n    return filteredOptions;\r\n  };\r\n\r\n  // Handles selection changes from Table\r\n  const handleSelectChange = (columnHeader, value) => {\r\n    console.log(\r\n      \"Selection changed for column:\",\r\n      columnHeader,\r\n      \"to value:\",\r\n      value\r\n    );\r\n\r\n    const backendName = getBackendNameForUILabel(value);\r\n    console.log(\"Mapped backend name:\", backendName);\r\n\r\n    setSelectedMappings((prev) => ({\r\n      ...prev,\r\n      [columnHeader]: {\r\n        columnName: columnHeader,\r\n        uiLabel: value,\r\n        mappedAttribute: backendName,\r\n        isMandatory: mandatoryAttributes.includes(columnHeader),\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Prepare column data with all needed information\r\n  const prepareColumnsData = () => {\r\n    return columnHeaders.map((header) => {\r\n      const hasNLS = hasMatchingNLS(header);\r\n      const isMandatory = mandatoryAttributes.includes(header);\r\n\r\n      // Special handling for operation 2 - disable system attributes even if not mandatory\r\n      let shouldBeDisabled = hasNLS && isMandatory;\r\n\r\n      if (operationChoice === \"2\" && hasNLS) {\r\n        // Check if this is a system attribute for operation 2\r\n        const isSystemAttribute = [\r\n          \"Description\",\r\n          \"EIN Number\",\r\n          \"Type\",\r\n          \"Title\",\r\n          \"Collaborative Space\",\r\n          \"Physical Product/Raw Material\",\r\n        ].some(\r\n          (attr) => header.toLowerCase().trim() === attr.toLowerCase().trim()\r\n        );\r\n\r\n        // For operation 2, disable if it's a system attribute regardless of mandatory status\r\n        if (isSystemAttribute) {\r\n          shouldBeDisabled = true;\r\n          // console.log(\r\n          //   `Operation 2: Disabling system attribute '${header}' regardless of mandatory status`\r\n          // );\r\n        }\r\n      }\r\n\r\n      return {\r\n        header,\r\n        isMandatory,\r\n        hasNLS,\r\n        currentMapping: selectedMappings[header],\r\n        defaultLabel: hasNLS ? header : \"Please select from Drop Down\",\r\n        disabled: shouldBeDisabled,\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={prepareColumnsData()}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedMappings={selectedMappings}\r\n      dropdownOptions={(header) => prepareDropdownOptions(header)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show, //controls modal visibility//\r\n  onHide, //function to hide modal//\r\n  columnHeaders, //array of column names from Excel//\r\n  mandatoryAttributes, //required fields from excel//\r\n  onColumnsMapped, //callback to receive the final mapping\r\n  existingMappings = {}, // Add this prop for existing mappings\r\n  dropdownOptions, // Receive dropdownOptions\r\n  allNLSValues, // Add this prop\r\n  operationChoice, // Add operation choice\r\n}) => {\r\n  // Initialize with existing mappings if available\r\n  const [selectedMappings, setSelectedMappings] = useState(existingMappings);\r\n\r\n  // Reset mappings when modal is opened with new existingMappings\r\n  useEffect(() => {\r\n    if (show && Object.keys(existingMappings).length > 0) {\r\n      setSelectedMappings(existingMappings);\r\n    }\r\n  }, [show, existingMappings]);\r\n\r\n  console.log(\"ColumnMappingModal NLS values:\", allNLSValues);\r\n\r\n  const handleOkClick = () => {\r\n    console.group(\"Column Mapping Results\");\r\n    console.log(\"Raw Mappings:\", selectedMappings);\r\n\r\n    // Create complete mappings including unmapped columns\r\n    const completeMappings = {};\r\n\r\n    // Start with existing mappings to ensure we don't lose any\r\n    const simplifiedMappings = { ...existingMappings };\r\n\r\n    // Helper function to check if column has matching NLS\r\n    const hasMatchingNLS = (header) => {\r\n      if (!Array.isArray(allNLSValues)) return false;\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      return allNLSValues.some(\r\n        (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n      );\r\n    };\r\n\r\n    // Helper function to get backend name for a column with NLS match\r\n    const getBackendNameForHeader = (header) => {\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      const matchingOption = dropdownOptions.find(\r\n        (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n      );\r\n      return matchingOption ? matchingOption.backendName : header;\r\n    };\r\n\r\n    // Special mapping for known attributes that might not have NLS matches\r\n    const specialMappings = {\r\n      \"EIN Number\": \"PartNumber\",\r\n    };\r\n\r\n    // Process all column headers\r\n    columnHeaders.forEach((columnName) => {\r\n      if (selectedMappings[columnName]) {\r\n        // Column was mapped by user - extract the proper backend name\r\n        const userMapping = selectedMappings[columnName];\r\n\r\n        // Handle both object and string mappings\r\n        if (typeof userMapping === \"object\" && userMapping !== null) {\r\n          // It's an object with mappedAttribute property\r\n          completeMappings[columnName] = userMapping;\r\n          simplifiedMappings[columnName] = userMapping.mappedAttribute;\r\n        } else {\r\n          // It's already a string\r\n          completeMappings[columnName] = {\r\n            columnName: columnName,\r\n            uiLabel: columnName,\r\n            mappedAttribute: userMapping,\r\n            isMandatory: mandatoryAttributes.includes(columnName),\r\n            autoMapped: false,\r\n          };\r\n          simplifiedMappings[columnName] = userMapping;\r\n        }\r\n      } else {\r\n        // Column was not manually mapped - check if it already has a mapping\r\n        if (existingMappings[columnName]) {\r\n          // Use existing mapping\r\n          const existingMapping = existingMappings[columnName];\r\n\r\n          if (typeof existingMapping === \"object\" && existingMapping !== null) {\r\n            // It's an object with mappedAttribute\r\n            completeMappings[columnName] = existingMapping;\r\n            simplifiedMappings[columnName] = existingMapping.mappedAttribute;\r\n          } else {\r\n            // It's a string backend name\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: existingMapping,\r\n              isMandatory: mandatoryAttributes.includes(columnName),\r\n              autoMapped: true,\r\n            };\r\n            // simplifiedMappings already has this from the spread above\r\n          }\r\n        } else {\r\n          // No existing mapping - try to create one\r\n          const hasNLS = hasMatchingNLS(columnName);\r\n          const isSpecialColumn = specialMappings[columnName];\r\n          const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n          if (hasNLS || isSpecialColumn || isMandatory) {\r\n            const mappedAttribute = isSpecialColumn\r\n              ? specialMappings[columnName]\r\n              : getBackendNameForHeader(columnName);\r\n\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: mappedAttribute,\r\n              isMandatory: isMandatory,\r\n              autoMapped: true,\r\n            };\r\n\r\n            simplifiedMappings[columnName] = mappedAttribute;\r\n          } else {\r\n            // For unmapped columns without NLS match, don't include them in the mappings at all\r\n            // This will effectively exclude them from the payload\r\n            console.log(\r\n              `Skipping unmapped column without NLS match: ${columnName}`\r\n            );\r\n            // Don't add anything to simplifiedMappings or completeMappings\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create final mapping object with complete mappings\r\n    const finalMapping = {\r\n      columnMappings: completeMappings,\r\n      totalColumns: Object.keys(completeMappings).length,\r\n    };\r\n\r\n    console.log(\"Final Mapping Object:\", finalMapping);\r\n    console.log(\"Simplified Mappings for Backend:\", simplifiedMappings);\r\n    console.groupEnd();\r\n\r\n    // Call the callback with the mappings if provided\r\n    if (onColumnsMapped) {\r\n      onColumnsMapped(simplifiedMappings, finalMapping);\r\n    }\r\n\r\n    onHide();\r\n  };\r\n\r\n  console.log(\r\n    \"ColumnMappingModal - received dropdownOptions:\",\r\n    dropdownOptions\r\n  );\r\n  console.log(\"ColumnMappingModal - operation choice:\", operationChoice);\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: handleOkClick,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Reset\",\r\n          variant: \"secondary\",\r\n          onClick: () => setSelectedMappings({}),\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        selectedMappings={selectedMappings}\r\n        setSelectedMappings={setSelectedMappings}\r\n        dropdownOptions={dropdownOptions}\r\n        allNLSValues={allNLSValues} // Pass this to MappedList\r\n        operationChoice={operationChoice} // Pass operation choice\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = (initialOperationChoice) => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const [operationChoice, setOperationChoice] = useState(\r\n    initialOperationChoice\r\n  );\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async (operation = null) => {\r\n    try {\r\n      // Use the passed operation or fall back to state\r\n      const effectiveOperation = operation || operationChoice;\r\n      console.log(\"Fetching column mapping for operation:\", effectiveOperation);\r\n\r\n      if (!effectiveOperation) {\r\n        console.log(\"No operation specified, skipping fetch\");\r\n        return;\r\n      }\r\n\r\n      // Update state if a new operation is passed\r\n      if (operation && operation !== operationChoice) {\r\n        setOperationChoice(operation);\r\n      }\r\n\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      const systemAttributes = [\r\n        {\r\n          name: \"description\", // Change from backendName to name\r\n          nls: \"Description\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Part Number\", // Change from backendName to name\r\n          nls: \"EIN Number\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"type\", // Change from backendName to name\r\n          nls: \"Type\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"title\", // Change from backendName to name\r\n          nls: \"Title\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\", // Change from backendName to name\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Physical Product/Raw Material\",\r\n          nls: \"Physical Product/Raw Material\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name:\"dimensionType\",\r\n          nls: \"Dimension\",\r\n          groupNLS: \"System Attributes\",\r\n        }\r\n        \r\n      ];\r\n\r\n      const controlCenterAttributes = [\r\n        {\r\n          name: \"EMR_hasMBOM\", // Change from backendName to name\r\n          nls: \"Has MBOM\",\r\n          groupNLS: \"Object Attributes\",\r\n        },\r\n        {\r\n          name: \"EMR_Phase\", // Change from backendName to name\r\n          nls: \"Phase\",\r\n          groupNLS: \"Object Attributes\",\r\n        },\r\n      ];\r\n\r\n      // Define EBOM attributes for Product Structure operation\r\n      let ebomAttributes = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomAttributes = [\r\n          {\r\n            name: \"MBOMFindNumber__e7ead0d4e78a4d7f99e9e5fd900f8fdf\",\r\n            nls: \"Find Number\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"MBOMComponentLocation__00cc2e44830642d69dd3728d8c279a75\",\r\n            nls: \"Component Location\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"Level\",\r\n            nls: \"Level\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"name\",\r\n            nls: \"Reference Designator\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"quantity\",\r\n            nls: \"Quantity\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          // {\r\n          //   name: \"PartType\",\r\n          //   nls: \"PartType\",\r\n          //   group: \"EBOM Attributes\",\r\n          //   groupNLS: \"EBOM Attributes\",\r\n          // },\r\n        ];\r\n      }\r\n\r\n      // Define BOS attributes for Physical Product-Document operation (operation 4)\r\n      let bosAttributes = [];\r\n      if (effectiveOperation === \"4\") {\r\n        bosAttributes = [\r\n          {\r\n            name: \"Print On Purchase Order Required\",\r\n            nls: \"Print On Purchase Order Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Print On Work Order Required\",\r\n            nls: \"Print On Work Order Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Work Order Document Required\",\r\n            nls: \"Work Order Document Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Print On report Order Required\",\r\n            nls: \"Print On report Order Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Part Type\",\r\n            nls: \"Part Type\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n\r\n          {\r\n            name: \"Part Revision\",\r\n            nls: \"Part Revision\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Document Type\",\r\n            nls: \"Document Type\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Document Name\",\r\n            nls: \"Document Name\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Document Revision\",\r\n            nls: \"Document Revision\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Relationship Type\",\r\n            nls: \"Relationship Type\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n        ];\r\n      }\r\n\r\n      const attributeGroups = groupData.map((item) => item.groupNLS);\r\n      console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      // Add EBOM Attributes group for operation 2\r\n      if (\r\n        effectiveOperation === \"2\" &&\r\n        !attributeGroups.includes(\"EBOM Attributes\")\r\n      ) {\r\n        attributeGroups.push(\"EBOM Attributes\");\r\n      }\r\n\r\n      // Add BOS Attributes group for operation 4\r\n      if (\r\n        effectiveOperation === \"4\" &&\r\n        !attributeGroups.includes(\"BOS Attributes\")\r\n      ) {\r\n        attributeGroups.push(\"BOS Attributes\");\r\n      }\r\n\r\n      // Get NLS values from API response\r\n      const apiNlsValues = groupData.map((item) => item.nls);\r\n      console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n      // Get NLS values from hardcoded system attributes\r\n      const systemNlsValues = systemAttributes.map((item) => item.nls);\r\n      console.log(\"System NLS Values:\", systemNlsValues);\r\n\r\n      // Get NLS values from EBOM attributes when operation is 2\r\n      let ebomNlsValues = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomNlsValues = ebomAttributes.map((item) => item.nls);\r\n        console.log(\"EBOM NLS Values:\", ebomNlsValues);\r\n      }\r\n      // / Get NLS values from BOS attributes when operation is 4\r\n      let bosNlsValues = [];\r\n      if (effectiveOperation === \"4\") {\r\n        bosNlsValues = bosAttributes.map((item) => item.nls);\r\n        console.log(\"BOS NLS Values:\", bosNlsValues);\r\n      }\r\n\r\n      // Combine all NLS values including EBOM attributes if operation is 2\r\n      const allNLSValues = [\r\n        ...new Set([\r\n          ...apiNlsValues,\r\n          ...systemNlsValues,\r\n          ...ebomNlsValues,\r\n          ...bosNlsValues,\r\n        ]),\r\n      ];\r\n      console.log(\"all nls value with Hardcode :\", allNLSValues);\r\n\r\n      // First filter out System Attributes from API response\r\n      const filteredGroupData = groupData.filter(\r\n        (attr) => attr.groupNLS !== \"System Attributes\"\r\n      );\r\n\r\n      console.log(\r\n        \"Filtered out API system attributes:\",\r\n        groupData.length - filteredGroupData.length,\r\n        \"items removed\"\r\n      );\r\n\r\n      // Then merge non-system API attributes with hardcoded ones and EBOM attributes\r\n      let mergeAttributes = [...filteredGroupData, ...systemAttributes,...controlCenterAttributes];\r\n      if (effectiveOperation === \"2\") {\r\n        mergeAttributes = [...mergeAttributes, ...ebomAttributes];\r\n        console.log(\r\n          \"Added EBOM attributes to merged attributes for operation 2\",\r\n          mergeAttributes\r\n        );\r\n      }\r\n      if (effectiveOperation === \"4\") {\r\n        mergeAttributes = [...mergeAttributes, ...bosAttributes];\r\n        console.log(\r\n          \"Added BOS attributes to merged attributes for operation 4\",\r\n          mergeAttributes\r\n        );\r\n      }\r\n\r\n      console.log(\"Final merged attributes including Control Center:\", mergeAttributes);\r\n\r\n      // Then continue with your other filtering if needed\r\n      const relevantAttributes =\r\n        mergeAttributes.filter(\r\n          (attr) =>\r\n            attr.deploymentExtension === true ||\r\n            (attr.groupNLS && attr.groupNLS.trim() !== \"\") ||\r\n            (effectiveOperation === \"2\" && attr.group === \"EBOM Attributes\")\r\n        ) || [];\r\n\r\n      console.log(\"Non-system attributes from API:\", relevantAttributes.length);\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name || attr.backendName, // Backend Name (or name)\r\n        group: attr.groupNLS || attr.group || \"General\", // Default group if not specified\r\n      }));\r\n\r\n      // Create a filtered version for dropdown that excludes System Attributes\r\n      const dropdownOptions = mappedData.filter(\r\n        (attr) => attr.group !== \"System Attributes\"\r\n      );\r\n      console.log(\"Mapped Attributes (total):\", mappedData);\r\n      console.log(\r\n        \"Dropdown Options (excluding System Attributes):\",\r\n        dropdownOptions\r\n      );\r\n\r\n      // Organize attributes by their groups\r\n      const attributesByGroup = {};\r\n\r\n      attributeGroups.forEach((group) => {\r\n        attributesByGroup[group] = mappedData.filter(\r\n          (attr) => attr.group === group\r\n        );\r\n      });\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\r\n        \"Mapped Attributes (for dropdown) excluding System Attributes:\",\r\n        dropdownOptions\r\n      );\r\n      console.log(\"Attributes By Group:\", attributesByGroup);\r\n      console.log(\r\n        \"System Attributes found:\",\r\n        relevantAttributes.filter(\r\n          (attr) => attr.groupNLS === \"System Attributes\"\r\n        ).length\r\n      );\r\n      console.log(\r\n        \"Sample System Attribute:\",\r\n        relevantAttributes.find((attr) => attr.groupNLS === \"System Attributes\")\r\n      );\r\n\r\n      // For operation 2, log EBOM attributes as well\r\n      if (effectiveOperation === \"2\") {\r\n        console.log(\r\n          \"EBOM Attributes found:\",\r\n          relevantAttributes.filter(\r\n            (attr) =>\r\n              attr.groupNLS === \"EBOM Attributes\" ||\r\n              attr.group === \"EBOM Attributes\"\r\n          ).length\r\n        );\r\n        console.log(\r\n          \"Sample EBOM Attribute:\",\r\n          relevantAttributes.find(\r\n            (attr) =>\r\n              attr.groupNLS === \"EBOM Attributes\" ||\r\n              attr.group === \"EBOM Attributes\"\r\n          )\r\n        );\r\n      }\r\n\r\n      setMappedAttributes({\r\n        allNLSValues: allNLSValues,\r\n        dropdownOptions: dropdownOptions, // Use filtered list without System Attributes\r\n        mappedData: mappedData, // Keep full list for other purposes\r\n        attributesByGroup: attributesByGroup,\r\n        groups: attributeGroups,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationChoice) {\r\n      fetchColumnMapping();\r\n    }\r\n  }, [operationChoice]);\r\n\r\n  return { mappedAttributes, refreshMapping: fetchColumnMapping };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useFetchDocumentData = (initialOperationType) => {\r\n  const { showErrorToast } = useToast();\r\n  const [documentData, setDocumentData] = useState(null);\r\n  const [mappedAttributes, setMappedAttributes] = useState({\r\n    allNLSValues: [],\r\n    dropdownOptions: [],\r\n    mappedData: [],\r\n  });\r\n  const [operationType, setOperationType] = useState(initialOperationType);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  const API_URL = `${ENOVIA_BASE_URL}/resources/v1/collabServices/authoring/createContent/typeInfo?tenant=OI000186152&xrequestedwith=xmlhttprequest`;\r\n\r\n  const fetchDocumentData = async (operation = null) => {\r\n    // Use passed operation or fall back to state\r\n    const effectiveOperation = operation || operationType;\r\n\r\n    if (effectiveOperation !== \"3\") {\r\n      console.log(\"Not document operation type, skipping fetch\");\r\n      return;\r\n    }\r\n\r\n    // Update state if new operation passed\r\n    if (operation && operation !== operationType) {\r\n      setOperationType(operation);\r\n    }\r\n\r\n    try {\r\n      console.log(\r\n        \"Fetching document data for operation type:\",\r\n        effectiveOperation\r\n      );\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        console.error(\"Failed to fetch CSRF headers.\");\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      const body = {\r\n        type: \"Document\",\r\n        preferedType: \"Document\",\r\n        typeName: \"Document\",\r\n        subTypes: true,\r\n        runUXBL: true,\r\n        metrics: {\r\n          UXName: \"New\",\r\n          client_app_domain: \"3DEXPERIENCE 3DDashboard\",\r\n          client_app_name: \"ENXWDOC_AP\",\r\n        },\r\n      };\r\n\r\n      // Fetch data from API\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        API_URL,\r\n        body,\r\n        headers\r\n      );\r\n      console.log(\"API Response for Document template:\", response);\r\n\r\n      // Validate response structure\r\n      if (response.status !== true) {\r\n        console.error(\"Invalid API response structure:\", response);\r\n        showErrorToast(\r\n          \"Failed to fetch document data. Invalid response structure.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Extract relevant data\r\n      const documentInfo = response.output.result[0];\r\n      console.log(\r\n        \"Full documentInfo structure:\",\r\n        JSON.stringify(documentInfo, null, 2)\r\n      );\r\n\r\n      // Check different possible paths for extensionAttributes\r\n      const extensionAttributes =\r\n        documentInfo?.extensionAttributes ||\r\n        documentInfo?.attributes?.extensionAttributes ||\r\n        [];\r\n\r\n      console.log(\"Found extensionAttributes:\", extensionAttributes);\r\n\r\n      // Your hardcoded document attributes\r\n      const DocumentsAttributes = [\r\n        {\r\n          name: \"description\",\r\n          nls: \"Description\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"name\",\r\n          nls: \"Document Name\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"type\",\r\n          nls: \"Document Type\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"title\",\r\n          nls: \"Title\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\",\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name:\"File\",\r\n          nls: \"File\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        }\r\n\r\n      ];\r\n\r\n      // Extract dropdown options only if extensionAttributes exists\r\n      if (extensionAttributes && extensionAttributes.length > 0) {\r\n        // Extract all NLS values from API\r\n        const apiNlsValues = extensionAttributes.map((attr) => attr.nls);\r\n        console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n        // Extract NLS values from hardcoded attributes\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n        // console.log(\"Hardcoded NLS Values:\", hardcodedNlsValues);\r\n\r\n        // Combine both NLS value sets (using Set to remove duplicates)\r\n        const allNLSValues = [\r\n          ...new Set([...apiNlsValues, ...hardcodedNlsValues]),\r\n        ];\r\n        console.log(\r\n          \"Document Operation - All Combined NLS Values:\",\r\n          allNLSValues\r\n        );\r\n\r\n        // Process API attributes (with name splitting)\r\n        const apiOptions = extensionAttributes.map((attr) => {\r\n          // Extract the attribute name after the dot\r\n          const fullName = attr.name;\r\n          const nameParts = fullName.split(\".\");\r\n          const extractedName = nameParts.length > 1 ? nameParts[1] : fullName;\r\n\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: extractedName,\r\n            fullName: attr.name,\r\n            group: \"API Attributes\",\r\n          };\r\n        });\r\n\r\n        // Process hardcoded attributes\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        // Combine both for mappedData\r\n        const combinedMappedData = [...apiOptions, ...hardcodedOptions];\r\n\r\n        // console.log(\"Document Operation - API Dropdown Options:\", apiOptions);\r\n        console.log(\r\n          \"Document Operation - Combined Mapped Data:\",\r\n          combinedMappedData\r\n        );\r\n\r\n        // Update state with specific configurations for each property\r\n        setMappedAttributes({\r\n          allNLSValues: allNLSValues, // Combined NLS values for matching\r\n          dropdownOptions: apiOptions, // Only API options for dropdown\r\n          mappedData: combinedMappedData, // Both API and hardcoded for payload\r\n        });\r\n      } else {\r\n        // If no API attributes, use hardcoded ones for everything\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n\r\n        // Create hardcoded options for mappedData when no API data exists\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        setMappedAttributes({\r\n          allNLSValues: hardcodedNlsValues, // Use hardcoded NLS for matching\r\n          dropdownOptions: [], // Empty dropdown options as requested\r\n          mappedData: hardcodedOptions, // Use hardcoded options for payload\r\n        });\r\n      }\r\n\r\n      // Set the document data in state\r\n      setDocumentData(documentInfo);\r\n    } catch (error) {\r\n      console.error(\"Error fetching document data:\", error);\r\n      showErrorToast(error.message || \"Error fetching document data.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationType === \"3\") {\r\n      fetchDocumentData();\r\n    }\r\n  }, [operationType]);\r\n\r\n  // Return structure matching useMassUpload\r\n  return {\r\n    mappedAttributes,\r\n    refreshMapping: fetchDocumentData,\r\n  };\r\n};\r\n\r\nexport default useFetchDocumentData;\r\n","import React from \"react\";\r\nimport \"./Pagination.css\";\r\n\r\nconst Pagination = ({\r\n  currentPage,\r\n  totalItems,\r\n  itemsPerPage,\r\n  onPageChange,\r\n}) => {\r\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n\r\n  if (totalPages <= 1) return null;\r\n\r\n  const start = (currentPage - 1) * itemsPerPage + 1;\r\n  const end = Math.min(currentPage * itemsPerPage, totalItems);\r\n\r\n  return (\r\n    <div className=\"pagination-footer\">\r\n      <div className=\"pagination-info\">\r\n        Showing {start}–{end} of {totalItems}\r\n      </div>\r\n      <div className=\"pagination-controls\">\r\n        <button\r\n          disabled={currentPage === 1}\r\n          onClick={() => onPageChange(currentPage - 1)}\r\n        >\r\n          Prev\r\n        </button>\r\n        {Array.from({ length: totalPages }, (_, i) => (\r\n          <button\r\n            key={i}\r\n            className={currentPage === i + 1 ? \"active\" : \"\"}\r\n            onClick={() => onPageChange(i + 1)}\r\n          >\r\n            {i + 1}\r\n          </button>\r\n        ))}\r\n        <button\r\n          disabled={currentPage === totalPages}\r\n          onClick={() => onPageChange(currentPage + 1)}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useMemo, useState, useEffect } from \"react\";\r\nimport CustomModal from \"../Modal/customModal\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"react-virtualized/styles.css\";\r\nimport \"./SuccessModal.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport Pagination from \"../Pagination/Pagination\";\r\nimport { ResizableBox } from \"react-resizable\";\r\nimport \"react-resizable/css/styles.css\";\r\n\r\nconst SuccessModal = ({\r\n  show = false,\r\n  onHide = () => {},\r\n  responseData = [],\r\n}) => {\r\n  const itemsPerPage = 15;\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [columnWidths, setColumnWidths] = useState({});\r\n  const [copiedCell, setCopiedCell] = useState(null); // Change to: {rowIndex: null, colIndex: null}\r\n\r\n  // Memoized CellMeasurer cache\r\n  const cache = useMemo(() => {\r\n    return new CellMeasurerCache({\r\n      fixedWidth: true,\r\n      defaultHeight: 50,\r\n    });\r\n  }, []);\r\n\r\n  // Preprocess response data to flatten nested arrays\r\n  const flattenedData = useMemo(() => {\r\n    // Function to flatten nested arrays\r\n    const flatten = (data) => {\r\n      if (!data || !Array.isArray(data)) return [];\r\n\r\n      // First, check if we have an array of arrays\r\n      const isNestedArray = data.some((item) => Array.isArray(item));\r\n\r\n      if (isNestedArray) {\r\n        // Flatten one level of arrays\r\n        return data.flatMap((item) => (Array.isArray(item) ? item : [item]));\r\n      }\r\n\r\n      return data;\r\n    };\r\n\r\n    return flatten(responseData);\r\n  }, [responseData]);\r\n\r\n  // Dynamically generate columns based on the flattened response data\r\n  const columns = useMemo(() => {\r\n    if (!flattenedData || flattenedData.length === 0) return [];\r\n\r\n    // Collect all unique keys from ALL items in the flattened data\r\n    const allKeys = new Set();\r\n    flattenedData.forEach((item) => {\r\n      if (typeof item === \"object\" && item !== null) {\r\n        Object.keys(item).forEach((key) => allKeys.add(key));\r\n      }\r\n    });\r\n\r\n    // Helper function to format header text\r\n\r\n    const formatHeaderText = (key) => {\r\n      // Replace underscores and hyphens with spaces\r\n      const spacedText = key.replace(/[_-]/g, \" \");\r\n\r\n      // Convert to title case (capitalize first letter of each word)\r\n      return spacedText\r\n        .split(\" \")\r\n        .map((word) =>\r\n          word === word.toUpperCase()\r\n            ? word // preserve acronyms like EIN, ID\r\n            : word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\r\n        )\r\n        .join(\" \");\r\n    };\r\n\r\n    // Convert keys to column definitions\r\n    return Array.from(allKeys).map((key) => {\r\n      let width = columnWidths[key] || 120;\r\n\r\n      // Set different widths based on the column content type\r\n      if (key.toLowerCase().includes(\"message\")) {\r\n        width = columnWidths[key] || 200; // Message columns are wider\r\n      } else if (key.toLowerCase().includes(\"status\")) {\r\n        width = columnWidths[key] || 100;\r\n      }\r\n\r\n      return {\r\n        key: key,\r\n        header: formatHeaderText(key), // Use the formatted header text\r\n        width: width,\r\n        tooltip: formatHeaderText(key), // Update tooltip too\r\n      };\r\n    });\r\n  }, [flattenedData, columnWidths]);\r\n\r\n  const handleResize = (key, newWidth) => {\r\n    setColumnWidths((prev) => ({ ...prev, [key]: newWidth }));\r\n  };\r\n\r\n  // Paginate response data\r\n  const paginatedData = useMemo(() => {\r\n    const start = (currentPage - 1) * itemsPerPage;\r\n    return flattenedData.slice(start, start + itemsPerPage);\r\n  }, [currentPage, flattenedData]);\r\n\r\n  const handleExport = () => {\r\n    handleExportExcel(flattenedData, \"upload-results.xlsx\");\r\n  };\r\n\r\n  console.log(\"SuccessModal received response data:\", responseData);\r\n  console.log(\"Generated columns:\", columns);\r\n\r\n  useEffect(() => {\r\n    cache.clearAll();\r\n  }, [paginatedData, cache]);\r\n\r\n  const handlePageChange = (newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  // Safe getter function to handle case sensitivity and missing properties\r\n  const getItemValue = (item, key) => {\r\n    if (!item || typeof item !== \"object\") return \"-\";\r\n\r\n    // Direct match\r\n    if (item[key] !== undefined) return item[key];\r\n\r\n    // Case-insensitive match\r\n    const lowerKey = key.toLowerCase();\r\n    for (const k of Object.keys(item)) {\r\n      if (k.toLowerCase() === lowerKey) {\r\n        return item[k];\r\n      }\r\n    }\r\n\r\n    return \"-\";\r\n  };\r\n\r\n  // Function to copy a single cell value\r\n  const handleCopyCellValue = (value, rowIndex, colIndex, buttonElement) => {\r\n    if (!value || value === \"-\") return;\r\n\r\n    // Convert objects or arrays to JSON string before copying\r\n    const textToCopy =\r\n      typeof value === \"object\" ? JSON.stringify(value) : String(value);\r\n\r\n    navigator.clipboard\r\n      .writeText(textToCopy)\r\n      .then(() => {\r\n        // Add the copied class to the button itself\r\n        if (buttonElement) {\r\n          buttonElement.classList.add(\"copied\");\r\n\r\n          // Remove the class after 1.5 seconds\r\n          setTimeout(() => {\r\n            buttonElement.classList.remove(\"copied\");\r\n          }, 1000);\r\n        }\r\n\r\n        // We can keep this for tracking which cell was copied if needed\r\n        setCopiedCell({ rowIndex, colIndex });\r\n        setTimeout(() => setCopiedCell(null), 1500);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Failed to copy cell value:\", err);\r\n      });\r\n  };\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const item = paginatedData[index];\r\n    if (!item) return null;\r\n\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"virtualized-row\">\r\n          {columns.map((column, colIndex) => {\r\n            const value = getItemValue(item, column.key);\r\n\r\n            // Convert any object/array values to string for display\r\n            const displayValue =\r\n              typeof value === \"object\" && value !== null\r\n                ? JSON.stringify(value)\r\n                : String(value);\r\n\r\n            // Check if this specific cell position is copied\r\n            const isCopied =\r\n              copiedCell &&\r\n              copiedCell.rowIndex === index &&\r\n              copiedCell.colIndex === colIndex;\r\n\r\n            // Special handling for status field\r\n            if (column.key.toLowerCase().includes(\"status\")) {\r\n              const statusValue = String(value).toLowerCase();\r\n              const statusClass = statusValue.includes(\"success\")\r\n                ? \"success\"\r\n                : statusValue.includes(\"fail\") || statusValue.includes(\"error\")\r\n                ? \"failed\"\r\n                : \"\";\r\n\r\n              return (\r\n                <div\r\n                  key={colIndex}\r\n                  className={`virtualized-cell status-cell ${statusClass} ${\r\n                    isCopied ? \"copied\" : \"\"\r\n                  }`}\r\n                  style={{ width: column.width, position: \"relative\" }}\r\n                  title={displayValue}\r\n                >\r\n                  {displayValue}\r\n                  <button\r\n                    className=\"cell-copy-button\"\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      // Pass the button element reference to the handler\r\n                      handleCopyCellValue(\r\n                        value,\r\n                        index,\r\n                        colIndex,\r\n                        e.currentTarget\r\n                      );\r\n                    }}\r\n                    aria-label=\"Copy cell value\"\r\n                    title=\"Copy to clipboard\"\r\n                  >\r\n                    {/* Copy icon (visible by default) */}\r\n                    <svg\r\n                      className=\"copy-icon\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"14\"\r\n                      height=\"14\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <rect\r\n                        x=\"9\"\r\n                        y=\"9\"\r\n                        width=\"13\"\r\n                        height=\"13\"\r\n                        rx=\"2\"\r\n                        ry=\"2\"\r\n                      ></rect>\r\n                      <path d=\"M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1\"></path>\r\n                    </svg>\r\n\r\n                    {/* Checkmark icon (initially hidden) */}\r\n                    <svg\r\n                      className=\"copied-icon\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"14\"\r\n                      height=\"14\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M20 6L9 17l-5-5\"></path>\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            // Default handling for other fields\r\n            return (\r\n              <div\r\n                key={colIndex}\r\n                className={`virtualized-cell ${isCopied ? \"copied\" : \"\"}`}\r\n                style={{ width: column.width, position: \"relative\" }}\r\n                title={displayValue}\r\n              >\r\n                {displayValue}\r\n                <button\r\n                  className=\"cell-copy-button\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleCopyCellValue(value, index, colIndex);\r\n                  }}\r\n                  aria-label=\"Copy cell value\"\r\n                  title=\"Copy to clipboard\"\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"14\"\r\n                    height=\"14\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    strokeWidth=\"2\"\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                  >\r\n                    <rect\r\n                      x=\"9\"\r\n                      y=\"9\"\r\n                      width=\"13\"\r\n                      height=\"13\"\r\n                      rx=\"2\"\r\n                      ry=\"2\"\r\n                    ></rect>\r\n                    <path d=\"M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1\"></path>\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Upload Results\"\r\n      size=\"lg\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <div className=\"success-modal-content\">\r\n        <div className=\"top-bar\">\r\n          <div></div>\r\n          <CustomButton\r\n            variant=\"success\"\r\n            size=\"lg\"\r\n            onClick={handleExport}\r\n            className=\"m-2 border-bottom-10px\"\r\n            text=\"Export to Excel \"\r\n          />\r\n        </div>\r\n\r\n        <ReusableAlert\r\n          variant=\"success\"\r\n          message={\r\n            <p className=\"success-message-text\">\r\n              ✅ <strong>Success:</strong> {flattenedData.length} item\r\n              {flattenedData.length > 1 ? \"s\" : \"\"} processed.\r\n            </p>\r\n          }\r\n          className=\"mb-3\"\r\n        />\r\n\r\n        {columns.length > 0 ? (\r\n          <>\r\n            <div className=\"virtualized-table-container\">\r\n              <div className=\"virtualized-header\" style={{ display: \"flex\" }}>\r\n                {columns.map((column, idx) => (\r\n                  <ResizableBox\r\n                    key={column.key}\r\n                    width={column.width}\r\n                    height={30}\r\n                    axis=\"x\"\r\n                    resizeHandles={[\"e\"]}\r\n                    handle={\r\n                      <span\r\n                        className=\"custom-resizer\"\r\n                        style={{\r\n                          cursor: \"col-resize\",\r\n                          width: 8,\r\n                          height: \"100%\",\r\n                          display: \"inline-block\",\r\n                          position: \"absolute\",\r\n                          right: 0,\r\n                          top: 0,\r\n                        }}\r\n                      />\r\n                    }\r\n                    onResizeStop={(e, data) =>\r\n                      handleResize(column.key, data.size.width)\r\n                    }\r\n                    minConstraints={[90, 30]}\r\n                    maxConstraints={[200, 30]}\r\n                  >\r\n                    <div\r\n                      className=\"virtualized-header-cell\"\r\n                      style={{\r\n                        width: column.width,\r\n                        minWidth: 90,\r\n                        maxWidth: 200,\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        position: \"relative\",\r\n                        userSelect: \"none\",\r\n                        paddingRight: 8,\r\n                        boxSizing: \"border-box\",\r\n                      }}\r\n                      title={column.header}\r\n                    >\r\n                      {column.header}\r\n                    </div>\r\n                  </ResizableBox>\r\n                ))}\r\n              </div>\r\n\r\n              <div className=\"virtualized-body\">\r\n                <AutoSizer>\r\n                  {({ height, width }) => (\r\n                    <List\r\n                      width={width}\r\n                      height={height - 10}\r\n                      rowCount={paginatedData.length}\r\n                      rowHeight={cache.rowHeight}\r\n                      deferredMeasurementCache={cache}\r\n                      rowRenderer={rowRenderer}\r\n                      overscanRowCount={5}\r\n                    />\r\n                  )}\r\n                </AutoSizer>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Pagination Controls */}\r\n            <Pagination\r\n              currentPage={currentPage}\r\n              totalItems={flattenedData.length}\r\n              itemsPerPage={itemsPerPage}\r\n              onPageChange={handlePageChange}\r\n            />\r\n          </>\r\n        ) : (\r\n          <div className=\"no-data-message\">No response data available.</div>\r\n        )}\r\n      </div>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default SuccessModal;\r\n","import { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport useToast from \"../useToast\";\r\nimport { useState } from \"react\";\r\n\r\nasync function chunkArray(array, size) {\r\n    const chunks = [];\r\n    for (let i = 0; i < array.length; i += size) {\r\n      chunks.push(array.slice(i, i + size));\r\n    }\r\n    return chunks;\r\n  }\r\nconst useMEPMassUpload = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  \r\n  const handleMEPMassupload = async (sheetData) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"useMEPMassUpload Headers\", headers);\r\n      console.log(\"useMEPMassUpload in SheetData\", sheetData);\r\n      console.log(\"ENOVIA_BASE_URL\", ENOVIA_BASE_URL);\r\n\r\n      if (!sheetData || sheetData.length === 0) {\r\n        showErrorToast(\"No data to upload. Please check your sheet.\");\r\n        return;\r\n      }\r\n\r\n      const chunkSize = 1000;\r\n      const chunks =\r\n        sheetData?.length > chunkSize\r\n          ? chunkArray(sheetData, chunkSize)\r\n          : [sheetData];\r\n        \r\n\r\n      console.log(\"Chunks:\", chunks);\r\n      // let searchedItems = [];\r\n      let createMEPItems = [];\r\n      for (let i = 0; i < chunks.length; i++) {\r\n        const chunk = chunks[i];\r\n         console.log(`Processing chunk ${i + 1}/${chunks.length}`);\r\n        console.log(\"Chunk Data:\", chunk);\r\n        for (const row of chunk) {\r\n          try {\r\n            const response = await callEnoviaWebService(\r\n              \"GET\",\r\n              `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?$searchStr=${row?.Title}`,\r\n              \"\",\r\n              headers\r\n            );\r\n            if (response?.status === true && response?.output?.member?.length) {\r\n              const match = response.output.member.find(\r\n                (item) => item?.title === row?.Title\r\n              );\r\n              if (match) {\r\n                console.log(\"==================\", match);\r\n                if(match?.state !== 'RELEASED' || match?.state !== 'FROZEN') {\r\n                  let checkMepResponse = await ValidateMep(\r\n                    ENOVIA_BASE_URL,\r\n                    match?.title,\r\n                    headers\r\n                  );\r\n                  console.log(\"New APi Check Validation\", checkMepResponse);\r\n                  if (\r\n                    checkMepResponse.status &&\r\n                    checkMepResponse?.output?.member?.length > 0\r\n                  ) {\r\n                    let memberData = checkMepResponse?.output?.member[0];\r\n                    console.log(\"memberData =======\", memberData);\r\n                    if (memberData?.manufacturer) {\r\n                      // Update MEI Start\r\n                      const uploadBody = {\r\n                        partSource: row[\"Part Source\"] || \"\",\r\n                        partSourceURL: row[\"Part Source URL\"] || \"\",\r\n                        manufacturerPartNumber: String(\r\n                          row[\"Manufacturer Part Number\"] || \"\"\r\n                        ),\r\n                        cestamp: memberData?.cestamp,\r\n                      };\r\n                      console.log(\"Upload Body:\", uploadBody);\r\n                      try {\r\n                        console.log(\"match details in update api loop =======\", match);\r\n                        const response = await callEnoviaWebService(\r\n                          \"PATCH\",\r\n                          `${ENOVIA_BASE_URL}/resources/v1/modeler/dssrc/dssrc:ManufacturerEquivalentItems/${match?.id}`,\r\n                          uploadBody,\r\n                          headers\r\n                        );\r\n                        if (response.status) {\r\n                          console.log(\"Update Item Response:\", response);\r\n                        } else {\r\n                          showErrorToast(response?.message || \"\");\r\n                        }\r\n                      } catch (error) {\r\n                        console.error(\r\n                          `Error creating item for row with Title ${row?.Title}:`,\r\n                          error\r\n                        );\r\n                        showErrorToast(\r\n                          `Error creating item for row with Title ${row?.Title}`\r\n                        );\r\n                      }                     \r\n                    }else{\r\n                       showErrorToast(\"It's not a Manufacturing Equalent Item\");\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            } else if (response?.output?.member?.length === 0) {\r\n              console.log(\"No match found for row\", row);\r\n              // createMEPItems.push(row);\r\n              const createBody = {\r\n                items: [\r\n                  {\r\n                    type: \"VPMReference\",\r\n                    attributes: {\r\n                      title: row?.Title || \"\",\r\n                      isManufacturable: true,\r\n                      description: row?.Description || \"\",\r\n                    },\r\n                  },\r\n                ],\r\n              };\r\n              try {\r\n                const response = await callEnoviaWebService(\r\n                  \"POST\",\r\n                  `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem`,\r\n                  createBody,\r\n                  headers\r\n                );\r\n                console.log(\"Create Item Response:\", response);\r\n                if (response.status && response.output?.member?.length) {\r\n                  const extensionBody = [\r\n                    {\r\n                      engItem: {\r\n                        source:\r\n                          \"https://oi000186152-us1-compass.3dexperience.3ds.com:443/enovia\",\r\n                        type: \"VPMReference\",\r\n                        identifier: response.output?.member[0]?.id,\r\n                        relativePath:\r\n                          \"/resource/v1/dseng/dseng:EngItem/\" +\r\n                          response.output?.member[0]?.id,\r\n                      },\r\n                      manufacturerCompany: {\r\n                        identifier: \"uuid:f635eda1-d663-4d18-a269-de034998a6e1\",\r\n                        relativePath:\r\n                          \"/3drdfpersist/resources/v1/modeler/dsvnp/dsvnp:SupplierCompany/uuid:f635eda1-d663-4d18-a269-de034998a6e1\",\r\n                        source:\r\n                          \"https://oi000186152-us1-3dnetwork.3dexperience.3ds.com:443\",\r\n                        type: \"SupplierCompany\",\r\n                      },\r\n                      manufacturerPartNumber: String(\r\n                        row[\"Manufacturer Part Number\"]\r\n                      ) || \"\",\r\n                      partSourceURL: row[\"Part Source URL\"] || \"\",\r\n                      partSource: row[\"Part Source\"] || \"\",\r\n                    },\r\n                  ];\r\n                  const extensionresponse = await callEnoviaWebService(\r\n                    \"POST\",\r\n                    `${ENOVIA_BASE_URL}/resources/v1/modeler/dssrc/dssrc:ManufacturerEquivalentItems`,\r\n                    extensionBody,\r\n                    headers\r\n                  );\r\n                  console.log(\"Extension Item Response:\", extensionresponse);\r\n                  if (\r\n                    !(\r\n                      extensionresponse.status &&\r\n                      extensionresponse.output?.member?.length\r\n                    )\r\n                  ) {\r\n                    console.error(\r\n                      `Failed to create ManufacturerEquivalentItems for row ${i} with Title ${row?.Title}.`\r\n                    );\r\n                    showErrorToast(\r\n                      extensionresponse?.message ||\r\n                        \"Failed to create ManufacturerEquivalentItems.\"\r\n                    );\r\n                  }\r\n                }\r\n              } catch (error) {\r\n                console.error(\r\n                  `Error creating item for row ${i} with Title ${row?.Title}:`,\r\n                  error\r\n                );\r\n                showErrorToast(\r\n                  `An error occurred while creating item for row ${i} with Title ${row?.Title}.`\r\n                );\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error(\r\n              `Error processing row ${i} with Title ${row?.Title}:`,\r\n              error\r\n            );\r\n          }\r\n        }\r\n      }\r\n      // console.log(\"All matched items:\", searchedItems);\r\n      console.log(`Not Matched Items:`, createMEPItems);\r\n      // setCreateItems(createMEPItems);\r\n      // setUpdateItems(searchedItems);\r\n    } catch (error) {\r\n      console.error(\"MEP MASS UPLOAD Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching MEP Mass Upload data.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // const updateMassupload = async (createItems, updateItems, reset) => {\r\n  //   try {\r\n  //     setLoading(true);\r\n  //     const headers = await fetchCsrfToken();\r\n  //     if (!headers) {\r\n  //       showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n  //       return;\r\n  //     }\r\n\r\n  //     const { SecurityContext, ENO_CSRF_TOKEN } = headers;\r\n  //     const newHeaders = {\r\n  //       SecurityContext: \"VPLMProjectLeader.Company Name.Micro Motion\",\r\n  //       ENO_CSRF_TOKEN: ENO_CSRF_TOKEN,\r\n  //     };\r\n  //     let createFailed = false;\r\n  //     let updateFailed = false;\r\n  //     if (!updateItems || updateItems.length === 0) {\r\n  //       showErrorToast(\"No data to Update.\");\r\n  //       // return;\r\n  //     }\r\n  //     if (!createItems || createItems.length === 0) {\r\n  //       showErrorToast(\"No data to Create.\");\r\n  //       // return;\r\n  //     }\r\n  //     // ============ For Create MEP Mass Upload Update =================\r\n      // if (createItems?.length > 0) {\r\n      //   for (let i = 0; i < createItems.length; i++) {\r\n      //     const row = createItems[i];\r\n      //     const createBody = {\r\n      //       items: [\r\n      //         {\r\n      //           type: \"VPMReference\",\r\n      //           attributes: {\r\n      //             title: row?.Title,\r\n      //             isManufacturable: true,\r\n      //             description: row?.Description,\r\n      //           },\r\n      //         },\r\n      //       ],\r\n      //     };\r\n      //     try {\r\n      //       const response = await callEnoviaWebService(\r\n      //         \"POST\",\r\n      //         `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem`,\r\n      //         createBody,\r\n      //         newHeaders\r\n      //       );\r\n      //       console.log(\"Create Item Response:\", response);\r\n      //       if (response.status && response.output?.member?.length) {\r\n      //         const extensionBody = [\r\n      //           {\r\n      //             engItem: {\r\n      //               source:\r\n      //                 \"https://oi000186152-us1-compass.3dexperience.3ds.com:443/enovia\",\r\n      //               type: \"VPMReference\",\r\n      //               identifier: response.output?.member[0]?.id,\r\n      //               relativePath:\r\n      //                 \"/resource/v1/dseng/dseng:EngItem/\" +\r\n      //                 response.output?.member[0]?.id,\r\n      //             },\r\n      //             manufacturerCompany: {\r\n      //               identifier: \"uuid:f635eda1-d663-4d18-a269-de034998a6e1\",\r\n      //               relativePath:\r\n      //                 \"/3drdfpersist/resources/v1/modeler/dsvnp/dsvnp:SupplierCompany/uuid:f635eda1-d663-4d18-a269-de034998a6e1\",\r\n      //               source:\r\n      //                 \"https://oi000186152-us1-3dnetwork.3dexperience.3ds.com:443\",\r\n      //               type: \"SupplierCompany\",\r\n      //             },\r\n      //             manufacturerPartNumber: String(\r\n      //               row[\"Manufacturer Part Number\"]\r\n      //             ),\r\n      //             partSourceURL: row[\"Part Source URL\"],\r\n      //             partSource: row[\"Part Source\"],\r\n      //           },\r\n      //         ];\r\n      //         const extensionresponse = await callEnoviaWebService(\r\n      //           \"POST\",\r\n      //           `${ENOVIA_BASE_URL}/resources/v1/modeler/dssrc/dssrc:ManufacturerEquivalentItems`,\r\n      //           extensionBody,\r\n      //           newHeaders\r\n      //         );\r\n      //         console.log(\"Extension Item Response:\", extensionresponse);\r\n      //         if (\r\n      //           !(\r\n      //             extensionresponse.status &&\r\n      //             extensionresponse.output?.member?.length\r\n      //           )\r\n      //         ) {\r\n      //           createFailed = true;\r\n      //           console.error(\r\n      //             `Failed to create ManufacturerEquivalentItems for row ${i} with Title ${row?.Title}.`\r\n      //           );\r\n      //           showErrorToast(\r\n      //             extensionresponse?.message ||\r\n      //               \"Failed to create ManufacturerEquivalentItems.\"\r\n      //           );\r\n      //         }\r\n      //       }\r\n      //     } catch (error) {\r\n      //       createFailed = true;\r\n      //       console.error(\r\n      //         `Error creating item for row ${i} with Title ${row?.Title}:`,\r\n      //         error\r\n      //       );\r\n      //       showErrorToast(\r\n      //         `An error occurred while creating item for row ${i} with Title ${row?.Title}.`\r\n      //       );\r\n      //     }\r\n      //   }\r\n      // }\r\n  //     if (updateItems?.length > 0) {\r\n  //       for (let i = 0; i < updateItems.length; i++) {\r\n  //         const row = updateItems[i];\r\n  //         const uploadBody = {\r\n  //           partSource: row?.row[\"Part Source\"],\r\n  //           partSourceURL: row?.row[\"Part Source URL\"],\r\n  //           manufacturerPartNumber: String(\r\n  //             row?.row[\"Manufacturer Part Number\"]\r\n  //           ),\r\n  //           cestamp: row?.cestamp,\r\n  //         };\r\n  //         console.log(\"Upload Body:\", uploadBody);\r\n  // try {\r\n  //   const response = await callEnoviaWebService(\r\n  //     \"PATCH\",\r\n  //     `${ENOVIA_BASE_URL}/resources/v1/modeler/dssrc/dssrc:ManufacturerEquivalentItems/${row?.id}`,\r\n  //     uploadBody,\r\n  //     newHeaders\r\n  //   );\r\n  //   if (response.status) {\r\n  //     console.log(\"Update Item Response:\", response);\r\n  //   } else {\r\n  //     showErrorToast(response?.message || \"\");\r\n  //     updateFailed = true;\r\n  //   }\r\n\r\n  // } catch (error) {\r\n  //   updateFailed = true;\r\n  //   console.error(\r\n  //     `Error creating item for row ${i} with Title ${row?.row?.Title}:`,\r\n  //     error\r\n  //   );\r\n  //   showErrorToast(`Error creating item for row ${i} with Title ${row?.row?.Title}`);\r\n  // }\r\n  //       }\r\n  //     }\r\n  //     if (!createFailed && !updateFailed) {\r\n  //       showSuccessToast(\"MEP Mass Upload completed successfully.\");\r\n  //     }\r\n  //     // ============ For MEP Mass Upload Update =================\r\n  //   } catch (error) {\r\n  //     console.error(\"MEP MASS UPLOAD Error:\", error);\r\n  //     showErrorToast(\"An error occurred while fetching MEP Mass Upload data.\");\r\n  //   } finally {\r\n  //     setLoading(false);\r\n  //   }\r\n  // };\r\n\r\n  // return { handleMEPMassupload };\r\n  return {\r\n    // updateItems,\r\n    // createItems,\r\n    handleMEPMassupload,\r\n    loading,\r\n    // updateMassupload,\r\n  };\r\n};\r\n\r\nexport default useMEPMassUpload;\r\n\r\nasync function ValidateMep(ENOVIA_BASE_URL, searchStr, headers) {\r\n  // https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/search?$searchStr=SS_Rev02&$mask=dssrc:ManufacturerEquivalentItems.Basic\r\n  console.log(\"Validate Mep Function headers\", headers);\r\n  console.log(\"Validate Mep Function Search\",searchStr);\r\n  const response = await callEnoviaWebService(\r\n    \"GET\",\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?$searchStr=${searchStr}&$mask=dssrc:ManufacturerEquivalentItems.Basic`,\r\n    \"\",\r\n    headers\r\n  );\r\n  return response;\r\n}\r\n","import { useState } from \"react\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport useToast from \"../useToast\";\r\n\r\n// --------------------- Helper Functions -----------------------\r\n\r\n// const getAttachedDocumentIds = async (\r\n//   baseUrl,\r\n//   productId,\r\n//   headers,\r\n//   parentRelName,\r\n//   docName\r\n// ) => {\r\n//   try {\r\n//     const url = `${baseUrl}/resources/v1/modeler/documents/parentId/${productId}?parentRelName=${parentRelName}&tenant=OI000186152`;\r\n//     const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n//     if (response?.status && response?.output?.data?.length) {\r\n//       console.log(\"docName\", response?.output?.data)\r\n//       if(response?.output?.data?.length > 0 && docName) {\r\n//          response.output.data = response.output.data.filter((item) => {\r\n//           if(item?.dataelements?.name.toLowerCase().includes(docName.toLowerCase())){\r\n//             return item.id;\r\n//           } \r\n//         })\r\n//       }else{\r\n//         return response?.output?.data.map((item) => item.id);\r\n//       }\r\n//     }\r\n\r\n//     return [];\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching document IDs:\", error);\r\n//     return [];\r\n//   }\r\n// };\r\n// // Fetches document IDs based on product ID and document name\r\nconst getAttachedDocumentIds = async (\r\n  baseUrl,\r\n  productId,\r\n  headers,\r\n  parentRelName,\r\n  docName\r\n) => {\r\n  try {\r\n    const url = `${baseUrl}/resources/v1/modeler/documents/parentId/${productId}?parentRelName=${parentRelName}&tenant=OI000186152`;\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (response?.status && response?.output?.data?.length) {\r\n      console.log(\"docName\", docName);\r\n      console.log(\"docName\", response.output.data);\r\n      if (docName) {\r\n        const filteredData = response.output.data.filter(item =>\r\n          item?.dataelements?.name.toLowerCase().includes(docName.toLowerCase())\r\n        );\r\n        console.log(\"Filtered Data:\", filteredData);\r\n        return filteredData.map(item => item.id);\r\n      } else {\r\n        return response.output.data.map(item => item.id);\r\n      }\r\n    }\r\n\r\n    return [];\r\n  } catch (error) {\r\n    console.error(\"Error fetching document IDs:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Helper function to build disconnect payload\r\nconst buildDisconnectPayload = (docIds, parentId, docType) => {\r\n  const data = docIds.map((id) => ({\r\n    id,\r\n    updateAction: \"NONE\",\r\n    relateddata: {\r\n      parents: [{ id: parentId, updateAction: \"DISCONNECT\" }],\r\n    },\r\n  }));\r\n  return { data, documentType: docType };\r\n};\r\n\r\n// Helper function to disconnect documents API\r\nconst disconnectDocuments = async (docs, headers, baseUrl, showErrorToast) => {\r\n  console.log(\"Disconnecting documents:\", docs);\r\n  const results = [];\r\n  for (const item of docs) {\r\n    const url = `${baseUrl}/resources/v1/modeler/documents?parentRelName=${item.documentType}&parentDirection=from&tenant=OI000186152`;\r\n    try {\r\n      const res = await callEnoviaWebService(\"POST\", url, item, headers);\r\n      console.log(`Disconnected ${item.documentType}`, res);\r\n    } catch (err) {\r\n      console.error(\"Error disconnecting documents:\", err);\r\n      showErrorToast(\"Failed to disconnect documents for\");\r\n      results.push(item);\r\n    }\r\n    return results;\r\n  }\r\n};\r\n\r\n// --------------------- Custom Hook -----------------------\r\n\r\nconst useRemoveDocConnection = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const { showErrorToast, showSuccessToast, showWarningToast } = useToast();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  const handleDocDisconnectingMassupload = async (sheetData) => {\r\n    setLoading(true);\r\n    const specDocs = [];\r\n    const refDocs = [];\r\n    const nonExistingProducts = [];\r\n    const revisionNotMatch = [];\r\n    const notInWorkProducts = [];\r\n    const obsoleteProdcuts = [];\r\n    let disconnectPayload = [];\r\n\r\n    try {\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) return showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n\r\n      if (!sheetData?.length) {\r\n        showErrorToast(\"No data to upload. Please check your sheet.\");\r\n        return;\r\n      }\r\n      console.log(\"Sheet data\", sheetData);\r\n      // ================= sheetData Loop =================\r\n      for (const [index, row] of sheetData.entries()) {\r\n        try {\r\n          const searchStr = row[\"Item EIN\"];\r\n          const searchUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?$searchStr=%5Bds6wg%3AEnterpriseExtension.V_PartNumber%5D%3A%2A${searchStr}%2A`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            searchUrl,\r\n            \"\",\r\n            headers\r\n          );\r\n\r\n          const match = response?.output?.member?.find(\r\n            (item) => item?.revision === String(row[\"Item Revision\"])\r\n          );\r\n\r\n          if (!match) {\r\n            nonExistingProducts.push(row);\r\n            continue;\r\n          }\r\n\r\n          if (match.state !== \"IN_WORK\") {\r\n            notInWorkProducts.push({ ...match, row });\r\n            continue;\r\n          }\r\n\r\n          const docName = (row[\"Document Name\"] || \"\").trim();\r\n          let specIds = [];\r\n          let refIds = [];\r\n\r\n          if (match?.state === \"OBSOLETE\") {\r\n            // Push the match object into an array for obsolete matches\r\n            obsoleteProdcuts.push({ ...match, row });\r\n            continue;\r\n          } else {\r\n            specIds = await getAttachedDocumentIds(\r\n              ENOVIA_BASE_URL,\r\n              match?.id,\r\n              headers,\r\n              \"SpecificationDocument\",\r\n              docName\r\n            );\r\n            refIds = await getAttachedDocumentIds(\r\n              ENOVIA_BASE_URL,\r\n              match?.id,\r\n              headers,\r\n              \"Reference%20Document\",\r\n              docName\r\n            );\r\n          }\r\n\r\n          if (!specIds.length && !refIds.length) {\r\n            showWarningToast(\r\n              `No documents found for row ${index} with title ${row[\"Item EIN\"]}`\r\n            );\r\n            continue;\r\n          }\r\n\r\n          if (specIds.length) {\r\n            // If there are Specification documents, build the payload helper function\r\n            const payload = buildDisconnectPayload(\r\n              specIds,\r\n              match?.id,\r\n              \"SpecificationDocument\"\r\n            );\r\n            specDocs.push(payload);\r\n            // Call disconnectDocuments for SpecificationDocument API\r\n            const disconnectResults = await disconnectDocuments(\r\n              [payload],\r\n              headers,\r\n              ENOVIA_BASE_URL,\r\n              showErrorToast\r\n            );\r\n            disconnectPayload.push(...disconnectResults);\r\n          }\r\n\r\n          if (refIds.length) {\r\n            // If there are reference documents, build the payload helper function\r\n            const payload = buildDisconnectPayload(\r\n              refIds,\r\n              match?.id,\r\n              \"Reference%20Document\"\r\n            );\r\n            refDocs.push(payload);\r\n            // Call disconnectDocuments for reference documents API\r\n            const disconnectResults = await disconnectDocuments(\r\n              [payload],\r\n              headers,\r\n              ENOVIA_BASE_URL,\r\n              showErrorToast\r\n            );\r\n            disconnectPayload.push(...disconnectResults);\r\n          }\r\n        } catch (rowError) {\r\n          console.error(`Error processing row ${index}:`, rowError);\r\n        }\r\n      }\r\n\r\n      // ================= End of sheetData Loop =================\r\n      console.log(\"Specification Docs:\", specDocs);\r\n      console.log(\"Reference Docs:\", refDocs);\r\n      console.log(\"revisionNotMatch\", revisionNotMatch);\r\n      console.log(\"notInWorkProducts\", notInWorkProducts);\r\n      console.log(\"obsoleteProdcuts\", obsoleteProdcuts);\r\n      console.log(\"disconnectPayload \", disconnectPayload);\r\n      showSuccessToast(\"Disconnected Documents completed successfully.\");\r\n    } catch (mainError) {\r\n      console.error(\"Mass upload error:\", mainError);\r\n      showErrorToast(\"An error occurred while processing the mass upload.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  return {\r\n    handleDocDisconnectingMassupload,\r\n    loading,\r\n  };\r\n};\r\n\r\nexport default useRemoveDocConnection;\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport \"./massupload.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport {\r\n  globalCollabSpaceTitles,\r\n  globalCollabSpaceNames,\r\n} from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\nimport api from \"../../utils/api\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\nimport useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\nimport getUserDetails from \"../../utils/getUserDetails\";\r\n// import ReusableTable from \"../../components/Table/Table\";\r\nimport SuccessModal from \"../../components/Modals/SuccessModal\";\r\nimport {\r\n  MSG_TEMPLATE_OPERATION_MISMATCH,\r\n  MSG_NO_DATA_TO_SUBMIT,\r\n  MSG_INVALID_OPERATION_TYPE,\r\n  MSG_UPLOAD_FAILED_CONTACT_ADMIN,\r\n  MSG_NO_SHEET_DATA,\r\n  MSG_UPLOAD_FAILED,\r\n  MSG_FILE_VALIDATED_SUCCESS,\r\n  MSG_WIDGET_RESET_SUCCESS,\r\n  MSG_UPLOAD_SUCCESS,\r\n  MSG_OPERATION_CHNAGED,\r\n} from \"../../utils/toastMessages\";\r\nimport { use } from \"react\";\r\nimport useMEPMassUpload from \"../../hooks/Mass-Upload/useMEPMassupload\";\r\nimport useRemoveDocConnection from \"../../hooks/Mass-Upload/useRemoveDocConnection\";\r\n\r\nconst API_ENDPOINTS = {\r\n  1: \"/massUpload/uploadItems\",\r\n  2: \"/massUpload/uploadItemStructure\",\r\n  3: \"/massUpload/documents\",\r\n  4: \"/massUpload/connectItemDocuments\",\r\n};\r\n\r\nconst transformSheetDataWithMappings = (\r\n  sheetData,\r\n  columnMappings,\r\n  operationType,\r\n  mappedAttributesData,\r\n  collabMapping // Add this parameter\r\n) => {\r\n  const excludedColumns = [\"Physical Product/Raw Material\"];\r\n\r\n  if (sheetData.length > 0) {\r\n    console.log(\r\n      \"Actual column names in sheet data:\",\r\n      Object.keys(sheetData[0])\r\n    );\r\n    console.log(\"Sample row values:\", sheetData[0]);\r\n    console.log(\"Column mappings applied:\", columnMappings);\r\n  }\r\n\r\n  if (!sheetData || !columnMappings) {\r\n    console.error(\"Missing data or mappings for transformation\");\r\n    return null;\r\n  }\r\n\r\n  console.log(\"Transforming sheet data with mappings:\", columnMappings);\r\n  const mappedData = mappedAttributesData?.mappedData || [];\r\n\r\n  console.log(\"Mapped data in Massupload:\", mappedData);\r\n\r\n  // For Document operation type (3), use different processing logic\r\n  if (operationType === \"3\") {\r\n    console.log(\"Processing document data with operation type 3\");\r\n\r\n    // Transform each row into document format\r\n    // Transform each row into document format\r\n    const documentItems = sheetData.map((row) => {\r\n      // Create separate objects for root-level data and nested dataelements\r\n      const rootData = {};\r\n      const dataelements = {};\r\n      const apiAttributes = {}; // For storing API attributes\r\n\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (excludedColumns.includes(columnName)) {\r\n          // console.log(`Skipping excluded column \"${columnName}\" in payload`);\r\n          return;\r\n        }\r\n        if (\r\n          !columnMappings[columnName] ||\r\n          value === undefined ||\r\n          value === null\r\n        )\r\n          return;\r\n\r\n        const backendFieldName = columnMappings[columnName];\r\n\r\n        // Find attribute in mappedData to check if it's an API attribute\r\n        const attribute = mappedData.find(\r\n          (attr) =>\r\n            attr.uiLabel === backendFieldName ||\r\n            attr.backendName === backendFieldName\r\n        );\r\n\r\n        console.log(\r\n          `Processing column ${columnName} -> ${backendFieldName}`,\r\n          attribute\r\n        );\r\n\r\n        // Special case handling for known fields\r\n        if (backendFieldName === \"Document Type\") {\r\n          rootData[\"classificationType\"] = value;\r\n        } else if (backendFieldName === \"Collaborative Space\") {\r\n          const collabspaceTitle = value;\r\n          rootData[\"collabSpaceTitle\"] = collabspaceTitle;\r\n\r\n          // Use the mapping to get the corresponding name\r\n          if (collabMapping[collabspaceTitle]) {\r\n            rootData[\"collabSpace\"] = collabMapping[collabspaceTitle];\r\n            console.log(\r\n              `Mapped collabspace title \"${collabspaceTitle}\" to name \"${collabMapping[collabspaceTitle]}\"`\r\n            );\r\n          } else {\r\n            console.warn(\r\n              `No mapping found for collabspace title: ${collabspaceTitle}`\r\n            );\r\n          }\r\n        } else if (\r\n          backendFieldName.toLowerCase().includes(\"collaborative\") ||\r\n          backendFieldName.toLowerCase().includes(\"collab\")\r\n        ) {\r\n          // Try to catch variations of Collaborative Space\r\n          const collabspaceTitle = value;\r\n          rootData[\"collabSpaceTitle\"] = collabspaceTitle;\r\n\r\n          // Use the mapping to get the corresponding name\r\n          if (collabMapping[collabspaceTitle]) {\r\n            rootData[\"collabSpace\"] = collabMapping[collabspaceTitle];\r\n            console.log(\r\n              `Mapped collabspace title \"${collabspaceTitle}\" to name \"${collabMapping[collabspaceTitle]}\"`\r\n            );\r\n          } else {\r\n            console.warn(\r\n              `No mapping found for collabspace title: ${collabspaceTitle}`\r\n            );\r\n          }\r\n        } else if (backendFieldName === \"File\") {\r\n          // Place File at root level\r\n          rootData[\"File\"] = value;\r\n        } else if (backendFieldName === \"Document Name\") {\r\n          dataelements[\"name\"] = value;\r\n        }\r\n        // For API attributes with group \"API Attributes\", include them with their fullName\r\n        else if (\r\n          attribute &&\r\n          attribute.group === \"API Attributes\" &&\r\n          attribute.fullName\r\n        ) {\r\n          // Store API attributes using their full name\r\n          dataelements[attribute.backendName] = value;\r\n\r\n          // console.log(\r\n          //   `Added API attribute: ${attribute.backendName} = ${value}`\r\n          // );\r\n        }\r\n        // For regular mapped fields that aren't API attributes\r\n        else if (attribute || backendFieldName) {\r\n          // Only include mapped fields (either through attribute lookup or direct mapping)\r\n          dataelements[backendFieldName] = value;\r\n        }\r\n        // Fields without mappings or API attribute status are excluded\r\n      });\r\n\r\n      // Combine root data, dataelements, and API attributes\r\n      return {\r\n        ...rootData,\r\n        dataelements,\r\n        // ...apiAttributes, // Include API attributes at root level\r\n      };\r\n    });\r\n\r\n    // Log sample document for verification\r\n    if (documentItems.length > 0) {\r\n      console.log(\r\n        \"Sample document structure:\",\r\n        JSON.stringify(documentItems[0], null, 2)\r\n      );\r\n    }\r\n\r\n    // Create chunks for batched processing\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < documentItems.length; i += CHUNK_SIZE) {\r\n      chunks.push(documentItems.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: documentItems.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      // Special field to indicate this is document data\r\n      isDocumentPayload: true,\r\n      documents: documentItems,\r\n    };\r\n  }\r\n  // Add this as a new condition in transformSheetDataWithMappings after operation 3 but before the else branch\r\n  else if (operationType === \"4\") {\r\n    console.log(\"Processing Physical Product-Document data for operation 4\");\r\n\r\n    // Transform each row into the required format for connectItemDocuments\r\n    const connectItemDocuments = sheetData.map((row) => {\r\n      // Create base item structure\r\n      const item = {\r\n        PartType: \"\",\r\n        PartNumber: \"\",\r\n        PartRevision: \"\",\r\n        DocumentType: \"\",\r\n        DocumentName: \"\",\r\n        DocumentRevision: \"\",\r\n        RelationshipType: \"\",\r\n        BOSAttributes: {},\r\n      };\r\n      // Helper function to normalize field names for comparison\r\n      const normalizeFieldName = (name) => {\r\n        if (!name) return \"\";\r\n        return name.toLowerCase().replace(/\\s+/g, \"\");\r\n      };\r\n\r\n      // Root-level field mapping\r\n      const rootFieldMapping = {\r\n        parttype: \"PartType\",\r\n        part_type: \"PartType\",\r\n        einnumber: \"PartNumber\",\r\n        ein_number: \"PartNumber\",\r\n        partnumber: \"PartNumber\",\r\n        part_number: \"PartNumber\",\r\n        partrevision: \"PartRevision\",\r\n        part_revision: \"PartRevision\",\r\n        documenttype: \"DocumentType\",\r\n        document_type: \"DocumentType\",\r\n        documentname: \"DocumentName\",\r\n        document_name: \"DocumentName\",\r\n        documentrevision: \"DocumentRevision\",\r\n        document_revision: \"DocumentRevision\",\r\n        relationshiptype: \"RelationshipType\",\r\n        relationship_type: \"RelationshipType\",\r\n      };\r\n\r\n      // Map row data to item properties\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (excludedColumns.includes(columnName)) return;\r\n        if (!columnMappings[columnName]) return;\r\n        if (value === undefined || value === null || value === \"\") return;\r\n\r\n        const uiLabelBackendName = columnMappings[columnName];\r\n        const attribute = mappedData.find(\r\n          (attr) =>\r\n            attr.uiLabel === uiLabelBackendName ||\r\n            attr.backendName === uiLabelBackendName\r\n        );\r\n\r\n        const backendName = attribute?.backendName || uiLabelBackendName;\r\n        const group = attribute?.group;\r\n\r\n        console.log(\r\n          `Processing column ${columnName} -> ${backendName} (${group})`\r\n        );\r\n\r\n        // First check if it maps to a root-level field\r\n        const normalizedName = normalizeFieldName(backendName);\r\n        if (rootFieldMapping[normalizedName]) {\r\n          const fieldName = rootFieldMapping[normalizedName];\r\n          item[fieldName] = value;\r\n          console.log(`Mapped to root field: ${fieldName} = \"${value}\"`);\r\n          return;\r\n        }\r\n\r\n        // Handle BOS attributes\r\n        const bosSpecialAttrs = [\r\n          \"Print On Purchase Order Required\",\r\n          \"Print On Work Order Required\",\r\n          \"Work Order Document Required\",\r\n          \"Print On report Order Required\",\r\n        ];\r\n\r\n        // Check if it's a BOS attribute by name\r\n        if (\r\n          bosSpecialAttrs.some(\r\n            (attr) => normalizeFieldName(attr) === normalizedName\r\n          )\r\n        ) {\r\n          // Find the original name format\r\n          const originalAttr =\r\n            bosSpecialAttrs.find(\r\n              (attr) => normalizeFieldName(attr) === normalizedName\r\n            ) || backendName;\r\n\r\n          item.BOSAttributes[originalAttr] = value;\r\n          console.log(`Added BOS attribute: ${originalAttr} = \"${value}\"`);\r\n          return;\r\n        }\r\n\r\n        // If it has BOS Attributes group, add it to BOSAttributes\r\n        if (group === \"BOS Attributes\") {\r\n          item.BOSAttributes[backendName] = value;\r\n          console.log(\r\n            `Added group-based BOS attribute: ${backendName} = \"${value}\"`\r\n          );\r\n          return;\r\n        }\r\n\r\n        // For anything else, try to find a match in root fields\r\n        for (const [rootKey, fieldName] of Object.entries(rootFieldMapping)) {\r\n          if (normalizedName.includes(rootKey.toLowerCase())) {\r\n            item[fieldName] = value;\r\n            console.log(\r\n              `Partial match to root field: ${fieldName} = \"${value}\"`\r\n            );\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Last resort - add to root level\r\n        console.log(\r\n          `Unmatched field added at root level: ${backendName} = \"${value}\"`\r\n        );\r\n        item[backendName] = value;\r\n      });\r\n\r\n      // Log the final item for debugging\r\n      console.log(\"Final processed item:\", JSON.stringify(item, null, 2));\r\n      return item;\r\n    });\r\n\r\n    // Create chunks for batched processing\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < connectItemDocuments.length; i += CHUNK_SIZE) {\r\n      chunks.push(connectItemDocuments.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    // Log a sample item for verification\r\n    if (connectItemDocuments.length > 0) {\r\n      console.log(\r\n        \"Sample connectItemDocument structure:\",\r\n        JSON.stringify(connectItemDocuments[0], null, 2)\r\n      );\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: connectItemDocuments.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      isConnectItemDocumentsPayload: true,\r\n      connectItemDocuments: connectItemDocuments,\r\n    };\r\n  } else {\r\n    // KEEP EXISTING CODE FOR PHYSICAL PRODUCTS (operations 1, 2, 4)\r\n    console.log(\r\n      \"Processing physical product data with operation type:\",\r\n      operationType\r\n    );\r\n\r\n    const attributeGroupMap = {};\r\n    if (Array.isArray(mappedData)) {\r\n      mappedData.forEach((option) => {\r\n        attributeGroupMap[option.backendName] = option.group || \"System\";\r\n        if (option.fullName) {\r\n          attributeGroupMap[`fullName:${option.backendName}`] = option.fullName;\r\n        }\r\n        console.log(\r\n          `Mapping ${option.backendName} to group ${option.group || \"System\"}`\r\n        );\r\n      });\r\n    }\r\n\r\n    // Modify getPathForAttribute to handle EBOM Attributes for operation type 2\r\n    const getPathForAttribute = (backendName, columnName) => {\r\n      // Special handling for collabSpace in operation 2 - ADD THIS FIRST\r\n      if (operationType === \"2\" && backendName === \"collabSpace\") {\r\n        console.log(\"Operation 2: collabSpace explicitly placed at root level\");\r\n        return \"collabSpace\"; // Keep at root level\r\n      }\r\n\r\n      // Special case for level - always place at root level for operation type 2\r\n      if (operationType === \"2\" && backendName === \"Level\") {\r\n        console.log(\r\n          \"'Level' identified as EBOM Attribute but placing at root level\"\r\n        );\r\n        return \"Level\";\r\n      }\r\n\r\n      // Check for other EBOM Attributes for operation type 2\r\n      if (\r\n        operationType === \"2\" &&\r\n        attributeGroupMap[backendName] === \"EBOM Attributes\" &&\r\n        backendName !== \"Level\" // Make sure level doesn't go into instanceAttributes\r\n      ) {\r\n        console.log(\r\n          `${backendName} identified as EBOM Attribute, placing in instanceAttributes`\r\n        );\r\n        return `instanceAttributes.${backendName}`;\r\n      }\r\n\r\n      // Rest of existing code remains the same...\r\n      if (operationType === \"1\" && backendName === \"title\") {\r\n        console.log(\"Operation type 1: title placed inside attributes\");\r\n        return \"attributes.title\";\r\n      }\r\n      // Add this special case for dimensionType\r\n      if (\r\n        operationType === \"1\" &&\r\n        (backendName === \"dimensionType\" || backendName === \"Dimension\")\r\n      ) {\r\n        console.log(\"Operation type 1: dimensionType placed inside attributes\");\r\n        return \"attributes.dimensionType\";\r\n      }\r\n\r\n      if (\r\n        backendName === \"type\" ||\r\n        backendName === \"classificationType\" ||\r\n        backendName === \"collabSpaceTitle\"\r\n      ) {\r\n        if (backendName === \"collabSpaceTitle\") {\r\n          console.log(\"collabSpaceTitle mapped to root collabspace\");\r\n          return \"collabSpaceTitle\";\r\n        }\r\n\r\n        console.log(`${backendName} placed at root level`);\r\n        return backendName;\r\n      }\r\n\r\n      // For the physical product operation (in getPathForAttribute)\r\n      if (backendName === \"collabSpaceTitle\") {\r\n        console.log(\"collabSpaceTitle mapped to root collabspace\");\r\n        return \"collabSpaceTitle\";\r\n      }\r\n\r\n      // Add a special case for collabspaceName if we need it in the payload\r\n      if (backendName === \"collabspaceName\") {\r\n        console.log(\"collabspaceName mapped to root\");\r\n        return \"collabSpace\";\r\n      }\r\n\r\n      if (\r\n        columnName === \"EIN Number\" ||\r\n        backendName === \"PartNumber\" ||\r\n        backendName === \"Part Number\"\r\n      ) {\r\n        console.log(\r\n          \"EIN Number mapped to attributes.dseng:EnterpriseReference.partNumber\"\r\n        );\r\n        return \"attributes.dseng:EnterpriseReference.partNumber\";\r\n      }\r\n\r\n      if (backendName === \"description\") {\r\n        console.log(\"Description mapped to attributes.description\");\r\n        return \"attributes.description\";\r\n      }\r\n\r\n      const group = attributeGroupMap[backendName];\r\n      console.log(`Attribute: ${backendName}, Group: ${group || \"unknown\"}`);\r\n\r\n      if (!group) {\r\n        console.log(`Skipping attribute with unknown group: ${backendName}`);\r\n        return null;\r\n      }\r\n\r\n      if (group === \"System Attributes\") {\r\n        return `attributes.${backendName}`;\r\n      } else {\r\n        return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n      }\r\n    };\r\n\r\n    // Define the constant for MBOM attributes group key\r\n    const MBOM_GROUP_KEY = \"MBOMAttributes__b0e36f7ffa8f4e42b8be46904dad3047\";\r\n\r\n    // Modify the existing transformation logic for operation type 2\r\n    if (operationType === \"2\") {\r\n      const transformedItems = sheetData.map((row) => {\r\n        const transformedRow = {\r\n          instanceAttributes: {\r\n            customerAttributes: {\r\n              [MBOM_GROUP_KEY]: {},\r\n            },\r\n          },\r\n        };\r\n\r\n        // Handle type first based on Physical Product/Raw Material column\r\n        const productTypeColumn = Object.keys(row).find(\r\n          (key) =>\r\n            key.toLowerCase().includes(\"physical product\") ||\r\n            key.toLowerCase().includes(\"raw material\")\r\n        );\r\n\r\n        if (productTypeColumn && row[productTypeColumn]) {\r\n          const productType = row[productTypeColumn].toLowerCase().trim();\r\n          transformedRow.type = productType.includes(\"physical product\")\r\n            ? \"VPMReference\"\r\n            : productType.includes(\"raw material\")\r\n            ? \"Raw_Material\"\r\n            : \"VPMReference\"; // Default to VPMReference\r\n        }\r\n\r\n        Object.entries(row).forEach(([columnName, value]) => {\r\n          if (excludedColumns.includes(columnName)) return;\r\n          if (!columnMappings[columnName]) return;\r\n\r\n          const uiLabelBackendName = columnMappings[columnName];\r\n          const attribute = mappedData.find(\r\n            (attr) =>\r\n              attr.uiLabel === uiLabelBackendName ||\r\n              attr.backendName === uiLabelBackendName\r\n          );\r\n          const backendName = attribute?.backendName || uiLabelBackendName;\r\n          const group = attribute?.group;\r\n\r\n          // Handle different types of attributes\r\n          if (backendName === \"Level\") {\r\n            // Level goes to root\r\n            transformedRow[\"level\"] = value;\r\n          } else if (backendName === \"collabSpaceTitle\") {\r\n            // Handle collabspace mapping\r\n            transformedRow[\"collabSpaceTitle\"] = value;\r\n            if (collabMapping && collabMapping[value]) {\r\n              transformedRow[\"collabSpace\"] = collabMapping[value];\r\n            }\r\n          } else if (backendName === \"classificationType\") {\r\n            transformedRow[\"classificationType\"] = value;\r\n          } else if (group === \"EBOM Attributes\") {\r\n            // Special handling for EBOM attributes\r\n            if (backendName === \"name\" || backendName === \"quantity\") {\r\n              // These go directly in instanceAttributes\r\n              transformedRow.instanceAttributes[backendName] = value;\r\n            } else {\r\n              // Other EBOM attributes go into the customerAttributes.MBOMAttributes group\r\n              transformedRow.instanceAttributes.customerAttributes[\r\n                MBOM_GROUP_KEY\r\n              ][backendName] = value;\r\n            }\r\n          } else if (backendName === \"title\" || backendName === \"description\") {\r\n            // Initialize attributes object if not exists\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            transformedRow.attributes[backendName] = value;\r\n          }\r\n\r\n          // Add this new condition for dimensionType\r\n          else if (\r\n            backendName === \"dimensionType\" ||\r\n            backendName === \"Dimension\"\r\n          ) {\r\n            // Initialize attributes object if not exists\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            transformedRow.attributes[\"dimensionType\"] = value;\r\n            console.log(\r\n              `Placed dimensionType directly in attributes: ${value}`\r\n            );\r\n          } else if (\r\n            columnName === \"EIN Number\" ||\r\n            backendName === \"Part Number\"\r\n          ) {\r\n            // Handle EIN Number/Part Number\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            if (!transformedRow.attributes[\"dseng:EnterpriseReference\"]) {\r\n              transformedRow.attributes[\"dseng:EnterpriseReference\"] = {};\r\n            }\r\n            transformedRow.attributes[\"dseng:EnterpriseReference\"].partNumber =\r\n              value;\r\n          } else {\r\n            // Handle other enterprise attributes\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            if (!transformedRow.attributes[\"dseno:EnterpriseAttributes\"]) {\r\n              transformedRow.attributes[\"dseno:EnterpriseAttributes\"] = {};\r\n            }\r\n            transformedRow.attributes[\"dseno:EnterpriseAttributes\"][\r\n              backendName\r\n            ] = value;\r\n          }\r\n        });\r\n\r\n        return transformedRow;\r\n      });\r\n\r\n      // Rest of your existing chunking logic...\r\n      if (transformedItems.length > 0) {\r\n        console.log(\r\n          \"Sample transformed item structure:\",\r\n          JSON.stringify(transformedItems[0], null, 2)\r\n        );\r\n      }\r\n\r\n      const CHUNK_SIZE = 1000;\r\n      const chunks = [];\r\n\r\n      for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n        chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n      }\r\n\r\n      return {\r\n        chunks,\r\n        totalChunks: chunks.length,\r\n        totalItems: transformedItems.length,\r\n        originalData: sheetData,\r\n        mappings: columnMappings,\r\n        isDocumentPayload: false,\r\n      };\r\n    } else {\r\n      const transformedItems = sheetData.map((row) => {\r\n        const transformedRow = {};\r\n\r\n        // Add instanceAttributes object for operation 2\r\n        if (operationType === \"2\") {\r\n          transformedRow.instanceAttributes = {};\r\n        }\r\n\r\n        // The rest of your existing transformation code...\r\n        Object.entries(row).forEach(([columnName, value]) => {\r\n          if (excludedColumns.includes(columnName)) {\r\n            // console.log(`Skipping excluded column \"${columnName}\" in payload`);\r\n            return;\r\n          }\r\n          if (!columnMappings[columnName]) return;\r\n\r\n          const uiLabelBackendName = columnMappings[columnName];\r\n\r\n          const systemAttributeMappings = {\r\n            Title: \"title\",\r\n            Description: \"description\",\r\n            \"Collaborative Space\": \"collabSpaceTitle\",\r\n            \"Collab Space\": \"collabSpaceTitle\",\r\n            Type: \"type\",\r\n          };\r\n\r\n          const backendName =\r\n            systemAttributeMappings[uiLabelBackendName] ||\r\n            mappedData.find((attr) => attr.uiLabel === uiLabelBackendName)\r\n              ?.backendName ||\r\n            uiLabelBackendName;\r\n\r\n          // **MOVE THIS CODE BLOCK UP HERE**\r\n          // Handle collabspace title and name mapping immediately\r\n          if (\r\n            (operationType === \"1\" || operationType === \"2\") &&\r\n            backendName === \"collabSpaceTitle\"\r\n          ) {\r\n            // Set the title as usual\r\n            transformedRow[\"collabSpaceTitle\"] = value;\r\n\r\n            // Also set the collabspace name using the mapping\r\n            if (collabMapping && collabMapping[value]) {\r\n              transformedRow[\"collabSpace\"] = collabMapping[value];\r\n              console.log(\r\n                `Mapped collabspace title \"${value}\" to name \"${collabMapping[value]}\"`\r\n              );\r\n            } else {\r\n              console.warn(`No mapping found for collabspace title: ${value}`);\r\n            }\r\n            // Continue to the next attribute\r\n            return;\r\n          }\r\n\r\n          const path = getPathForAttribute(backendName, columnName);\r\n\r\n          if (\r\n            backendName === \"title\" ||\r\n            backendName === \"description\" ||\r\n            backendName.toLowerCase() === \"collabspace\"\r\n          ) {\r\n            console.log(`Placing ${backendName} at path: ${path}`);\r\n          }\r\n\r\n          if (!path) return;\r\n\r\n          const pathParts = path.split(\".\");\r\n          let current = transformedRow;\r\n\r\n          for (let i = 0; i < pathParts.length - 1; i++) {\r\n            const part = pathParts[i];\r\n            if (!current[part]) {\r\n              current[part] = {};\r\n            }\r\n            current = current[part];\r\n          }\r\n\r\n          current[pathParts[pathParts.length - 1]] = value;\r\n\r\n          // Special handling for collabspace in operation 2\r\n        });\r\n\r\n        if (operationType === \"1\") {\r\n          const productTypeColumn = Object.keys(row).find(\r\n            (key) =>\r\n              key.toLowerCase().includes(\"physical product\") ||\r\n              key.toLowerCase().includes(\"raw material\")\r\n          );\r\n\r\n          if (productTypeColumn && row[productTypeColumn]) {\r\n            const productType = row[productTypeColumn].toLowerCase().trim();\r\n            transformedRow[\"type\"] = productType.includes(\"physical product\")\r\n              ? \"VPMReference\"\r\n              : productType.includes(\"raw material\")\r\n              ? \"Raw_Material\"\r\n              : \"\";\r\n\r\n            console.log(\r\n              `Product type determined: ${transformedRow[\"type\"]} from value: ${row[productTypeColumn]}`\r\n            );\r\n          }\r\n        }\r\n\r\n        // Special handling for operation 2 default values\r\n        if (operationType === \"2\") {\r\n          // Set default type for Product Structure if not specified\r\n          const productTypeColumn = Object.keys(row).find(\r\n            (key) =>\r\n              key.toLowerCase().includes(\"physical product\") ||\r\n              key.toLowerCase().includes(\"raw material\")\r\n          );\r\n\r\n          if (productTypeColumn && row[productTypeColumn]) {\r\n            const productType = row[productTypeColumn].toLowerCase().trim();\r\n            transformedRow[\"type\"] = productType.includes(\"physical product\")\r\n              ? \"VPMReference\"\r\n              : productType.includes(\"raw material\")\r\n              ? \"Raw_Material\"\r\n              : \"\";\r\n\r\n            console.log(\r\n              `Product type determined: ${transformedRow[\"type\"]} from value: ${row[productTypeColumn]}`\r\n            );\r\n          }\r\n\r\n          // Make sure instanceAttributes exists even if no EBOM attributes were found\r\n          if (!transformedRow.instanceAttributes) {\r\n            transformedRow.instanceAttributes = {};\r\n          }\r\n        }\r\n\r\n        return transformedRow;\r\n      });\r\n\r\n      if (transformedItems.length > 0) {\r\n        console.log(\r\n          \"Sample transformed item structure:\",\r\n          JSON.stringify(transformedItems[0], null, 2)\r\n        );\r\n      }\r\n\r\n      const CHUNK_SIZE = 1000;\r\n      const chunks = [];\r\n\r\n      for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n        chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n      }\r\n\r\n      return {\r\n        chunks,\r\n        totalChunks: chunks.length,\r\n        totalItems: transformedItems.length,\r\n        originalData: sheetData,\r\n        mappings: columnMappings,\r\n        isDocumentPayload: false,\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nconst generateColumnMappings = (\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  mappedAttributes\r\n) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n  const completeMappings = {};\r\n  const simplifiedMappings = {};\r\n\r\n  const excludedColumns = [\"Physical Product/Raw Material\"];\r\n\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) return false;\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    return allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n  };\r\n\r\n  const systemAttributeMappings = {\r\n    Title: \"title\",\r\n    Description: \"description\",\r\n    \"Collaborative Space\": \"collabSpaceTitle\",\r\n    \"Collab Space\": \"collabSpaceTitle\",\r\n    Type: \"classificationType\",\r\n    \"EIN Number\": \"Part Number\",\r\n  };\r\n\r\n  const getBackendNameForHeader = (header) => {\r\n    if (systemAttributeMappings[header]) {\r\n      return systemAttributeMappings[header];\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n\r\n    const systemAttrKey = Object.keys(systemAttributeMappings).find(\r\n      (key) => key.toLowerCase() === normalizedHeader\r\n    );\r\n\r\n    if (systemAttrKey) {\r\n      return systemAttributeMappings[systemAttrKey];\r\n    }\r\n\r\n    const matchingOption = dropdownOptions.find(\r\n      (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    return matchingOption ? matchingOption.backendName : header;\r\n  };\r\n\r\n  const specialMappings = {\r\n    \"EIN Number\": \"PartNumber\",\r\n  };\r\n\r\n  columnHeaders.forEach((columnName) => {\r\n    // Skip excluded columns\r\n    if (excludedColumns.includes(columnName)) {\r\n      console.log(`Column \"${columnName}\" is excluded from mapping`);\r\n      return;\r\n    }\r\n    const hasNLS = hasMatchingNLS(columnName);\r\n    const isSpecialColumn = specialMappings[columnName];\r\n    const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n    if (isSpecialColumn) {\r\n      const mappedAttribute = specialMappings[columnName];\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory || false,\r\n        autoMapped: true,\r\n        isSpecial: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    } else if (hasNLS || isMandatory) {\r\n      const mappedAttribute = getBackendNameForHeader(columnName);\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory,\r\n        autoMapped: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n  });\r\n\r\n  return {\r\n    completeMappings,\r\n    simplifiedMappings,\r\n    totalColumns: Object.keys(completeMappings).length,\r\n  };\r\n};\r\n\r\n// Add this function near the top of your file, outside the MassUpload component\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false);\r\n  const { showErrorToast, showSuccessToast, showInfoToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef();\r\n  const [formattedData, setFormattedData] = useState(null);\r\n  const [userDetails, setUserDetails] = useState(null);\r\n  const [securityContext, setSecurityContext] = useState(null); // New state for security context\r\n  const [collabNames, setCollabNames] = useState([]); // Add new state for names\r\n  const [collabMapping, setCollabMapping] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [apiResponse, setApiResponse] = useState(null);\r\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\r\n\r\n  const {\r\n    mappedAttributes: productMappedAttributes,\r\n    refreshMapping: refreshProductMapping,\r\n  } = useMassUpload();\r\n  const {\r\n    mappedAttributes: documentMappedAttributes,\r\n    refreshMapping: refreshDocumentMapping,\r\n  } = useFetchDocumentData(operationChoice);\r\n\r\n  const getActiveData = () => {\r\n    console.log(\"Getting active data for operation:\", operationChoice);\r\n\r\n    switch (operationChoice) {\r\n      case \"1\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"2\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"3\":\r\n        return {\r\n          mappedAttributes: documentMappedAttributes,\r\n          refreshMapping: refreshDocumentMapping,\r\n        };\r\n      case \"4\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      default:\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n    }\r\n  };\r\n\r\n  const { mappedAttributes, refreshMapping } = getActiveData();\r\n\r\n  console.log(\"Active operation:\", operationChoice);\r\n  console.log(\"Active mappedAttributes:\", mappedAttributes);\r\n\r\n  const handleRefreshForCurrentOperation = async (operation) => {\r\n    try {\r\n      console.log(\"Refreshing data for operation:\", operation);\r\n      const { refreshMapping } = getActiveData();\r\n      await refreshMapping(operation);\r\n    } catch (error) {\r\n      console.error(\"Error refreshing data:\", error);\r\n    }\r\n  };\r\n\r\n  // const handleOperationChange = (value) => {\r\n  //   console.log(\"Operation selected:\", value);\r\n  //   setOperationChoice(value);\r\n  //   handleRefreshForCurrentOperation(value);\r\n  // };\r\n\r\n  const handleOperationChange = (value) => {\r\n    console.log(\"Operation selected:\", value);\r\n\r\n    // If we already had a previous operation selected and files uploaded\r\n    if (operationChoice && formattedData) {\r\n      console.log(\"Operation changed - resetting uploaded file\");\r\n\r\n      // Reset file-related states\r\n      setErrors([]);\r\n      setColumnHeaders([]);\r\n      setMandatoryAttributes([]);\r\n      setFormattedData(null);\r\n\r\n      // Clear the file uploader\r\n      if (fileUploaderRef.current) {\r\n        fileUploaderRef.current.handleClearFiles(true); // Pass true to skip success toast\r\n      }\r\n\r\n      // Optional: Show toast informing the user\r\n      showInfoToast(MSG_OPERATION_CHNAGED);\r\n    }\r\n\r\n    // Update operation choice and refresh mapping\r\n    setOperationChoice(value);\r\n    handleRefreshForCurrentOperation(value);\r\n  };\r\n\r\n  // Update the existing useEffect to handle collabspace names\r\n\r\n  // Update the existing useEffect to create the title-to-name mapping\r\n  useEffect(() => {\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceNames:\",\r\n      globalCollabSpaceNames\r\n    );\r\n\r\n    // Set titles and names arrays\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n\r\n    if (Array.isArray(globalCollabSpaceNames)) {\r\n      setCollabNames([...globalCollabSpaceNames]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx]  globalCollabSpaceNames is not an array!\",\r\n        globalCollabSpaceNames\r\n      );\r\n    }\r\n\r\n    console.log(\r\n      \"globalCollabSpaceTitles in UseEffect Block\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    console.log(\r\n      \"globalCollabSpaceNames in UseEffect Block.\",\r\n      globalCollabSpaceNames\r\n    );\r\n    console.log(\"collabmapping in UseEffect Block\", collabMapping);\r\n\r\n    // Create a mapping object from titles to names\r\n    if (\r\n      Array.isArray(globalCollabSpaceTitles) &&\r\n      Array.isArray(globalCollabSpaceNames)\r\n    ) {\r\n      const mapping = {};\r\n\r\n      console.log(\r\n        \"globalCollabSpaceTitles in UseEffect Block\",\r\n        globalCollabSpaceTitles\r\n      );\r\n      console.log(\r\n        \"globalCollabSpaceNames in UseEffect Block.\",\r\n        globalCollabSpaceNames\r\n      );\r\n      console.log(\"collabmapping in UseEffect Block\", collabMapping);\r\n\r\n      for (let i = 0; i < globalCollabSpaceTitles.length; i++) {\r\n        mapping[globalCollabSpaceTitles[i]] = globalCollabSpaceNames[i];\r\n      }\r\n\r\n      setCollabMapping(mapping);\r\n      console.log(\r\n        \"[MassUpload.jsx] Collabspace title-to-name mapping:\",\r\n        mapping\r\n      );\r\n    }\r\n\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceNames:\", collabNames);\r\n  }, []);\r\n\r\n  // Add this after the existing console.log\r\n  // console.log(\"getUserDetails function\", getUserDetails);\r\n\r\n  // Add this code to actually call the function and show its response\r\n  useEffect(() => {\r\n    async function fetchUserDetails() {\r\n      try {\r\n        console.log(\"Calling getUserDetails...\");\r\n        const userData = await getUserDetails();\r\n        console.log(\" User Details Response:\", userData);\r\n        // Add this line to store the user data\r\n        setUserDetails(userData);\r\n      } catch (error) {\r\n        console.error(\"Error fetching user details:\", error);\r\n      }\r\n    }\r\n\r\n    fetchUserDetails();\r\n  }, []);\r\n  // console.log(\"widget window\", window.widget);\r\n  // Add an effect to get and set the security context\r\n  useEffect(() => {\r\n    try {\r\n      // Get security context from widget\r\n      if (window.widget && typeof window.widget.getValue === \"function\") {\r\n        const securityContextValue = window.widget.getValue(\"Credentials\");\r\n        console.log(\"Security Context:\", securityContextValue);\r\n        setSecurityContext(securityContextValue);\r\n      } else {\r\n        console.warn(\"window.widget or getValue function not available\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error getting security context:\", error);\r\n    }\r\n  }, []);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n      console.log(\"Selected Operation:\", operationChoice);\r\n      console.log(\"File:\", files[0].name);\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n        sheetData = [],\r\n      } = validationResult;\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      if (sheetData.length > 0) {\r\n        console.log(\"Sheet Data \", sheetData);\r\n        setFormattedData({ originalData: sheetData });\r\n        if (operationChoice !== \"5\" && operationChoice !== \"6\") {\r\n          await handleRefreshForCurrentOperation(operationChoice);\r\n          setTimeout(async () => {\r\n            console.log(\r\n              \"Applying automatic column mapping with:\",\r\n              mappedAttributes\r\n            );\r\n            console.log(\"operationChoice in  :\", operationChoice);\r\n            if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n              const { simplifiedMappings } = generateColumnMappings(\r\n                headers,\r\n                mandatoryAttributes,\r\n                mappedAttributes\r\n              );\r\n\r\n              console.log(\"Auto-generated mappings:\", simplifiedMappings);\r\n\r\n              if (Object.keys(simplifiedMappings).length > 0) {\r\n                const transformedData = transformSheetDataWithMappings(\r\n                  sheetData,\r\n                  simplifiedMappings,\r\n                  operationChoice,\r\n                  mappedAttributes,\r\n                  collabMapping // Add this parameter\r\n                );\r\n\r\n                setFormattedData(transformedData);\r\n                showSuccessToast(\r\n                  `Data automatically mapped with ${\r\n                    Object.keys(simplifiedMappings).length\r\n                  } columns`\r\n                );\r\n              }\r\n            }\r\n          }, 500);\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(MSG_FILE_VALIDATED_SUCCESS);\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(MSG_TEMPLATE_OPERATION_MISMATCH);\r\n        handleReset(true);\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n    setFormattedData(null);\r\n\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n    }\r\n  };\r\n\r\n  // ================ disconnecting Docs from Physical prodcut\r\n  const { handleDocDisconnectingMassupload, loading: isDisconnectUploading } =\r\n    useRemoveDocConnection();\r\n  // ================ disconnecting Docs from Physical prodcut\r\n  // =============== MEP MAss Upload Related ===============\r\n  console.log(\"Formateed Dtaa\", formattedData);\r\n  const { handleMEPMassupload, loading: isUploading } = useMEPMassUpload();\r\n  const handleClick = useCallback(() => {\r\n    if (operationChoice === \"5\") {\r\n      console.log(\"formattedData\", formattedData);\r\n      if (formattedData) handleMEPMassupload(formattedData?.originalData);\r\n    } else if (operationChoice === \"6\") {\r\n      if (formattedData)\r\n        handleDocDisconnectingMassupload(formattedData?.originalData);\r\n      // handleDocumentsDisconnect(specificationDocument,referenceDocument)\r\n    } else {\r\n      setModalShow(true);\r\n    }\r\n  }, [\r\n    operationChoice,\r\n    // createItems,\r\n    // updateItems,\r\n    // updateMassupload,\r\n    handleReset,\r\n  ]);\r\n  // =============== MEP MAss Upload Related ===============\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(true);\r\n  };\r\n\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled =\r\n    columnHeaders.length === 0 || errors.length > 0;\r\n\r\n  const handleConfirmSubmit = async () => {\r\n    try {\r\n      // Close the confirmation modal immediately\r\n      setModalShow(false);\r\n      setIsSubmitting(true);\r\n\r\n      if (!formattedData) {\r\n        showErrorToast(MSG_NO_DATA_TO_SUBMIT);\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const endpoint = API_ENDPOINTS[operationChoice];\r\n      if (!endpoint) {\r\n        showErrorToast(MSG_INVALID_OPERATION_TYPE);\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const { chunks, totalChunks, isDocumentPayload, documents } =\r\n        formattedData;\r\n      let successCount = 0;\r\n      let failureCount = 0;\r\n      let allResponses = [];\r\n      let hasErrors = false;\r\n\r\n      // For document payload (operation 3)\r\n      if (operationChoice === \"3\" && isDocumentPayload) {\r\n        try {\r\n          // Create document-specific chunks if needed\r\n          const docChunks = [];\r\n          for (let i = 0; i < documents.length; i += 1000) {\r\n            docChunks.push(documents.slice(i, i + 1000));\r\n          }\r\n\r\n          console.log(`Processing ${docChunks.length} document chunks`);\r\n\r\n          // Add user info if available (similar to other operations)\r\n          const userInfo = {\r\n            ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n            ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n            ...(securityContext ? { securityContext: securityContext } : {}),\r\n          };\r\n\r\n          for (let i = 0; i < docChunks.length; i++) {\r\n            console.log(\r\n              `Sending document chunk ${i + 1} of ${docChunks.length}`\r\n            );\r\n\r\n            const response = await api.post(endpoint, {\r\n              ...userInfo,\r\n              documents: docChunks[i],\r\n            });\r\n\r\n            console.log(`Document chunk ${i + 1} response:`, response);\r\n\r\n            if (response.data) {\r\n              if (response.data.success === true) {\r\n                successCount++;\r\n                if (Array.isArray(response.data.responses)) {\r\n                  allResponses = [...allResponses, ...response.data.responses];\r\n                }\r\n              } else {\r\n                hasErrors = true;\r\n                failureCount++;\r\n                console.error(\r\n                  `Document API returned success: false`,\r\n                  response.data\r\n                );\r\n              }\r\n            }\r\n\r\n            if (i % 5 === 0 || i === docChunks.length - 1) {\r\n              showSuccessToast(\r\n                `Processed ${i + 1} of ${docChunks.length} document chunks...`\r\n              );\r\n            }\r\n          }\r\n        } catch (error) {\r\n          hasErrors = true;\r\n          failureCount++;\r\n          console.error(\"Document upload failed:\", error);\r\n        }\r\n      } else {\r\n        // For operations 1, 2, and 4\r\n        // Create appropriate user info object based on operation type\r\n        const userInfo = {\r\n          // Include user information for operations 1 and 2\r\n          ...([\"1\", \"2\"].includes(operationChoice) && userDetails?.email\r\n            ? { email: userDetails.email }\r\n            : {}),\r\n          ...([\"1\", \"2\"].includes(operationChoice) && userDetails?.login\r\n            ? { userId: userDetails.login }\r\n            : {}),\r\n          ...([\"1\", \"2\"].includes(operationChoice) && securityContext\r\n            ? { securityContext: securityContext }\r\n            : {}),\r\n          // Add emailNotification flag only for operation 1\r\n          ...([\"1\", \"2\"].includes(operationChoice)\r\n            ? { emailNotification: false }\r\n            : {}),\r\n        };\r\n\r\n        // Check if this is a connectItemDocuments payload (operation 4)\r\n        const { isConnectItemDocumentsPayload, connectItemDocuments } =\r\n          formattedData;\r\n\r\n        if (operationChoice === \"4\" && isConnectItemDocumentsPayload) {\r\n          // User info for operation 4\r\n          const userInfo = {\r\n            ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n            ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n            ...(securityContext ? { securityContext: securityContext } : {}),\r\n          };\r\n\r\n          for (let i = 0; i < chunks.length; i++) {\r\n            try {\r\n              const chunk = chunks[i];\r\n\r\n              // Use connectItemDocuments as the key for the API payload\r\n              const response = await api.post(endpoint, {\r\n                ...userInfo,\r\n                connectItemDocuments: chunk,\r\n              });\r\n\r\n              console.log(`Chunk ${i + 1} response for operation 4:`, response);\r\n\r\n              // Process response data (same as other operations)\r\n              if (response.data) {\r\n                if (response.data.success === true) {\r\n                  successCount++;\r\n                  if (Array.isArray(response.data.responses)) {\r\n                    allResponses = [\r\n                      ...allResponses,\r\n                      ...response.data.responses,\r\n                    ];\r\n                  }\r\n                } else {\r\n                  hasErrors = true;\r\n                  failureCount++;\r\n                  console.error(\r\n                    `Operation 4 API returned success: false`,\r\n                    response.data\r\n                  );\r\n                }\r\n              }\r\n            } catch (error) {\r\n              hasErrors = true;\r\n              failureCount++;\r\n              console.error(`Chunk ${i + 1} failed for operation 4:`, error);\r\n            }\r\n          }\r\n        } else {\r\n          for (let i = 0; i < chunks.length; i++) {\r\n            try {\r\n              const chunk = chunks[i];\r\n\r\n              // For operation 2, validate that instanceAttributes exist in each item\r\n              if (operationChoice === \"2\") {\r\n                chunk.forEach((item, idx) => {\r\n                  if (!item.instanceAttributes) {\r\n                    item.instanceAttributes = {};\r\n                  }\r\n                });\r\n              }\r\n\r\n              const response = await api.post(endpoint, {\r\n                ...userInfo,\r\n                items: chunk,\r\n              });\r\n\r\n              console.log(`Chunk ${i + 1} response:`, response);\r\n\r\n              // Process response data\r\n              if (response.data) {\r\n                if (response.data.success === true) {\r\n                  successCount++;\r\n                  if (Array.isArray(response.data.responses)) {\r\n                    allResponses = [\r\n                      ...allResponses,\r\n                      ...response.data.responses,\r\n                    ];\r\n                  }\r\n                } else {\r\n                  hasErrors = true;\r\n                  failureCount++;\r\n                  console.error(\r\n                    `Operation ${operationChoice} API returned success: false`,\r\n                    response.data\r\n                  );\r\n                }\r\n              } else {\r\n                hasErrors = true;\r\n                failureCount++;\r\n                console.error(\"Empty response data received\");\r\n              }\r\n            } catch (error) {\r\n              hasErrors = true;\r\n              failureCount++;\r\n              console.error(\r\n                `Chunk ${i + 1} failed for operation ${operationChoice}:`,\r\n                error\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Show results\r\n      setApiResponse(allResponses);\r\n      console.log(\r\n        `Operation ${operationChoice} completed. All responses:`,\r\n        allResponses\r\n      );\r\n\r\n      if (!hasErrors && allResponses.length > 0) {\r\n        showSuccessToast(MSG_UPLOAD_SUCCESS);\r\n        setShowSuccessModal(true);\r\n      } else {\r\n        showErrorToast(MSG_UPLOAD_FAILED_CONTACT_ADMIN);\r\n        setShowSuccessModal(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      showErrorToast(`${MSG_UPLOAD_FAILED}${error.message || \"Unknown error\"}`);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // console.log(\"Errors in Massupload.jsx:\", errors);\r\n\r\n  const isFileUploadDisabled = !operationChoice;\r\n  console.log(\"operationChoice in Massupload\", operationChoice);\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container-fluid d-flex justify-content-center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <div\r\n          className=\"w-100\"\r\n          style={{\r\n            maxWidth: \"1200px\",\r\n            maxHeight: \"500px\",\r\n            minHeight: \"300px\",\r\n            minWidth: \"300px\",\r\n          }}\r\n        >\r\n          <Stack className=\"mt-3\" gap={4}>\r\n            <Stack direction=\"horizontal\" gap={5}>\r\n              <CustomSelect\r\n                selectedValue={operationChoice}\r\n                onChange={handleOperationChange}\r\n                size=\"lg\"\r\n                className=\"w-50\"\r\n                options={{\r\n                  defaultLabel: \"Choose Operations\",\r\n                  list: [\r\n                    { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                    { value: \"2\", label: \"Physical Product Structure\" },\r\n                    { value: \"3\", label: \"Document\" },\r\n                    { value: \"4\", label: \"Physical Product-Document\" },\r\n                    { value: \"5\", label: \"Create/Update MEP\" },\r\n                    { value: \"6\", label: \"Remove Doc-Parts Relationships\" },\r\n                  ],\r\n                }}\r\n              />\r\n              {operationChoice === \"3\" && (\r\n                <Form.Group controlId=\"formFileMultiple\">\r\n                  <Form.Control\r\n                    type=\"file\"\r\n                    multiple\r\n                    // Attach the ref to the file input\r\n                  />\r\n                </Form.Group>\r\n              )}\r\n              <div className=\"ms-auto\">\r\n                <CustomButton\r\n                  variant=\"link\"\r\n                  size=\"lg\"\r\n                  onClick={handleDownloadTemplate}\r\n                  text=\"Download Template\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n\r\n            <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n              <FileUpload\r\n                ref={fileUploaderRef}\r\n                fileTypes={[\"XLSX\"]}\r\n                multiple={false}\r\n                onUpload={handleFileUpload}\r\n                onReset={handleReset}\r\n                disabled={isFileUploadDisabled}\r\n                message={\r\n                  isFileUploadDisabled\r\n                    ? \"Please select an operation first\"\r\n                    : \"Drag & Drop your files here or Click to browse\"\r\n                }\r\n              />\r\n            </div>\r\n\r\n            {isValidating && <Loader />}\r\n\r\n            {/* Add this where you want the loader to appear */}\r\n            {/* {isSubmitting && <Loader />} */}\r\n\r\n            {/* Loader for MEP handlings */}\r\n            {/* {isUploading && <Loader />}  */}\r\n            {/* Loading for Disconnecting Docs */}\r\n            {/* {isDisconnectUploading && <Loader />} */}\r\n            {/* Loader for submitting, uploading, or disconnecting */}\r\n\r\n            {(isSubmitting || isUploading || isDisconnectUploading) && (\r\n              <Loader />\r\n            )}\r\n\r\n            <Stack direction=\"horizontal\" gap={2}>\r\n              {/* <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Background\"\r\n            className=\"size-increase\"\r\n          /> */}\r\n              <div className=\"ms-auto d-flex gap-5\">\r\n                {errors.length > 0 && (\r\n                  <CustomButton\r\n                    variant=\"danger\"\r\n                    onClick={() => setShowContentErrors(true)}\r\n                    text={`Content Errors (${errors.length})`}\r\n                  />\r\n                )}\r\n                {operationChoice === \"5\" || operationChoice === \"6\" ? null : (\r\n                  <CustomButton\r\n                    variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n                    onClick={handleOpenSpreadsheetModal}\r\n                    text=\"Manage Spreadsheet Columns\"\r\n                    disabled={manageSpreadsheetDisabled}\r\n                  />\r\n                )}\r\n\r\n                <CustomButton\r\n                  variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n                  disabled={submitDisabled}\r\n                  size=\"lg\"\r\n                  onClick={handleClick}\r\n                  text=\"Submit\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n      {operationChoice === \"5\" || operationChoice === \"6\" ? null : (\r\n        <ColumnMappingModal\r\n          show={showSpreadsheetModal}\r\n          onHide={() => setShowSpreadsheetModal(false)}\r\n          columnHeaders={columnHeaders}\r\n          mandatoryAttributes={mandatoryAttributes}\r\n          existingMappings={\r\n            formattedData?.mappings ? formattedData.mappings : {}\r\n          }\r\n          dropdownOptions={mappedAttributes?.dropdownOptions}\r\n          allNLSValues={mappedAttributes?.allNLSValues}\r\n          operationChoice={operationChoice}\r\n          onColumnsMapped={(mappings, finalMapping) => {\r\n            console.log(\"Column mappings received:\", mappings);\r\n\r\n            const columnMappings = mappings;\r\n\r\n            if (formattedData && formattedData.originalData) {\r\n              const transformedData = transformSheetDataWithMappings(\r\n                formattedData.originalData,\r\n                columnMappings,\r\n                operationChoice,\r\n                mappedAttributes,\r\n                collabMapping\r\n              );\r\n\r\n              setFormattedData(transformedData);\r\n              showSuccessToast(\r\n                `Data mapped successfully with ${\r\n                  Object.keys(mappings).length\r\n                } columns`\r\n              );\r\n            } else {\r\n              showErrorToast(MSG_NO_SHEET_DATA);\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n\r\n      <SuccessModal\r\n        show={showSuccessModal}\r\n        onHide={() => setShowSuccessModal(false)}\r\n        responseData={apiResponse || []}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { loadPlatformAPI } from \"./helpers\";\r\n\r\nexport default async function getUserDetails() {\r\n  try {\r\n    const PlatformAPI = await loadPlatformAPI();\r\n    const user = await PlatformAPI.getUser();\r\n    // console.log(\" User details retrieved successfully:\", user);\r\n    // console.log(\"User ID:\", user?.id);\r\n    // console.log(\"User name:\", user?.name);\r\n    // console.log(\"User email:\", user?.email);\r\n    // console.log(\"User roles:\", user?.roles);\r\n    // console.log(\"User preferences:\", user?.preferences);\r\n\r\n    return user;\r\n  } catch (error) {\r\n    console.error(\" Error getting user details:\", error);\r\n    return null; // Or throw the error, depending on how you want to handle it\r\n  }\r\n}\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n"],"names":["fetchCsrfToken","async","securityContext1","window","widget","getValue","WAFData","loadWAFData","console","log","csrfURL","process","response","Promise","resolve","reject","authenticatedRequest","method","type","onComplete","onFailure","csrfToken","csrf","name","csrfValue","value","securityContextHeader","securityContextValue","error","useToast","showToast","_ref","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","progress","otherOptions","_objectWithoutProperties","_excluded","toast","_objectSpread","showSuccessToast","options","arguments","length","undefined","showErrorToast","showInfoToast","showWarningToast","useToastWithProgress","showToastWithProgress","showSuccessToastWithProgress","showErrorToastWithProgress","showInfoToastWithProgress","showWarningToastWithProgress","errors","processedErrors","useMemo","errorGroups","reduce","groups","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","index","style","parent","_jsx","CellMeasurer","columnIndex","rowIndex","children","_jsxs","className","width","map","column","i","err","ReusableAlert","variant","_Fragment","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","show","onHide","CustomModal","title","footerButtons","label","onClick","ErrorPopup","size","disabled","text","imageSrc","props","Button","src","alt","marginRight","forwardRef","ref","fileTypes","multiple","onUpload","onReset","files","setFiles","useState","useImperativeHandle","handleClearFiles","skipSuccessToast","handleClearFile","current","concat","FileUploader","handleChange","selectedFiles","fileArray","types","hoverTitle","file","display","alignItems","background","border","cursor","color","opacity","validateFile","collabSpaceTitles","selectedOperation","_config$MassUpload$ma","_config$MassUpload$ma2","operation","fileName","matchedOperation","expectedHeaders","config","fileHeaders","mandatoryAttributes","headers","Array","isArray","reader","FileReader","readAsBinaryString","onload","workbook","XLSX","e","target","result","dense","cellDates","cellNF","cellText","sheetName","SheetNames","worksheet","Sheets","uploadedHeaders","sheet_to_json","header","every","isTemplateMismatch","allSheetData","defval","chunks","data","chunkSize","processDataInChunks","validationErrors","invalidPrefixes","errorStats","mandatory","collabSpace","einPrefix","docPrefix","lowerCaseCollabSpaceTitles","toLowerCase","chunkIndex","chunk","Math","round","forEach","row","indexInChunk","globalRowIndex","field","toString","trim","_row$PhysicalProduct","_row$Dimension","_row$CollaborativeSp","userCollabSpace","firstRow","levelValue","levelStr","String","valueToValidate","_row$columnName","some","prefix","startsWith","_row$columnName2","_row$columnName3","quantityValue","numQuantity","isNaN","processedRows","totalRows","currentErrors","collaborativeSpace","documentPrefix","total","byType","sheetData","onerror","selectedValue","onChange","Form","Select","defaultLabel","list","option","attrIndex","onConfirm","columnHeaders","handleSelectChange","dropdownOptions","Table","bordered","currentMapping","filteredOptions","CustomSelect","uiLabel","selectedMappings","setSelectedMappings","allNLSValues","operationChoice","hasMatchingNLS","warn","normalizedHeader","nls","StaticTable","hasNLS","isMandatory","shouldBeDisabled","attr","columnHeader","backendName","find","opt","getBackendNameForUILabel","prev","mappedAttribute","currentColumnHeader","selectedValues","entries","filter","_","mapping","groupedOptions","ebomAttributes","isEBOMAttribute","group","isAlreadySelected","matchesAnyNLS","partAttributes","isNotEBOMAttribute","isNotSystemAttribute","allowedBosAttributes","prepareDropdownOptions","onColumnsMapped","existingMappings","useEffect","keys","errorMessage","handleOkClick","completeMappings","simplifiedMappings","specialMappings","userMapping","autoMapped","existingMapping","isSpecialColumn","matchingOption","getBackendNameForHeader","finalMapping","columnMappings","totalColumns","groupEnd","MappedList","initialOperationChoice","mappedAttributes","setMappedAttributes","setOperationChoice","ENOVIA_BASE_URL","fetchColumnMapping","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","effectiveOperation","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","Error","member","objectId","id","attributeResponse","busIDs","groupData","results","item","systemAttributes","groupNLS","controlCenterAttributes","bosAttributes","attributeGroups","apiNlsValues","systemNlsValues","ebomNlsValues","bosNlsValues","Set","filteredGroupData","mergeAttributes","relevantAttributes","deploymentExtension","mappedData","attributesByGroup","refreshMapping","initialOperationType","documentData","setDocumentData","operationType","setOperationType","API_URL","fetchDocumentData","_documentInfo$attribu","body","preferedType","typeName","subTypes","runUXBL","metrics","UXName","client_app_domain","client_app_name","status","documentInfo","JSON","stringify","extensionAttributes","attributes","DocumentsAttributes","hardcodedNlsValues","apiOptions","fullName","nameParts","extractedName","hardcodedOptions","combinedMappedData","currentPage","totalItems","itemsPerPage","onPageChange","totalPages","ceil","start","end","min","from","responseData","setCurrentPage","columnWidths","setColumnWidths","copiedCell","setCopiedCell","flattenedData","flatMap","flatten","allKeys","add","formatHeaderText","replace","word","toUpperCase","charAt","tooltip","paginatedData","clearAll","handleCopyCellValue","colIndex","buttonElement","textToCopy","navigator","clipboard","writeText","then","classList","setTimeout","remove","catch","getItemValue","lowerKey","k","displayValue","isCopied","statusValue","statusClass","stopPropagation","currentTarget","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x","y","rx","ry","d","CustomButton","handleExport","handleExportExcel","idx","ResizableBox","axis","resizeHandles","handle","right","top","onResizeStop","handleResize","newWidth","minConstraints","maxConstraints","minWidth","maxWidth","justifyContent","userSelect","paddingRight","boxSizing","overscanRowCount","Pagination","newPage","useMEPMassUpload","loading","setLoading","handleMEPMassupload","array","chunkArray","createMEPItems","_response$output","_response$output$memb","_response$output2","_response$output2$mem","Title","state","_checkMepResponse$out","_checkMepResponse$out2","checkMepResponse","ValidateMep","_checkMepResponse$out3","memberData","manufacturer","uploadBody","partSource","partSourceURL","manufacturerPartNumber","cestamp","createBody","items","isManufacturable","description","Description","_response$output3","_response$output3$mem","_response$output4","_response$output4$mem","_response$output5","_response$output5$mem","_extensionresponse$ou","_extensionresponse$ou2","extensionBody","engItem","source","identifier","relativePath","manufacturerCompany","extensionresponse","searchStr","getAttachedDocumentIds","baseUrl","productId","parentRelName","docName","_response$output$data","url","filteredData","_item$dataelements","dataelements","buildDisconnectPayload","docIds","parentId","docType","updateAction","relateddata","parents","documentType","disconnectDocuments","docs","res","useRemoveDocConnection","handleDocDisconnectingMassupload","specDocs","refDocs","nonExistingProducts","revisionNotMatch","notInWorkProducts","obsoleteProdcuts","disconnectPayload","searchUrl","revision","specIds","refIds","payload","disconnectResults","rowError","mainError","API_ENDPOINTS","transformSheetDataWithMappings","mappedAttributesData","collabMapping","excludedColumns","documentItems","rootData","backendFieldName","attribute","collabspaceTitle","CHUNK_SIZE","totalChunks","originalData","mappings","isDocumentPayload","documents","connectItemDocuments","PartType","PartNumber","PartRevision","DocumentType","DocumentName","DocumentRevision","RelationshipType","BOSAttributes","normalizeFieldName","rootFieldMapping","parttype","part_type","einnumber","ein_number","partnumber","part_number","partrevision","part_revision","documenttype","document_type","documentname","document_name","documentrevision","document_revision","relationshiptype","relationship_type","uiLabelBackendName","normalizedName","fieldName","bosSpecialAttrs","originalAttr","rootKey","isConnectItemDocumentsPayload","attributeGroupMap","getPathForAttribute","MBOM_GROUP_KEY","transformedItems","transformedRow","instanceAttributes","customerAttributes","productTypeColumn","productType","partNumber","_ref4","_mappedData$find","Type","path","pathParts","part","generateColumnMappings","systemAttributeMappings","isSpecial","systemAttrKey","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","isValidating","setIsValidating","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","useRef","formattedData","setFormattedData","userDetails","setUserDetails","securityContext","setSecurityContext","collabNames","setCollabNames","setCollabMapping","isSubmitting","setIsSubmitting","apiResponse","setApiResponse","showSuccessModal","setShowSuccessModal","productMappedAttributes","refreshProductMapping","useMassUpload","documentMappedAttributes","refreshDocumentMapping","useFetchDocumentData","getActiveData","handleRefreshForCurrentOperation","globalCollabSpaceTitles","globalCollabSpaceNames","userData","PlatformAPI","loadPlatformAPI","getUser","getUserDetails","fetchUserDetails","handleReset","selectElement","document","querySelector","MSG_WIDGET_RESET_SUCCESS","isDisconnectUploading","isUploading","handleClick","useCallback","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","minHeight","maxHeight","Stack","gap","direction","MSG_OPERATION_CHNAGED","Group","controlId","Control","handleDownloadTemplate","MSG_DROPDOWN_NOT_SELECTED","open","downloadTemplate","FileUpload","validationResult","transformedData","MSG_FILE_VALIDATED_SUCCESS","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","MSG_TEMPLATE_OPERATION_MISMATCH","Loader","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","MSG_NO_DATA_TO_SUBMIT","endpoint","MSG_INVALID_OPERATION_TYPE","successCount","failureCount","allResponses","hasErrors","docChunks","userInfo","email","login","userId","api","post","success","responses","emailNotification","MSG_UPLOAD_SUCCESS","MSG_UPLOAD_FAILED_CONTACT_ADMIN","MSG_UPLOAD_FAILED","ColumnMappingModal","MSG_NO_SHEET_DATA","SuccessModal","root","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","Alert","Modal","centered","Header","closeButton","Body","Footer","btn"],"sourceRoot":""}